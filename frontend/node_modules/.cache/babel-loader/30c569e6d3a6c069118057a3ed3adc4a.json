{"ast":null,"code":"/**\n * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to\n * provide resolution independent rendering based on `window.devicePixelRatio`.\n */\nvar HdpiCanvas =\n/** @class */\nfunction () {\n  // The width/height attributes of the Canvas element default to\n  // 300/150 according to w3.org.\n  function HdpiCanvas(document, width, height) {\n    if (document === void 0) {\n      document = window.document;\n    }\n\n    if (width === void 0) {\n      width = 600;\n    }\n\n    if (height === void 0) {\n      height = 300;\n    }\n\n    this._container = undefined; // `NaN` is deliberate here, so that overrides are always applied\n    // and the `resetTransform` inside the `resize` method works in IE11.\n\n    this._pixelRatio = NaN;\n    this.document = document;\n    this.element = document.createElement('canvas');\n    this.context = this.element.getContext('2d');\n    this.element.style.userSelect = 'none';\n    this.element.style.display = 'block';\n    this.setPixelRatio();\n    this.resize(width, height);\n  }\n\n  Object.defineProperty(HdpiCanvas.prototype, \"container\", {\n    get: function () {\n      return this._container;\n    },\n    set: function (value) {\n      if (this._container !== value) {\n        this.remove();\n\n        if (value) {\n          value.appendChild(this.element);\n        }\n\n        this._container = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  HdpiCanvas.prototype.remove = function () {\n    var parentNode = this.element.parentNode;\n\n    if (parentNode != null) {\n      parentNode.removeChild(this.element);\n    }\n  };\n\n  HdpiCanvas.prototype.destroy = function () {\n    this.element.remove();\n    this._canvas = undefined;\n    Object.freeze(this);\n  };\n\n  HdpiCanvas.prototype.toImage = function () {\n    var img = this.document.createElement('img');\n    img.src = this.getDataURL();\n    return img;\n  };\n\n  HdpiCanvas.prototype.getDataURL = function (type) {\n    return this.element.toDataURL(type);\n  };\n  /**\n   * @param options.fileName The `.png` extension is going to be added automatically.\n   * @param [options.background] Defaults to `white`.\n   */\n\n\n  HdpiCanvas.prototype.download = function (fileName) {\n    fileName = ((fileName || '').trim() || 'image') + '.png'; // Chart images saved as JPEG are a few times larger at 50% quality than PNG images,\n    // so we don't support saving to JPEG.\n\n    var type = 'image/png';\n    var dataUrl = this.getDataURL(type);\n    var document = this.document;\n\n    if (navigator.msSaveOrOpenBlob) {\n      // IE11\n      var binary = atob(dataUrl.split(',')[1]); // strip the `data:image/png;base64,` part\n\n      var array = [];\n\n      for (var i = 0, n = binary.length; i < n; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n\n      var blob = new Blob([new Uint8Array(array)], {\n        type: type\n      });\n      navigator.msSaveOrOpenBlob(blob, fileName);\n    } else {\n      var a = document.createElement('a');\n      a.href = dataUrl;\n      a.download = fileName;\n      a.style.display = 'none';\n      document.body.appendChild(a); // required for the `click` to work in Firefox\n\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  Object.defineProperty(HdpiCanvas.prototype, \"pixelRatio\", {\n    get: function () {\n      return this._pixelRatio;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Changes the pixel ratio of the Canvas element to the given value,\n   * or uses the window.devicePixelRatio (default), then resizes the Canvas\n   * element accordingly (default).\n   */\n\n  HdpiCanvas.prototype.setPixelRatio = function (ratio) {\n    var pixelRatio = ratio || window.devicePixelRatio;\n\n    if (pixelRatio === this.pixelRatio) {\n      return;\n    }\n\n    HdpiCanvas.overrideScale(this.context, pixelRatio);\n    this._pixelRatio = pixelRatio;\n    this.resize(this.width, this.height);\n  };\n\n  Object.defineProperty(HdpiCanvas.prototype, \"pixelated\", {\n    get: function () {\n      return this.element.style.imageRendering === 'pixelated';\n    },\n    set: function (value) {\n      this.element.style.imageRendering = value ? 'pixelated' : 'auto';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HdpiCanvas.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HdpiCanvas.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  HdpiCanvas.prototype.resize = function (width, height) {\n    var _a = this,\n        element = _a.element,\n        context = _a.context,\n        pixelRatio = _a.pixelRatio;\n\n    element.width = Math.round(width * pixelRatio);\n    element.height = Math.round(height * pixelRatio);\n    element.style.width = width + 'px';\n    element.style.height = height + 'px';\n    context.resetTransform();\n    this._width = width;\n    this._height = height;\n  };\n\n  Object.defineProperty(HdpiCanvas, \"textMeasuringContext\", {\n    get: function () {\n      if (this._textMeasuringContext) {\n        return this._textMeasuringContext;\n      }\n\n      var canvas = document.createElement('canvas');\n      return this._textMeasuringContext = canvas.getContext('2d');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HdpiCanvas, \"svgText\", {\n    get: function () {\n      if (this._svgText) {\n        return this._svgText;\n      }\n\n      var xmlns = 'http://www.w3.org/2000/svg';\n      var svg = document.createElementNS(xmlns, 'svg');\n      svg.setAttribute('width', '100');\n      svg.setAttribute('height', '100'); // Add a descriptive class name in case someone sees this SVG element\n      // in devtools and wonders about its purpose:\n\n      if (svg.classList) {\n        svg.classList.add('text-measuring-svg');\n      } else {\n        svg.setAttribute('class', 'text-measuring-svg');\n      }\n\n      svg.style.position = 'absolute';\n      svg.style.top = '-1000px';\n      svg.style.visibility = 'hidden';\n      var svgText = document.createElementNS(xmlns, 'text');\n      svgText.setAttribute('x', '0');\n      svgText.setAttribute('y', '30');\n      svgText.setAttribute('text', 'black');\n      svg.appendChild(svgText);\n      document.body.appendChild(svg);\n      this._svgText = svgText;\n      return svgText;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HdpiCanvas, \"has\", {\n    get: function () {\n      if (this._has) {\n        return this._has;\n      }\n\n      return this._has = Object.freeze({\n        textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined // Firefox implemented advanced TextMetrics object in v74:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584\n        // but it's buggy, so we'll keed using the SVG for text measurement in Firefox for now.\n        && !/Firefox\\/\\d+(.\\d)+/.test(window.navigator.userAgent),\n        getTransform: this.textMeasuringContext.getTransform !== undefined\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  HdpiCanvas.measureText = function (text, font, textBaseline, textAlign) {\n    var ctx = this.textMeasuringContext;\n    ctx.font = font;\n    ctx.textBaseline = textBaseline;\n    ctx.textAlign = textAlign;\n    return ctx.measureText(text);\n  };\n  /**\n   * Returns the width and height of the measured text.\n   * @param text The single-line text to measure.\n   * @param font The font shorthand string.\n   */\n\n\n  HdpiCanvas.getTextSize = function (text, font) {\n    if (this.has.textMetrics) {\n      var ctx = this.textMeasuringContext;\n      ctx.font = font;\n      var metrics = ctx.measureText(text);\n      return {\n        width: metrics.width,\n        height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n      };\n    } else {\n      return this.measureSvgText(text, font);\n    }\n  };\n\n  HdpiCanvas.measureSvgText = function (text, font) {\n    var cache = this.textSizeCache;\n    var fontCache = cache[font]; // Note: consider not caching the size of numeric strings.\n    // For example: if (isNaN(+text)) { // skip\n\n    if (fontCache) {\n      var size_1 = fontCache[text];\n\n      if (size_1) {\n        return size_1;\n      }\n    } else {\n      cache[font] = {};\n    }\n\n    var svgText = this.svgText;\n    svgText.style.font = font;\n    svgText.textContent = text; // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`\n    // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.\n    // But the `SVGRect` instance has half the properties of the `DOMRect`,\n    // so we use the `getBBox` method.\n\n    var bbox = svgText.getBBox();\n    var size = {\n      width: bbox.width,\n      height: bbox.height\n    };\n    cache[font][text] = size;\n    return size;\n  };\n\n  HdpiCanvas.overrideScale = function (ctx, scale) {\n    var depth = 0;\n    var overrides = {\n      save: function () {\n        this.$save();\n        depth++;\n      },\n      restore: function () {\n        if (depth > 0) {\n          this.$restore();\n          depth--;\n        }\n      },\n      setTransform: function (a, b, c, d, e, f) {\n        this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);\n      },\n      resetTransform: function () {\n        // As of Jan 8, 2019, `resetTransform` is still an \"experimental technology\",\n        // and doesn't work in IE11 and Edge 44.\n        this.$setTransform(scale, 0, 0, scale, 0, 0);\n        this.save();\n        depth = 0; // The scale above will be impossible to restore,\n        // because we override the `ctx.restore` above and\n        // check `depth` there.\n      }\n    };\n\n    for (var name_1 in overrides) {\n      if (overrides.hasOwnProperty(name_1)) {\n        // Save native methods under prefixed names,\n        // if this hasn't been done by the previous overrides already.\n        if (!ctx['$' + name_1]) {\n          ctx['$' + name_1] = ctx[name_1];\n        } // Replace native methods with overrides,\n        // or previous overrides with the new ones.\n\n\n        ctx[name_1] = overrides[name_1];\n      }\n    }\n  };\n\n  HdpiCanvas.textSizeCache = {};\n  return HdpiCanvas;\n}();\n\nexport { HdpiCanvas };","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/canvas/hdpiCanvas.js"],"names":["HdpiCanvas","document","width","height","window","_container","undefined","_pixelRatio","NaN","element","createElement","context","getContext","style","userSelect","display","setPixelRatio","resize","Object","defineProperty","prototype","get","set","value","remove","appendChild","enumerable","configurable","parentNode","removeChild","destroy","_canvas","freeze","toImage","img","src","getDataURL","type","toDataURL","download","fileName","trim","dataUrl","navigator","msSaveOrOpenBlob","binary","atob","split","array","i","n","length","push","charCodeAt","blob","Blob","Uint8Array","a","href","body","click","ratio","pixelRatio","devicePixelRatio","overrideScale","imageRendering","_width","_height","_a","Math","round","resetTransform","_textMeasuringContext","canvas","_svgText","xmlns","svg","createElementNS","setAttribute","classList","add","position","top","visibility","svgText","_has","textMetrics","textMeasuringContext","measureText","actualBoundingBoxDescent","test","userAgent","getTransform","text","font","textBaseline","textAlign","ctx","getTextSize","has","metrics","actualBoundingBoxAscent","measureSvgText","cache","textSizeCache","fontCache","size_1","textContent","bbox","getBBox","size","scale","depth","overrides","save","$save","restore","$restore","setTransform","b","c","d","e","f","$setTransform","name_1","hasOwnProperty"],"mappings":"AAAA;;;;AAIA,IAAIA,UAAU;AAAG;AAAe,YAAY;AACxC;AACA;AACA,WAASA,UAAT,CAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6C;AACzC,QAAIF,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAGG,MAAM,CAACH,QAAlB;AAA6B;;AACxD,QAAIC,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,MAAAA,KAAK,GAAG,GAAR;AAAc;;AACtC,QAAIC,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,GAAT;AAAe;;AACxC,SAAKE,UAAL,GAAkBC,SAAlB,CAJyC,CAKzC;AACA;;AACA,SAAKC,WAAL,GAAmBC,GAAnB;AACA,SAAKP,QAAL,GAAgBA,QAAhB;AACA,SAAKQ,OAAL,GAAeR,QAAQ,CAACS,aAAT,CAAuB,QAAvB,CAAf;AACA,SAAKC,OAAL,GAAe,KAAKF,OAAL,CAAaG,UAAb,CAAwB,IAAxB,CAAf;AACA,SAAKH,OAAL,CAAaI,KAAb,CAAmBC,UAAnB,GAAgC,MAAhC;AACA,SAAKL,OAAL,CAAaI,KAAb,CAAmBE,OAAnB,GAA6B,OAA7B;AACA,SAAKC,aAAL;AACA,SAAKC,MAAL,CAAYf,KAAZ,EAAmBC,MAAnB;AACH;;AACDe,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAU,CAACoB,SAAjC,EAA4C,WAA5C,EAAyD;AACrDC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKhB,UAAZ;AACH,KAHoD;AAIrDiB,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AAClB,UAAI,KAAKlB,UAAL,KAAoBkB,KAAxB,EAA+B;AAC3B,aAAKC,MAAL;;AACA,YAAID,KAAJ,EAAW;AACPA,UAAAA,KAAK,CAACE,WAAN,CAAkB,KAAKhB,OAAvB;AACH;;AACD,aAAKJ,UAAL,GAAkBkB,KAAlB;AACH;AACJ,KAZoD;AAarDG,IAAAA,UAAU,EAAE,IAbyC;AAcrDC,IAAAA,YAAY,EAAE;AAduC,GAAzD;;AAgBA3B,EAAAA,UAAU,CAACoB,SAAX,CAAqBI,MAArB,GAA8B,YAAY;AACtC,QAAII,UAAU,GAAG,KAAKnB,OAAL,CAAamB,UAA9B;;AACA,QAAIA,UAAU,IAAI,IAAlB,EAAwB;AACpBA,MAAAA,UAAU,CAACC,WAAX,CAAuB,KAAKpB,OAA5B;AACH;AACJ,GALD;;AAMAT,EAAAA,UAAU,CAACoB,SAAX,CAAqBU,OAArB,GAA+B,YAAY;AACvC,SAAKrB,OAAL,CAAae,MAAb;AACA,SAAKO,OAAL,GAAezB,SAAf;AACAY,IAAAA,MAAM,CAACc,MAAP,CAAc,IAAd;AACH,GAJD;;AAKAhC,EAAAA,UAAU,CAACoB,SAAX,CAAqBa,OAArB,GAA+B,YAAY;AACvC,QAAIC,GAAG,GAAG,KAAKjC,QAAL,CAAcS,aAAd,CAA4B,KAA5B,CAAV;AACAwB,IAAAA,GAAG,CAACC,GAAJ,GAAU,KAAKC,UAAL,EAAV;AACA,WAAOF,GAAP;AACH,GAJD;;AAKAlC,EAAAA,UAAU,CAACoB,SAAX,CAAqBgB,UAArB,GAAkC,UAAUC,IAAV,EAAgB;AAC9C,WAAO,KAAK5B,OAAL,CAAa6B,SAAb,CAAuBD,IAAvB,CAAP;AACH,GAFD;AAGA;;;;;;AAIArC,EAAAA,UAAU,CAACoB,SAAX,CAAqBmB,QAArB,GAAgC,UAAUC,QAAV,EAAoB;AAChDA,IAAAA,QAAQ,GAAG,CAAC,CAACA,QAAQ,IAAI,EAAb,EAAiBC,IAAjB,MAA2B,OAA5B,IAAuC,MAAlD,CADgD,CAEhD;AACA;;AACA,QAAIJ,IAAI,GAAG,WAAX;AACA,QAAIK,OAAO,GAAG,KAAKN,UAAL,CAAgBC,IAAhB,CAAd;AACA,QAAIpC,QAAQ,GAAG,KAAKA,QAApB;;AACA,QAAI0C,SAAS,CAACC,gBAAd,EAAgC;AAAE;AAC9B,UAAIC,MAAM,GAAGC,IAAI,CAACJ,OAAO,CAACK,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAAjB,CAD4B,CACc;;AAC1C,UAAIC,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CD,QAAAA,KAAK,CAACI,IAAN,CAAWP,MAAM,CAACQ,UAAP,CAAkBJ,CAAlB,CAAX;AACH;;AACD,UAAIK,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeR,KAAf,CAAD,CAAT,EAAkC;AAAEX,QAAAA,IAAI,EAAEA;AAAR,OAAlC,CAAX;AACAM,MAAAA,SAAS,CAACC,gBAAV,CAA2BU,IAA3B,EAAiCd,QAAjC;AACH,KARD,MASK;AACD,UAAIiB,CAAC,GAAGxD,QAAQ,CAACS,aAAT,CAAuB,GAAvB,CAAR;AACA+C,MAAAA,CAAC,CAACC,IAAF,GAAShB,OAAT;AACAe,MAAAA,CAAC,CAAClB,QAAF,GAAaC,QAAb;AACAiB,MAAAA,CAAC,CAAC5C,KAAF,CAAQE,OAAR,GAAkB,MAAlB;AACAd,MAAAA,QAAQ,CAAC0D,IAAT,CAAclC,WAAd,CAA0BgC,CAA1B,EALC,CAK6B;;AAC9BA,MAAAA,CAAC,CAACG,KAAF;AACA3D,MAAAA,QAAQ,CAAC0D,IAAT,CAAc9B,WAAd,CAA0B4B,CAA1B;AACH;AACJ,GAzBD;;AA0BAvC,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAU,CAACoB,SAAjC,EAA4C,YAA5C,EAA0D;AACtDC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKd,WAAZ;AACH,KAHqD;AAItDmB,IAAAA,UAAU,EAAE,IAJ0C;AAKtDC,IAAAA,YAAY,EAAE;AALwC,GAA1D;AAOA;;;;;;AAKA3B,EAAAA,UAAU,CAACoB,SAAX,CAAqBJ,aAArB,GAAqC,UAAU6C,KAAV,EAAiB;AAClD,QAAIC,UAAU,GAAGD,KAAK,IAAIzD,MAAM,CAAC2D,gBAAjC;;AACA,QAAID,UAAU,KAAK,KAAKA,UAAxB,EAAoC;AAChC;AACH;;AACD9D,IAAAA,UAAU,CAACgE,aAAX,CAAyB,KAAKrD,OAA9B,EAAuCmD,UAAvC;AACA,SAAKvD,WAAL,GAAmBuD,UAAnB;AACA,SAAK7C,MAAL,CAAY,KAAKf,KAAjB,EAAwB,KAAKC,MAA7B;AACH,GARD;;AASAe,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAU,CAACoB,SAAjC,EAA4C,WAA5C,EAAyD;AACrDC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKZ,OAAL,CAAaI,KAAb,CAAmBoD,cAAnB,KAAsC,WAA7C;AACH,KAHoD;AAIrD3C,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AAClB,WAAKd,OAAL,CAAaI,KAAb,CAAmBoD,cAAnB,GAAoC1C,KAAK,GAAG,WAAH,GAAiB,MAA1D;AACH,KANoD;AAOrDG,IAAAA,UAAU,EAAE,IAPyC;AAQrDC,IAAAA,YAAY,EAAE;AARuC,GAAzD;AAUAT,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAU,CAACoB,SAAjC,EAA4C,OAA5C,EAAqD;AACjDC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAK6C,MAAZ;AACH,KAHgD;AAIjDxC,IAAAA,UAAU,EAAE,IAJqC;AAKjDC,IAAAA,YAAY,EAAE;AALmC,GAArD;AAOAT,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAU,CAACoB,SAAjC,EAA4C,QAA5C,EAAsD;AAClDC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAK8C,OAAZ;AACH,KAHiD;AAIlDzC,IAAAA,UAAU,EAAE,IAJsC;AAKlDC,IAAAA,YAAY,EAAE;AALoC,GAAtD;;AAOA3B,EAAAA,UAAU,CAACoB,SAAX,CAAqBH,MAArB,GAA8B,UAAUf,KAAV,EAAiBC,MAAjB,EAAyB;AACnD,QAAIiE,EAAE,GAAG,IAAT;AAAA,QAAe3D,OAAO,GAAG2D,EAAE,CAAC3D,OAA5B;AAAA,QAAqCE,OAAO,GAAGyD,EAAE,CAACzD,OAAlD;AAAA,QAA2DmD,UAAU,GAAGM,EAAE,CAACN,UAA3E;;AACArD,IAAAA,OAAO,CAACP,KAAR,GAAgBmE,IAAI,CAACC,KAAL,CAAWpE,KAAK,GAAG4D,UAAnB,CAAhB;AACArD,IAAAA,OAAO,CAACN,MAAR,GAAiBkE,IAAI,CAACC,KAAL,CAAWnE,MAAM,GAAG2D,UAApB,CAAjB;AACArD,IAAAA,OAAO,CAACI,KAAR,CAAcX,KAAd,GAAsBA,KAAK,GAAG,IAA9B;AACAO,IAAAA,OAAO,CAACI,KAAR,CAAcV,MAAd,GAAuBA,MAAM,GAAG,IAAhC;AACAQ,IAAAA,OAAO,CAAC4D,cAAR;AACA,SAAKL,MAAL,GAAchE,KAAd;AACA,SAAKiE,OAAL,GAAehE,MAAf;AACH,GATD;;AAUAe,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAtB,EAAkC,sBAAlC,EAA0D;AACtDqB,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,KAAKmD,qBAAT,EAAgC;AAC5B,eAAO,KAAKA,qBAAZ;AACH;;AACD,UAAIC,MAAM,GAAGxE,QAAQ,CAACS,aAAT,CAAuB,QAAvB,CAAb;AACA,aAAO,KAAK8D,qBAAL,GAA6BC,MAAM,CAAC7D,UAAP,CAAkB,IAAlB,CAApC;AACH,KAPqD;AAQtDc,IAAAA,UAAU,EAAE,IAR0C;AAStDC,IAAAA,YAAY,EAAE;AATwC,GAA1D;AAWAT,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAtB,EAAkC,SAAlC,EAA6C;AACzCqB,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,KAAKqD,QAAT,EAAmB;AACf,eAAO,KAAKA,QAAZ;AACH;;AACD,UAAIC,KAAK,GAAG,4BAAZ;AACA,UAAIC,GAAG,GAAG3E,QAAQ,CAAC4E,eAAT,CAAyBF,KAAzB,EAAgC,KAAhC,CAAV;AACAC,MAAAA,GAAG,CAACE,YAAJ,CAAiB,OAAjB,EAA0B,KAA1B;AACAF,MAAAA,GAAG,CAACE,YAAJ,CAAiB,QAAjB,EAA2B,KAA3B,EAPa,CAQb;AACA;;AACA,UAAIF,GAAG,CAACG,SAAR,EAAmB;AACfH,QAAAA,GAAG,CAACG,SAAJ,CAAcC,GAAd,CAAkB,oBAAlB;AACH,OAFD,MAGK;AACDJ,QAAAA,GAAG,CAACE,YAAJ,CAAiB,OAAjB,EAA0B,oBAA1B;AACH;;AACDF,MAAAA,GAAG,CAAC/D,KAAJ,CAAUoE,QAAV,GAAqB,UAArB;AACAL,MAAAA,GAAG,CAAC/D,KAAJ,CAAUqE,GAAV,GAAgB,SAAhB;AACAN,MAAAA,GAAG,CAAC/D,KAAJ,CAAUsE,UAAV,GAAuB,QAAvB;AACA,UAAIC,OAAO,GAAGnF,QAAQ,CAAC4E,eAAT,CAAyBF,KAAzB,EAAgC,MAAhC,CAAd;AACAS,MAAAA,OAAO,CAACN,YAAR,CAAqB,GAArB,EAA0B,GAA1B;AACAM,MAAAA,OAAO,CAACN,YAAR,CAAqB,GAArB,EAA0B,IAA1B;AACAM,MAAAA,OAAO,CAACN,YAAR,CAAqB,MAArB,EAA6B,OAA7B;AACAF,MAAAA,GAAG,CAACnD,WAAJ,CAAgB2D,OAAhB;AACAnF,MAAAA,QAAQ,CAAC0D,IAAT,CAAclC,WAAd,CAA0BmD,GAA1B;AACA,WAAKF,QAAL,GAAgBU,OAAhB;AACA,aAAOA,OAAP;AACH,KA5BwC;AA6BzC1D,IAAAA,UAAU,EAAE,IA7B6B;AA8BzCC,IAAAA,YAAY,EAAE;AA9B2B,GAA7C;AAgCAT,EAAAA,MAAM,CAACC,cAAP,CAAsBnB,UAAtB,EAAkC,KAAlC,EAAyC;AACrCqB,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,KAAKgE,IAAT,EAAe;AACX,eAAO,KAAKA,IAAZ;AACH;;AACD,aAAO,KAAKA,IAAL,GAAYnE,MAAM,CAACc,MAAP,CAAc;AAC7BsD,QAAAA,WAAW,EAAE,KAAKC,oBAAL,CAA0BC,WAA1B,CAAsC,MAAtC,EAA8CC,wBAA9C,KAA2EnF,SAA3E,CACT;AACA;AACA;AAHS,WAIN,CAAC,qBAAqBoF,IAArB,CAA0BtF,MAAM,CAACuC,SAAP,CAAiBgD,SAA3C,CALqB;AAM7BC,QAAAA,YAAY,EAAE,KAAKL,oBAAL,CAA0BK,YAA1B,KAA2CtF;AAN5B,OAAd,CAAnB;AAQH,KAboC;AAcrCoB,IAAAA,UAAU,EAAE,IAdyB;AAerCC,IAAAA,YAAY,EAAE;AAfuB,GAAzC;;AAiBA3B,EAAAA,UAAU,CAACwF,WAAX,GAAyB,UAAUK,IAAV,EAAgBC,IAAhB,EAAsBC,YAAtB,EAAoCC,SAApC,EAA+C;AACpE,QAAIC,GAAG,GAAG,KAAKV,oBAAf;AACAU,IAAAA,GAAG,CAACH,IAAJ,GAAWA,IAAX;AACAG,IAAAA,GAAG,CAACF,YAAJ,GAAmBA,YAAnB;AACAE,IAAAA,GAAG,CAACD,SAAJ,GAAgBA,SAAhB;AACA,WAAOC,GAAG,CAACT,WAAJ,CAAgBK,IAAhB,CAAP;AACH,GAND;AAOA;;;;;;;AAKA7F,EAAAA,UAAU,CAACkG,WAAX,GAAyB,UAAUL,IAAV,EAAgBC,IAAhB,EAAsB;AAC3C,QAAI,KAAKK,GAAL,CAASb,WAAb,EAA0B;AACtB,UAAIW,GAAG,GAAG,KAAKV,oBAAf;AACAU,MAAAA,GAAG,CAACH,IAAJ,GAAWA,IAAX;AACA,UAAIM,OAAO,GAAGH,GAAG,CAACT,WAAJ,CAAgBK,IAAhB,CAAd;AACA,aAAO;AACH3F,QAAAA,KAAK,EAAEkG,OAAO,CAAClG,KADZ;AAEHC,QAAAA,MAAM,EAAEiG,OAAO,CAACC,uBAAR,GAAkCD,OAAO,CAACX;AAF/C,OAAP;AAIH,KARD,MASK;AACD,aAAO,KAAKa,cAAL,CAAoBT,IAApB,EAA0BC,IAA1B,CAAP;AACH;AACJ,GAbD;;AAcA9F,EAAAA,UAAU,CAACsG,cAAX,GAA4B,UAAUT,IAAV,EAAgBC,IAAhB,EAAsB;AAC9C,QAAIS,KAAK,GAAG,KAAKC,aAAjB;AACA,QAAIC,SAAS,GAAGF,KAAK,CAACT,IAAD,CAArB,CAF8C,CAG9C;AACA;;AACA,QAAIW,SAAJ,EAAe;AACX,UAAIC,MAAM,GAAGD,SAAS,CAACZ,IAAD,CAAtB;;AACA,UAAIa,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;AACJ,KALD,MAMK;AACDH,MAAAA,KAAK,CAACT,IAAD,CAAL,GAAc,EAAd;AACH;;AACD,QAAIV,OAAO,GAAG,KAAKA,OAAnB;AACAA,IAAAA,OAAO,CAACvE,KAAR,CAAciF,IAAd,GAAqBA,IAArB;AACAV,IAAAA,OAAO,CAACuB,WAAR,GAAsBd,IAAtB,CAhB8C,CAiB9C;AACA;AACA;AACA;;AACA,QAAIe,IAAI,GAAGxB,OAAO,CAACyB,OAAR,EAAX;AACA,QAAIC,IAAI,GAAG;AACP5G,MAAAA,KAAK,EAAE0G,IAAI,CAAC1G,KADL;AAEPC,MAAAA,MAAM,EAAEyG,IAAI,CAACzG;AAFN,KAAX;AAIAoG,IAAAA,KAAK,CAACT,IAAD,CAAL,CAAYD,IAAZ,IAAoBiB,IAApB;AACA,WAAOA,IAAP;AACH,GA5BD;;AA6BA9G,EAAAA,UAAU,CAACgE,aAAX,GAA2B,UAAUiC,GAAV,EAAec,KAAf,EAAsB;AAC7C,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,IAAI,EAAE,YAAY;AACd,aAAKC,KAAL;AACAH,QAAAA,KAAK;AACR,OAJW;AAKZI,MAAAA,OAAO,EAAE,YAAY;AACjB,YAAIJ,KAAK,GAAG,CAAZ,EAAe;AACX,eAAKK,QAAL;AACAL,UAAAA,KAAK;AACR;AACJ,OAVW;AAWZM,MAAAA,YAAY,EAAE,UAAU7D,CAAV,EAAa8D,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACtC,aAAKC,aAAL,CAAmBnE,CAAC,GAAGsD,KAAvB,EAA8BQ,CAAC,GAAGR,KAAlC,EAAyCS,CAAC,GAAGT,KAA7C,EAAoDU,CAAC,GAAGV,KAAxD,EAA+DW,CAAC,GAAGX,KAAnE,EAA0EY,CAAC,GAAGZ,KAA9E;AACH,OAbW;AAcZxC,MAAAA,cAAc,EAAE,YAAY;AACxB;AACA;AACA,aAAKqD,aAAL,CAAmBb,KAAnB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgCA,KAAhC,EAAuC,CAAvC,EAA0C,CAA1C;AACA,aAAKG,IAAL;AACAF,QAAAA,KAAK,GAAG,CAAR,CALwB,CAMxB;AACA;AACA;AACH;AAvBW,KAAhB;;AAyBA,SAAK,IAAIa,MAAT,IAAmBZ,SAAnB,EAA8B;AAC1B,UAAIA,SAAS,CAACa,cAAV,CAAyBD,MAAzB,CAAJ,EAAsC;AAClC;AACA;AACA,YAAI,CAAC5B,GAAG,CAAC,MAAM4B,MAAP,CAAR,EAAwB;AACpB5B,UAAAA,GAAG,CAAC,MAAM4B,MAAP,CAAH,GAAoB5B,GAAG,CAAC4B,MAAD,CAAvB;AACH,SALiC,CAMlC;AACA;;;AACA5B,QAAAA,GAAG,CAAC4B,MAAD,CAAH,GAAcZ,SAAS,CAACY,MAAD,CAAvB;AACH;AACJ;AACJ,GAvCD;;AAwCA7H,EAAAA,UAAU,CAACwG,aAAX,GAA2B,EAA3B;AACA,SAAOxG,UAAP;AACH,CAxS+B,EAAhC;;AAySA,SAASA,UAAT","sourcesContent":["/**\n * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to\n * provide resolution independent rendering based on `window.devicePixelRatio`.\n */\nvar HdpiCanvas = /** @class */ (function () {\n    // The width/height attributes of the Canvas element default to\n    // 300/150 according to w3.org.\n    function HdpiCanvas(document, width, height) {\n        if (document === void 0) { document = window.document; }\n        if (width === void 0) { width = 600; }\n        if (height === void 0) { height = 300; }\n        this._container = undefined;\n        // `NaN` is deliberate here, so that overrides are always applied\n        // and the `resetTransform` inside the `resize` method works in IE11.\n        this._pixelRatio = NaN;\n        this.document = document;\n        this.element = document.createElement('canvas');\n        this.context = this.element.getContext('2d');\n        this.element.style.userSelect = 'none';\n        this.element.style.display = 'block';\n        this.setPixelRatio();\n        this.resize(width, height);\n    }\n    Object.defineProperty(HdpiCanvas.prototype, \"container\", {\n        get: function () {\n            return this._container;\n        },\n        set: function (value) {\n            if (this._container !== value) {\n                this.remove();\n                if (value) {\n                    value.appendChild(this.element);\n                }\n                this._container = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HdpiCanvas.prototype.remove = function () {\n        var parentNode = this.element.parentNode;\n        if (parentNode != null) {\n            parentNode.removeChild(this.element);\n        }\n    };\n    HdpiCanvas.prototype.destroy = function () {\n        this.element.remove();\n        this._canvas = undefined;\n        Object.freeze(this);\n    };\n    HdpiCanvas.prototype.toImage = function () {\n        var img = this.document.createElement('img');\n        img.src = this.getDataURL();\n        return img;\n    };\n    HdpiCanvas.prototype.getDataURL = function (type) {\n        return this.element.toDataURL(type);\n    };\n    /**\n     * @param options.fileName The `.png` extension is going to be added automatically.\n     * @param [options.background] Defaults to `white`.\n     */\n    HdpiCanvas.prototype.download = function (fileName) {\n        fileName = ((fileName || '').trim() || 'image') + '.png';\n        // Chart images saved as JPEG are a few times larger at 50% quality than PNG images,\n        // so we don't support saving to JPEG.\n        var type = 'image/png';\n        var dataUrl = this.getDataURL(type);\n        var document = this.document;\n        if (navigator.msSaveOrOpenBlob) { // IE11\n            var binary = atob(dataUrl.split(',')[1]); // strip the `data:image/png;base64,` part\n            var array = [];\n            for (var i = 0, n = binary.length; i < n; i++) {\n                array.push(binary.charCodeAt(i));\n            }\n            var blob = new Blob([new Uint8Array(array)], { type: type });\n            navigator.msSaveOrOpenBlob(blob, fileName);\n        }\n        else {\n            var a = document.createElement('a');\n            a.href = dataUrl;\n            a.download = fileName;\n            a.style.display = 'none';\n            document.body.appendChild(a); // required for the `click` to work in Firefox\n            a.click();\n            document.body.removeChild(a);\n        }\n    };\n    Object.defineProperty(HdpiCanvas.prototype, \"pixelRatio\", {\n        get: function () {\n            return this._pixelRatio;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Changes the pixel ratio of the Canvas element to the given value,\n     * or uses the window.devicePixelRatio (default), then resizes the Canvas\n     * element accordingly (default).\n     */\n    HdpiCanvas.prototype.setPixelRatio = function (ratio) {\n        var pixelRatio = ratio || window.devicePixelRatio;\n        if (pixelRatio === this.pixelRatio) {\n            return;\n        }\n        HdpiCanvas.overrideScale(this.context, pixelRatio);\n        this._pixelRatio = pixelRatio;\n        this.resize(this.width, this.height);\n    };\n    Object.defineProperty(HdpiCanvas.prototype, \"pixelated\", {\n        get: function () {\n            return this.element.style.imageRendering === 'pixelated';\n        },\n        set: function (value) {\n            this.element.style.imageRendering = value ? 'pixelated' : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HdpiCanvas.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HdpiCanvas.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HdpiCanvas.prototype.resize = function (width, height) {\n        var _a = this, element = _a.element, context = _a.context, pixelRatio = _a.pixelRatio;\n        element.width = Math.round(width * pixelRatio);\n        element.height = Math.round(height * pixelRatio);\n        element.style.width = width + 'px';\n        element.style.height = height + 'px';\n        context.resetTransform();\n        this._width = width;\n        this._height = height;\n    };\n    Object.defineProperty(HdpiCanvas, \"textMeasuringContext\", {\n        get: function () {\n            if (this._textMeasuringContext) {\n                return this._textMeasuringContext;\n            }\n            var canvas = document.createElement('canvas');\n            return this._textMeasuringContext = canvas.getContext('2d');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HdpiCanvas, \"svgText\", {\n        get: function () {\n            if (this._svgText) {\n                return this._svgText;\n            }\n            var xmlns = 'http://www.w3.org/2000/svg';\n            var svg = document.createElementNS(xmlns, 'svg');\n            svg.setAttribute('width', '100');\n            svg.setAttribute('height', '100');\n            // Add a descriptive class name in case someone sees this SVG element\n            // in devtools and wonders about its purpose:\n            if (svg.classList) {\n                svg.classList.add('text-measuring-svg');\n            }\n            else {\n                svg.setAttribute('class', 'text-measuring-svg');\n            }\n            svg.style.position = 'absolute';\n            svg.style.top = '-1000px';\n            svg.style.visibility = 'hidden';\n            var svgText = document.createElementNS(xmlns, 'text');\n            svgText.setAttribute('x', '0');\n            svgText.setAttribute('y', '30');\n            svgText.setAttribute('text', 'black');\n            svg.appendChild(svgText);\n            document.body.appendChild(svg);\n            this._svgText = svgText;\n            return svgText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HdpiCanvas, \"has\", {\n        get: function () {\n            if (this._has) {\n                return this._has;\n            }\n            return this._has = Object.freeze({\n                textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined\n                    // Firefox implemented advanced TextMetrics object in v74:\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584\n                    // but it's buggy, so we'll keed using the SVG for text measurement in Firefox for now.\n                    && !/Firefox\\/\\d+(.\\d)+/.test(window.navigator.userAgent),\n                getTransform: this.textMeasuringContext.getTransform !== undefined\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HdpiCanvas.measureText = function (text, font, textBaseline, textAlign) {\n        var ctx = this.textMeasuringContext;\n        ctx.font = font;\n        ctx.textBaseline = textBaseline;\n        ctx.textAlign = textAlign;\n        return ctx.measureText(text);\n    };\n    /**\n     * Returns the width and height of the measured text.\n     * @param text The single-line text to measure.\n     * @param font The font shorthand string.\n     */\n    HdpiCanvas.getTextSize = function (text, font) {\n        if (this.has.textMetrics) {\n            var ctx = this.textMeasuringContext;\n            ctx.font = font;\n            var metrics = ctx.measureText(text);\n            return {\n                width: metrics.width,\n                height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n            };\n        }\n        else {\n            return this.measureSvgText(text, font);\n        }\n    };\n    HdpiCanvas.measureSvgText = function (text, font) {\n        var cache = this.textSizeCache;\n        var fontCache = cache[font];\n        // Note: consider not caching the size of numeric strings.\n        // For example: if (isNaN(+text)) { // skip\n        if (fontCache) {\n            var size_1 = fontCache[text];\n            if (size_1) {\n                return size_1;\n            }\n        }\n        else {\n            cache[font] = {};\n        }\n        var svgText = this.svgText;\n        svgText.style.font = font;\n        svgText.textContent = text;\n        // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`\n        // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.\n        // But the `SVGRect` instance has half the properties of the `DOMRect`,\n        // so we use the `getBBox` method.\n        var bbox = svgText.getBBox();\n        var size = {\n            width: bbox.width,\n            height: bbox.height\n        };\n        cache[font][text] = size;\n        return size;\n    };\n    HdpiCanvas.overrideScale = function (ctx, scale) {\n        var depth = 0;\n        var overrides = {\n            save: function () {\n                this.$save();\n                depth++;\n            },\n            restore: function () {\n                if (depth > 0) {\n                    this.$restore();\n                    depth--;\n                }\n            },\n            setTransform: function (a, b, c, d, e, f) {\n                this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);\n            },\n            resetTransform: function () {\n                // As of Jan 8, 2019, `resetTransform` is still an \"experimental technology\",\n                // and doesn't work in IE11 and Edge 44.\n                this.$setTransform(scale, 0, 0, scale, 0, 0);\n                this.save();\n                depth = 0;\n                // The scale above will be impossible to restore,\n                // because we override the `ctx.restore` above and\n                // check `depth` there.\n            }\n        };\n        for (var name_1 in overrides) {\n            if (overrides.hasOwnProperty(name_1)) {\n                // Save native methods under prefixed names,\n                // if this hasn't been done by the previous overrides already.\n                if (!ctx['$' + name_1]) {\n                    ctx['$' + name_1] = ctx[name_1];\n                }\n                // Replace native methods with overrides,\n                // or previous overrides with the new ones.\n                ctx[name_1] = overrides[name_1];\n            }\n        }\n    };\n    HdpiCanvas.textSizeCache = {};\n    return HdpiCanvas;\n}());\nexport { HdpiCanvas };\n"]},"metadata":{},"sourceType":"module"}