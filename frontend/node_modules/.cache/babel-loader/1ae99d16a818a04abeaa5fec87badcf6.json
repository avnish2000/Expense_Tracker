{"ast":null,"code":"import { CountableTimeInterval } from \"./interval\";\nimport { durationHour, durationMinute, durationSecond } from \"./duration\";\n\nfunction floor(date) {\n  date.setTime(date.getTime() - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}\n\nfunction offset(date, hours) {\n  date.setTime(date.getTime() + hours * durationHour);\n}\n\nfunction count(start, end) {\n  return (end.getTime() - start.getTime()) / durationHour;\n}\n\nfunction field(date) {\n  return date.getHours();\n}\n\nexport var hour = new CountableTimeInterval(floor, offset, count, field);\nexport default hour;","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/util/time/hour.js"],"names":["CountableTimeInterval","durationHour","durationMinute","durationSecond","floor","date","setTime","getTime","getMilliseconds","getSeconds","getMinutes","offset","hours","count","start","end","field","getHours","hour"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,YAAtC;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,cAAvC,QAA6D,YAA7D;;AACA,SAASC,KAAT,CAAeC,IAAf,EAAqB;AACjBA,EAAAA,IAAI,CAACC,OAAL,CAAaD,IAAI,CAACE,OAAL,KAAiBF,IAAI,CAACG,eAAL,EAAjB,GAA0CH,IAAI,CAACI,UAAL,KAAoBN,cAA9D,GAA+EE,IAAI,CAACK,UAAL,KAAoBR,cAAhH;AACH;;AACD,SAASS,MAAT,CAAgBN,IAAhB,EAAsBO,KAAtB,EAA6B;AACzBP,EAAAA,IAAI,CAACC,OAAL,CAAaD,IAAI,CAACE,OAAL,KAAiBK,KAAK,GAAGX,YAAtC;AACH;;AACD,SAASY,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2B;AACvB,SAAO,CAACA,GAAG,CAACR,OAAJ,KAAgBO,KAAK,CAACP,OAAN,EAAjB,IAAoCN,YAA3C;AACH;;AACD,SAASe,KAAT,CAAeX,IAAf,EAAqB;AACjB,SAAOA,IAAI,CAACY,QAAL,EAAP;AACH;;AACD,OAAO,IAAIC,IAAI,GAAG,IAAIlB,qBAAJ,CAA0BI,KAA1B,EAAiCO,MAAjC,EAAyCE,KAAzC,EAAgDG,KAAhD,CAAX;AACP,eAAeE,IAAf","sourcesContent":["import { CountableTimeInterval } from \"./interval\";\nimport { durationHour, durationMinute, durationSecond } from \"./duration\";\nfunction floor(date) {\n    date.setTime(date.getTime() - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}\nfunction offset(date, hours) {\n    date.setTime(date.getTime() + hours * durationHour);\n}\nfunction count(start, end) {\n    return (end.getTime() - start.getTime()) / durationHour;\n}\nfunction field(date) {\n    return date.getHours();\n}\nexport var hour = new CountableTimeInterval(floor, offset, count, field);\nexport default hour;\n"]},"metadata":{},"sourceType":"module"}