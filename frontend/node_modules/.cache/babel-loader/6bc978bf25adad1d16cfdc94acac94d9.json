{"ast":null,"code":"import { cubicSegmentIntersections, segmentIntersection } from \"./intersection\";\n\nvar Path2D =\n/** @class */\nfunction () {\n  function Path2D() {\n    // The methods of this class will likely be called many times per animation frame,\n    // and any allocation can trigger a GC cycle during animation, so we attempt\n    // to minimize the number of allocations.\n    this.commands = [];\n    this.params = [];\n    this._closedPath = false;\n  }\n\n  Path2D.prototype.moveTo = function (x, y) {\n    if (this.xy) {\n      this.xy[0] = x;\n      this.xy[1] = y;\n    } else {\n      this.xy = [x, y];\n    }\n\n    this.commands.push('M');\n    this.params.push(x, y);\n  };\n\n  Path2D.prototype.lineTo = function (x, y) {\n    if (this.xy) {\n      this.commands.push('L');\n      this.params.push(x, y);\n      this.xy[0] = x;\n      this.xy[1] = y;\n    } else {\n      this.moveTo(x, y);\n    }\n  };\n\n  Path2D.prototype.rect = function (x, y, width, height) {\n    this.moveTo(x, y);\n    this.lineTo(x + width, y);\n    this.lineTo(x + width, y + height);\n    this.lineTo(x, y + height);\n    this.closePath();\n  };\n  /**\n   * Adds an arc segment to the path definition.\n   * https://www.w3.org/TR/SVG11/paths.html#PathDataEllipticalArcCommands\n   * @param rx The major-axis radius.\n   * @param ry The minor-axis radius.\n   * @param rotation The x-axis rotation, expressed in radians.\n   * @param fA The large arc flag. `1` to use angle > π.\n   * @param fS The sweep flag. `1` for the arc that goes to `x`/`y` clockwise.\n   * @param x2 The x coordinate to arc to.\n   * @param y2 The y coordinate to arc to.\n   */\n\n\n  Path2D.prototype.arcTo = function (rx, ry, rotation, fA, fS, x2, y2) {\n    // Convert from endpoint to center parametrization:\n    // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n    var xy = this.xy;\n\n    if (!xy) {\n      return;\n    }\n\n    if (rx < 0) {\n      rx = -rx;\n    }\n\n    if (ry < 0) {\n      ry = -ry;\n    }\n\n    var x1 = xy[0];\n    var y1 = xy[1];\n    var hdx = (x1 - x2) / 2;\n    var hdy = (y1 - y2) / 2;\n    var sinPhi = Math.sin(rotation);\n    var cosPhi = Math.cos(rotation);\n    var xp = cosPhi * hdx + sinPhi * hdy;\n    var yp = -sinPhi * hdx + cosPhi * hdy;\n    var ratX = xp / rx;\n    var ratY = yp / ry;\n    var lambda = ratX * ratX + ratY * ratY;\n    var cx = (x1 + x2) / 2;\n    var cy = (y1 + y2) / 2;\n    var cpx = 0;\n    var cpy = 0;\n\n    if (lambda >= 1) {\n      lambda = Math.sqrt(lambda);\n      rx *= lambda;\n      ry *= lambda; // me gives lambda == cpx == cpy == 0;\n    } else {\n      lambda = Math.sqrt(1 / lambda - 1);\n\n      if (fA === fS) {\n        lambda = -lambda;\n      }\n\n      cpx = lambda * rx * ratY;\n      cpy = -lambda * ry * ratX;\n      cx += cosPhi * cpx - sinPhi * cpy;\n      cy += sinPhi * cpx + cosPhi * cpy;\n    }\n\n    var theta1 = Math.atan2((yp - cpy) / ry, (xp - cpx) / rx);\n    var deltaTheta = Math.atan2((-yp - cpy) / ry, (-xp - cpx) / rx) - theta1; // if (fS) {\n    //     if (deltaTheta <= 0) {\n    //         deltaTheta += Math.PI * 2;\n    //     }\n    // }\n    // else {\n    //     if (deltaTheta >= 0) {\n    //         deltaTheta -= Math.PI * 2;\n    //     }\n    // }\n\n    this.cubicArc(cx, cy, rx, ry, rotation, theta1, theta1 + deltaTheta, 1 - fS);\n  };\n\n  Path2D.prototype.arcToAlt = function (rx, ry, rotation, fA, fS, x2, y2) {\n    // Convert from endpoint to center parametrization. See:\n    // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n    if (!this.xy) {\n      return;\n    }\n\n    if (rx < 0) {\n      rx = -rx;\n    }\n\n    if (ry < 0) {\n      ry = -ry;\n    }\n\n    var x1 = this.xy[0];\n    var y1 = this.xy[1];\n    var hdx = (x1 - x2) / 2;\n    var hdy = (y1 - y2) / 2;\n    var sinPhi = Math.sin(rotation);\n    var cosPhi = Math.cos(rotation);\n    var x1p = cosPhi * hdx + sinPhi * hdy;\n    var y1p = -sinPhi * hdx + cosPhi * hdy;\n    var rx_y1p = rx * rx * y1p * y1p;\n    var ry_x1p = ry * ry * x1p * x1p;\n    var root = Math.sqrt((rx * rx * ry * ry - rx_y1p - ry_x1p) / (rx_y1p + ry_x1p));\n    var rootSign = fA === fS ? 0 : 1;\n    var cxp = rootSign * root * rx * y1p / ry;\n    var cyp = -rootSign * root * ry * x1p / rx;\n    var cx = cosPhi * cxp - sinPhi * cyp + (x1 + x2) / 2;\n    var cy = sinPhi * cxp + cosPhi * cyp + (y1 + y2) / 2;\n    var theta1 = Math.acos((x1p - cxp) / rx / ((x1p - cxp) / rx));\n  };\n  /**\n   * Approximates an elliptical arc with up to four cubic Bézier curves.\n   * @param commands The string array to write SVG command letters to.\n   * @param params The number array to write SVG command parameters (cubic control points) to.\n   * @param cx The x-axis coordinate for the ellipse's center.\n   * @param cy The y-axis coordinate for the ellipse's center.\n   * @param rx The ellipse's major-axis radius.\n   * @param ry The ellipse's minor-axis radius.\n   * @param phi The rotation for this ellipse, expressed in radians.\n   * @param theta1 The starting angle, measured clockwise from the positive x-axis and expressed in radians.\n   * @param theta2 The ending angle, measured clockwise from the positive x-axis and expressed in radians.\n   * @param anticlockwise The arc control points are always placed clockwise from `theta1` to `theta2`,\n   * even when `theta1 > theta2`, unless this flag is set to `1`.\n   */\n\n\n  Path2D.cubicArc = function (commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {\n    if (anticlockwise) {\n      var temp = theta1;\n      theta1 = theta2;\n      theta2 = temp;\n    }\n\n    var start = params.length; // See https://pomax.github.io/bezierinfo/#circles_cubic\n    // Arc of unit circle (start angle = 0, end angle <= π/2) in cubic Bézier coordinates:\n    // S = [1, 0]\n    // C1 = [1, f]\n    // C2 = [cos(θ) + f * sin(θ), sin(θ) - f * cos(θ)]\n    // E = [cos(θ), sin(θ)]\n    // f = 4/3 * tan(θ/4)\n\n    var f90 = 0.5522847498307935; // f for θ = π/2 is 4/3 * (Math.sqrt(2) - 1)\n\n    var sinTheta1 = Math.sin(theta1);\n    var cosTheta1 = Math.cos(theta1);\n    var sinPhi = Math.sin(phi);\n    var cosPhi = Math.cos(phi);\n    var rightAngle = Math.PI / 2; // Since we know how to draw an arc of a unit circle with a cubic Bézier,\n    // to draw an elliptical arc with arbitrary rotation and radii we:\n    // 1) rotate the Bézier coordinates that represent a circular arc by θ\n    // 2) scale the circular arc separately along the x/y axes, making it elliptical\n    // 3) rotate elliptical arc by φ\n    // |cos(φ) -sin(φ)| |sx  0| |cos(θ) -sin(θ)| -> |xx xy|\n    // |sin(φ)  cos(φ)| | 0 sy| |sin(θ)  cos(θ)| -> |yx yy|\n\n    var xx = cosPhi * cosTheta1 * rx - sinPhi * sinTheta1 * ry;\n    var yx = sinPhi * cosTheta1 * rx + cosPhi * sinTheta1 * ry;\n    var xy = -cosPhi * sinTheta1 * rx - sinPhi * cosTheta1 * ry;\n    var yy = -sinPhi * sinTheta1 * rx + cosPhi * cosTheta1 * ry; // TODO: what if delta between θ1 and θ2 is greater than 2π?\n    // Always draw clockwise from θ1 to θ2.\n\n    theta2 -= theta1;\n\n    if (theta2 < 0) {\n      theta2 += Math.PI * 2;\n    } // Multiplying each point [x, y] by:\n    // |xx xy cx| |x|\n    // |yx yy cy| |y|\n    // | 0  0  1| |1|\n    // TODO: This move command may be redundant, if we are already at this point.\n    // The coordinates of the point calculated here may differ ever so slightly\n    // because of precision error.\n\n\n    commands.push('M');\n    params.push(xx + cx, yx + cy);\n\n    while (theta2 >= rightAngle) {\n      theta2 -= rightAngle;\n      commands.push('C'); // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330\n      // Revert this commit when fixed ^^.\n\n      var lastX = xy + cx;\n      params.push(xx + xy * f90 + cx, yx + yy * f90 + cy, xx * f90 + xy + cx, yx * f90 + yy + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yy + cy); // Prepend π/2 rotation matrix.\n      // |xx xy| | 0 1| -> | xy -xx|\n      // |yx yy| |-1 0| -> | yy -yx|\n      // [xx, yx, xy, yy] = [xy, yy, -xx, -yx];\n      // Compared to swapping with a temp variable, destructuring is:\n      // - 10% faster in Chrome 70\n      // - 99% slower in Firefox 63\n      // Temp variable solution is 45% faster in FF than Chrome.\n      // https://jsperf.com/multi-swap\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1165569\n\n      var temp = xx;\n      xx = xy;\n      xy = -temp;\n      temp = yx;\n      yx = yy;\n      yy = -temp;\n    }\n\n    if (theta2) {\n      var f = 4 / 3 * Math.tan(theta2 / 4);\n      var sinPhi2 = Math.sin(theta2);\n      var cosPhi2 = Math.cos(theta2);\n      var C2x = cosPhi2 + f * sinPhi2;\n      var C2y = sinPhi2 - f * cosPhi2;\n      commands.push('C'); // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330\n      // Revert this commit when fixed ^^.\n\n      var lastX = xx * cosPhi2 + xy * sinPhi2 + cx;\n      params.push(xx + xy * f + cx, yx + yy * f + cy, xx * C2x + xy * C2y + cx, yx * C2x + yy * C2y + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yx * cosPhi2 + yy * sinPhi2 + cy);\n    }\n\n    if (anticlockwise) {\n      for (var i = start, j = params.length - 2; i < j; i += 2, j -= 2) {\n        var temp = params[i];\n        params[i] = params[j];\n        params[j] = temp;\n        temp = params[i + 1];\n        params[i + 1] = params[j + 1];\n        params[j + 1] = temp;\n      }\n    }\n  };\n\n  Path2D.prototype.cubicArc = function (cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {\n    var commands = this.commands;\n    var params = this.params;\n    var start = commands.length;\n    Path2D.cubicArc(commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise);\n    var x = params[params.length - 2];\n    var y = params[params.length - 1];\n\n    if (this.xy) {\n      commands[start] = 'L';\n      this.xy[0] = x;\n      this.xy[1] = y;\n    } else {\n      this.xy = [x, y];\n    }\n  };\n  /**\n   * Returns the `[x, y]` coordinates of the curve at `t`.\n   * @param points `(n + 1) * 2` control point coordinates for a Bézier curve of n-th order.\n   * @param t\n   */\n\n\n  Path2D.prototype.deCasteljau = function (points, t) {\n    var n = points.length;\n\n    if (n < 2 || n % 2 === 1) {\n      throw new Error('Fewer than two points or not an even count.');\n    } else if (n === 2 || t === 0) {\n      return points.slice(0, 2);\n    } else if (t === 1) {\n      return points.slice(-2);\n    } else {\n      var newPoints = [];\n      var last = n - 2;\n\n      for (var i = 0; i < last; i += 2) {\n        newPoints.push((1 - t) * points[i] + t * points[i + 2], // x\n        (1 - t) * points[i + 1] + t * points[i + 3] // y\n        );\n      }\n\n      return this.deCasteljau(newPoints, t);\n    }\n  };\n  /**\n   * Approximates the given curve using `n` line segments.\n   * @param points `(n + 1) * 2` control point coordinates for a Bézier curve of n-th order.\n   * @param n\n   */\n\n\n  Path2D.prototype.approximateCurve = function (points, n) {\n    var xy = this.deCasteljau(points, 0);\n    this.moveTo(xy[0], xy[1]);\n    var step = 1 / n;\n\n    for (var t = step; t <= 1; t += step) {\n      var xy_1 = this.deCasteljau(points, t);\n      this.lineTo(xy_1[0], xy_1[1]);\n    }\n  };\n  /**\n   * Adds a quadratic curve segment to the path definition.\n   * Note: the given quadratic segment is converted and stored as a cubic one.\n   * @param cx x-component of the curve's control point\n   * @param cy y-component of the curve's control point\n   * @param x x-component of the end point\n   * @param y y-component of the end point\n   */\n\n\n  Path2D.prototype.quadraticCurveTo = function (cx, cy, x, y) {\n    if (!this.xy) {\n      this.moveTo(cx, cy);\n    } // See https://pomax.github.io/bezierinfo/#reordering\n\n\n    this.cubicCurveTo((this.xy[0] + 2 * cx) / 3, (this.xy[1] + 2 * cy) / 3, // 1/3 start + 2/3 control\n    (2 * cx + x) / 3, (2 * cy + y) / 3, // 2/3 control + 1/3 end\n    x, y);\n  };\n\n  Path2D.prototype.cubicCurveTo = function (cx1, cy1, cx2, cy2, x, y) {\n    if (!this.xy) {\n      this.moveTo(cx1, cy1);\n    }\n\n    this.commands.push('C');\n    this.params.push(cx1, cy1, cx2, cy2, x, y);\n    this.xy[0] = x;\n    this.xy[1] = y;\n  };\n\n  Object.defineProperty(Path2D.prototype, \"closedPath\", {\n    get: function () {\n      return this._closedPath;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Path2D.prototype.closePath = function () {\n    if (this.xy) {\n      this.xy = undefined;\n      this.commands.push('Z');\n      this._closedPath = true;\n    }\n  };\n\n  Path2D.prototype.clear = function () {\n    this.commands.length = 0;\n    this.params.length = 0;\n    this.xy = undefined;\n    this._closedPath = false;\n  };\n\n  Path2D.prototype.isPointInPath = function (x, y) {\n    var commands = this.commands;\n    var params = this.params;\n    var cn = commands.length; // Hit testing using ray casting method, where the ray's origin is some point\n    // outside the path. In this case, an offscreen point that is remote enough, so that\n    // even if the path itself is large and is partially offscreen, the ray's origin\n    // will likely be outside the path anyway. To test if the given point is inside the\n    // path or not, we cast a ray from the origin to the given point and check the number\n    // of intersections of this segment with the path. If the number of intersections is\n    // even, then the ray both entered and exited the path an equal number of times,\n    // therefore the point is outside the path, and inside the path, if the number of\n    // intersections is odd. Since the path is compound, we check if the ray segment\n    // intersects with each of the path's segments, which can be either a line segment\n    // (one or no intersection points) or a Bézier curve segment (up to 3 intersection\n    // points).\n\n    var ox = -10000;\n    var oy = -10000; // the starting point of the  current path\n\n    var sx = NaN;\n    var sy = NaN; // the previous point of the current path\n\n    var px = 0;\n    var py = 0;\n    var intersectionCount = 0;\n\n    for (var ci = 0, pi = 0; ci < cn; ci++) {\n      switch (commands[ci]) {\n        case 'M':\n          if (!isNaN(sx)) {\n            if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\n              intersectionCount++;\n            }\n          }\n\n          sx = px = params[pi++];\n          sy = py = params[pi++];\n          break;\n\n        case 'L':\n          if (segmentIntersection(px, py, px = params[pi++], py = params[pi++], ox, oy, x, y)) {\n            intersectionCount++;\n          }\n\n          break;\n\n        case 'C':\n          intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], px = params[pi++], py = params[pi++], ox, oy, x, y).length;\n          break;\n\n        case 'Z':\n          if (!isNaN(sx)) {\n            if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\n              intersectionCount++;\n            }\n          }\n\n          break;\n      }\n    }\n\n    return intersectionCount % 2 === 1;\n  };\n\n  Path2D.fromString = function (value) {\n    var path = new Path2D();\n    path.setFromString(value);\n    return path;\n  };\n  /**\n   * Split the SVG path at command letters,\n   * then extract the command letter and parameters from each substring.\n   * @param value\n   */\n\n\n  Path2D.parseSvgPath = function (value) {\n    return value.trim().split(Path2D.splitCommandsRe).map(function (part) {\n      var strParams = part.match(Path2D.matchParamsRe);\n      return {\n        command: part.substr(0, 1),\n        params: strParams ? strParams.map(parseFloat) : []\n      };\n    });\n  };\n\n  Path2D.prettifySvgPath = function (value) {\n    return Path2D.parseSvgPath(value).map(function (d) {\n      return d.command + d.params.join(',');\n    }).join('\\n');\n  };\n  /**\n   * See https://www.w3.org/TR/SVG11/paths.html\n   * @param value\n   */\n\n\n  Path2D.prototype.setFromString = function (value) {\n    var _this = this;\n\n    this.clear();\n    var parts = Path2D.parseSvgPath(value); // Current point.\n\n    var x;\n    var y; // Last control point. Used to calculate the reflection point\n    // for `S`, `s`, `T`, `t` commands.\n\n    var cpx;\n    var cpy;\n    var lastCommand;\n\n    function checkQuadraticCP() {\n      if (!lastCommand.match(Path2D.quadraticCommandRe)) {\n        cpx = x;\n        cpy = y;\n      }\n    }\n\n    function checkCubicCP() {\n      if (!lastCommand.match(Path2D.cubicCommandRe)) {\n        cpx = x;\n        cpy = y;\n      }\n    } // But that will make compiler complain about x/y, cpx/cpy\n    // being used without being set first.\n\n\n    parts.forEach(function (part) {\n      var p = part.params;\n      var n = p.length;\n      var i = 0;\n\n      switch (part.command) {\n        case 'M':\n          _this.moveTo(x = p[i++], y = p[i++]);\n\n          while (i < n) {\n            _this.lineTo(x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 'm':\n          _this.moveTo(x += p[i++], y += p[i++]);\n\n          while (i < n) {\n            _this.lineTo(x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'L':\n          while (i < n) {\n            _this.lineTo(x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 'l':\n          while (i < n) {\n            _this.lineTo(x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'C':\n          while (i < n) {\n            _this.cubicCurveTo(p[i++], p[i++], cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 'c':\n          while (i < n) {\n            _this.cubicCurveTo(x + p[i++], y + p[i++], cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'S':\n          checkCubicCP();\n\n          while (i < n) {\n            _this.cubicCurveTo(x + x - cpx, y + y - cpy, cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 's':\n          checkCubicCP();\n\n          while (i < n) {\n            _this.cubicCurveTo(x + x - cpx, y + y - cpy, cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'Q':\n          while (i < n) {\n            _this.quadraticCurveTo(cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 'q':\n          while (i < n) {\n            _this.quadraticCurveTo(cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'T':\n          checkQuadraticCP();\n\n          while (i < n) {\n            _this.quadraticCurveTo(cpx = x + x - cpx, cpy = y + y - cpy, x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 't':\n          checkQuadraticCP();\n\n          while (i < n) {\n            _this.quadraticCurveTo(cpx = x + x - cpx, cpy = y + y - cpy, x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'A':\n          while (i < n) {\n            _this.arcTo(p[i++], p[i++], p[i++] * Math.PI / 180, p[i++], p[i++], x = p[i++], y = p[i++]);\n          }\n\n          break;\n\n        case 'a':\n          while (i < n) {\n            _this.arcTo(p[i++], p[i++], p[i++] * Math.PI / 180, p[i++], p[i++], x += p[i++], y += p[i++]);\n          }\n\n          break;\n\n        case 'Z':\n        case 'z':\n          _this.closePath();\n\n          break;\n\n        case 'H':\n          while (i < n) {\n            _this.lineTo(x = p[i++], y);\n          }\n\n          break;\n\n        case 'h':\n          while (i < n) {\n            _this.lineTo(x += p[i++], y);\n          }\n\n          break;\n\n        case 'V':\n          while (i < n) {\n            _this.lineTo(x, y = p[i++]);\n          }\n\n          break;\n\n        case 'v':\n          while (i < n) {\n            _this.lineTo(x, y += p[i++]);\n          }\n\n          break;\n      }\n\n      lastCommand = part.command;\n    });\n  };\n\n  Path2D.prototype.toString = function () {\n    var c = this.commands;\n    var p = this.params;\n    var cn = c.length;\n    var out = [];\n\n    for (var ci = 0, pi = 0; ci < cn; ci++) {\n      switch (c[ci]) {\n        case 'M':\n          out.push('M' + p[pi++] + ',' + p[pi++]);\n          break;\n\n        case 'L':\n          out.push('L' + p[pi++] + ',' + p[pi++]);\n          break;\n\n        case 'C':\n          out.push('C' + p[pi++] + ',' + p[pi++] + ' ' + p[pi++] + ',' + p[pi++] + ' ' + p[pi++] + ',' + p[pi++]);\n          break;\n\n        case 'Z':\n          out.push('Z');\n          break;\n      }\n    }\n\n    return out.join('');\n  };\n\n  Path2D.prototype.toPrettyString = function () {\n    return Path2D.prettifySvgPath(this.toString());\n  };\n\n  Path2D.prototype.toSvg = function () {\n    return Path2D.xmlDeclaration + \"\\n<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 50\\\" version=\\\"1.1\\\" xmlns=\\\"\" + Path2D.xmlns + \"\\\">\\n    <path d=\\\"\" + this.toString() + \"\\\" style=\\\"fill:none;stroke:#000;stroke-width:0.5;\\\"/>\\n</svg>\";\n  };\n\n  Path2D.prototype.toDebugSvg = function () {\n    var d = Path2D.prettifySvgPath(this.toString());\n    return Path2D.xmlDeclaration + \"\\n<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 100 100\\\" version=\\\"1.1\\\" xmlns=\\\"\" + Path2D.xmlns + \"\\\">\\n    <path d=\\\"\" + d + \"\\\" style=\\\"fill:none;stroke:#000;stroke-width:0.5;\\\"/>\\n</svg>\";\n  };\n  /**\n   * Returns an array of sub-paths of this Path,\n   * where each sub-path is represented exclusively by cubic segments.\n   */\n\n\n  Path2D.prototype.toCubicPaths = function () {\n    // Each sub-path is an array of `(n * 3 + 1) * 2` numbers,\n    // where `n` is the number of segments.\n    var paths = [];\n    var params = this.params; // current path\n\n    var path; // the starting point of the  current path\n\n    var sx;\n    var sy; // the previous point of the current path\n\n    var px;\n    var py;\n    var i = 0; // current parameter\n\n    this.commands.forEach(function (command) {\n      switch (command) {\n        case 'M':\n          path = [sx = px = params[i++], sy = py = params[i++]];\n          paths.push(path);\n          break;\n\n        case 'L':\n          var x = params[i++];\n          var y = params[i++]; // Place control points along the line `a + (b - a) * t`\n          // at t = 1/3 and 2/3:\n\n          path.push((px + px + x) / 3, (py + py + y) / 3, (px + x + x) / 3, (py + y + y) / 3, px = x, py = y);\n          break;\n\n        case 'C':\n          path.push(params[i++], params[i++], params[i++], params[i++], px = params[i++], py = params[i++]);\n          break;\n\n        case 'Z':\n          path.push((px + px + sx) / 3, (py + py + sy) / 3, (px + sx + sx) / 3, (py + sy + sy) / 3, px = sx, py = sy);\n          break;\n      }\n    });\n    return paths;\n  };\n\n  Path2D.cubicPathToString = function (path) {\n    var n = path.length;\n\n    if (!(n % 2 === 0 && (n / 2 - 1) / 2 >= 1)) {\n      throw new Error('Invalid path.');\n    }\n\n    return 'M' + path.slice(0, 2).join(',') + 'C' + path.slice(2).join(',');\n  };\n\n  Path2D.splitCommandsRe = /(?=[AaCcHhLlMmQqSsTtVvZz])/g;\n  Path2D.matchParamsRe = /-?[0-9]*\\.?\\d+/g;\n  Path2D.quadraticCommandRe = /[QqTt]/;\n  Path2D.cubicCommandRe = /[CcSs]/;\n  Path2D.xmlDeclaration = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  Path2D.xmlns = 'http://www.w3.org/2000/svg';\n  return Path2D;\n}();\n\nexport { Path2D };","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/path2D.js"],"names":["cubicSegmentIntersections","segmentIntersection","Path2D","commands","params","_closedPath","prototype","moveTo","x","y","xy","push","lineTo","rect","width","height","closePath","arcTo","rx","ry","rotation","fA","fS","x2","y2","x1","y1","hdx","hdy","sinPhi","Math","sin","cosPhi","cos","xp","yp","ratX","ratY","lambda","cx","cy","cpx","cpy","sqrt","theta1","atan2","deltaTheta","cubicArc","arcToAlt","x1p","y1p","rx_y1p","ry_x1p","root","rootSign","cxp","cyp","acos","phi","theta2","anticlockwise","temp","start","length","f90","sinTheta1","cosTheta1","rightAngle","PI","xx","yx","yy","lastX","abs","f","tan","sinPhi2","cosPhi2","C2x","C2y","i","j","deCasteljau","points","t","n","Error","slice","newPoints","last","approximateCurve","step","xy_1","quadraticCurveTo","cubicCurveTo","cx1","cy1","cx2","cy2","Object","defineProperty","get","enumerable","configurable","undefined","clear","isPointInPath","cn","ox","oy","sx","NaN","sy","px","py","intersectionCount","ci","pi","isNaN","fromString","value","path","setFromString","parseSvgPath","trim","split","splitCommandsRe","map","part","strParams","match","matchParamsRe","command","substr","parseFloat","prettifySvgPath","d","join","_this","parts","lastCommand","checkQuadraticCP","quadraticCommandRe","checkCubicCP","cubicCommandRe","forEach","p","toString","c","out","toPrettyString","toSvg","xmlDeclaration","xmlns","toDebugSvg","toCubicPaths","paths","cubicPathToString"],"mappings":"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","sourcesContent":["import { cubicSegmentIntersections, segmentIntersection } from \"./intersection\";\nvar Path2D = /** @class */ (function () {\n    function Path2D() {\n        // The methods of this class will likely be called many times per animation frame,\n        // and any allocation can trigger a GC cycle during animation, so we attempt\n        // to minimize the number of allocations.\n        this.commands = [];\n        this.params = [];\n        this._closedPath = false;\n    }\n    Path2D.prototype.moveTo = function (x, y) {\n        if (this.xy) {\n            this.xy[0] = x;\n            this.xy[1] = y;\n        }\n        else {\n            this.xy = [x, y];\n        }\n        this.commands.push('M');\n        this.params.push(x, y);\n    };\n    Path2D.prototype.lineTo = function (x, y) {\n        if (this.xy) {\n            this.commands.push('L');\n            this.params.push(x, y);\n            this.xy[0] = x;\n            this.xy[1] = y;\n        }\n        else {\n            this.moveTo(x, y);\n        }\n    };\n    Path2D.prototype.rect = function (x, y, width, height) {\n        this.moveTo(x, y);\n        this.lineTo(x + width, y);\n        this.lineTo(x + width, y + height);\n        this.lineTo(x, y + height);\n        this.closePath();\n    };\n    /**\n     * Adds an arc segment to the path definition.\n     * https://www.w3.org/TR/SVG11/paths.html#PathDataEllipticalArcCommands\n     * @param rx The major-axis radius.\n     * @param ry The minor-axis radius.\n     * @param rotation The x-axis rotation, expressed in radians.\n     * @param fA The large arc flag. `1` to use angle > π.\n     * @param fS The sweep flag. `1` for the arc that goes to `x`/`y` clockwise.\n     * @param x2 The x coordinate to arc to.\n     * @param y2 The y coordinate to arc to.\n     */\n    Path2D.prototype.arcTo = function (rx, ry, rotation, fA, fS, x2, y2) {\n        // Convert from endpoint to center parametrization:\n        // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n        var xy = this.xy;\n        if (!xy) {\n            return;\n        }\n        if (rx < 0) {\n            rx = -rx;\n        }\n        if (ry < 0) {\n            ry = -ry;\n        }\n        var x1 = xy[0];\n        var y1 = xy[1];\n        var hdx = (x1 - x2) / 2;\n        var hdy = (y1 - y2) / 2;\n        var sinPhi = Math.sin(rotation);\n        var cosPhi = Math.cos(rotation);\n        var xp = cosPhi * hdx + sinPhi * hdy;\n        var yp = -sinPhi * hdx + cosPhi * hdy;\n        var ratX = xp / rx;\n        var ratY = yp / ry;\n        var lambda = ratX * ratX + ratY * ratY;\n        var cx = (x1 + x2) / 2;\n        var cy = (y1 + y2) / 2;\n        var cpx = 0;\n        var cpy = 0;\n        if (lambda >= 1) {\n            lambda = Math.sqrt(lambda);\n            rx *= lambda;\n            ry *= lambda;\n            // me gives lambda == cpx == cpy == 0;\n        }\n        else {\n            lambda = Math.sqrt(1 / lambda - 1);\n            if (fA === fS) {\n                lambda = -lambda;\n            }\n            cpx = lambda * rx * ratY;\n            cpy = -lambda * ry * ratX;\n            cx += cosPhi * cpx - sinPhi * cpy;\n            cy += sinPhi * cpx + cosPhi * cpy;\n        }\n        var theta1 = Math.atan2((yp - cpy) / ry, (xp - cpx) / rx);\n        var deltaTheta = Math.atan2((-yp - cpy) / ry, (-xp - cpx) / rx) - theta1;\n        // if (fS) {\n        //     if (deltaTheta <= 0) {\n        //         deltaTheta += Math.PI * 2;\n        //     }\n        // }\n        // else {\n        //     if (deltaTheta >= 0) {\n        //         deltaTheta -= Math.PI * 2;\n        //     }\n        // }\n        this.cubicArc(cx, cy, rx, ry, rotation, theta1, theta1 + deltaTheta, 1 - fS);\n    };\n    Path2D.prototype.arcToAlt = function (rx, ry, rotation, fA, fS, x2, y2) {\n        // Convert from endpoint to center parametrization. See:\n        // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n        if (!this.xy) {\n            return;\n        }\n        if (rx < 0) {\n            rx = -rx;\n        }\n        if (ry < 0) {\n            ry = -ry;\n        }\n        var x1 = this.xy[0];\n        var y1 = this.xy[1];\n        var hdx = (x1 - x2) / 2;\n        var hdy = (y1 - y2) / 2;\n        var sinPhi = Math.sin(rotation);\n        var cosPhi = Math.cos(rotation);\n        var x1p = cosPhi * hdx + sinPhi * hdy;\n        var y1p = -sinPhi * hdx + cosPhi * hdy;\n        var rx_y1p = rx * rx * y1p * y1p;\n        var ry_x1p = ry * ry * x1p * x1p;\n        var root = Math.sqrt((rx * rx * ry * ry - rx_y1p - ry_x1p) / (rx_y1p + ry_x1p));\n        var rootSign = fA === fS ? 0 : 1;\n        var cxp = rootSign * root * rx * y1p / ry;\n        var cyp = -rootSign * root * ry * x1p / rx;\n        var cx = cosPhi * cxp - sinPhi * cyp + (x1 + x2) / 2;\n        var cy = sinPhi * cxp + cosPhi * cyp + (y1 + y2) / 2;\n        var theta1 = Math.acos((x1p - cxp) / rx / ((x1p - cxp) / rx));\n    };\n    /**\n     * Approximates an elliptical arc with up to four cubic Bézier curves.\n     * @param commands The string array to write SVG command letters to.\n     * @param params The number array to write SVG command parameters (cubic control points) to.\n     * @param cx The x-axis coordinate for the ellipse's center.\n     * @param cy The y-axis coordinate for the ellipse's center.\n     * @param rx The ellipse's major-axis radius.\n     * @param ry The ellipse's minor-axis radius.\n     * @param phi The rotation for this ellipse, expressed in radians.\n     * @param theta1 The starting angle, measured clockwise from the positive x-axis and expressed in radians.\n     * @param theta2 The ending angle, measured clockwise from the positive x-axis and expressed in radians.\n     * @param anticlockwise The arc control points are always placed clockwise from `theta1` to `theta2`,\n     * even when `theta1 > theta2`, unless this flag is set to `1`.\n     */\n    Path2D.cubicArc = function (commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {\n        if (anticlockwise) {\n            var temp = theta1;\n            theta1 = theta2;\n            theta2 = temp;\n        }\n        var start = params.length;\n        // See https://pomax.github.io/bezierinfo/#circles_cubic\n        // Arc of unit circle (start angle = 0, end angle <= π/2) in cubic Bézier coordinates:\n        // S = [1, 0]\n        // C1 = [1, f]\n        // C2 = [cos(θ) + f * sin(θ), sin(θ) - f * cos(θ)]\n        // E = [cos(θ), sin(θ)]\n        // f = 4/3 * tan(θ/4)\n        var f90 = 0.5522847498307935; // f for θ = π/2 is 4/3 * (Math.sqrt(2) - 1)\n        var sinTheta1 = Math.sin(theta1);\n        var cosTheta1 = Math.cos(theta1);\n        var sinPhi = Math.sin(phi);\n        var cosPhi = Math.cos(phi);\n        var rightAngle = Math.PI / 2;\n        // Since we know how to draw an arc of a unit circle with a cubic Bézier,\n        // to draw an elliptical arc with arbitrary rotation and radii we:\n        // 1) rotate the Bézier coordinates that represent a circular arc by θ\n        // 2) scale the circular arc separately along the x/y axes, making it elliptical\n        // 3) rotate elliptical arc by φ\n        // |cos(φ) -sin(φ)| |sx  0| |cos(θ) -sin(θ)| -> |xx xy|\n        // |sin(φ)  cos(φ)| | 0 sy| |sin(θ)  cos(θ)| -> |yx yy|\n        var xx = cosPhi * cosTheta1 * rx - sinPhi * sinTheta1 * ry;\n        var yx = sinPhi * cosTheta1 * rx + cosPhi * sinTheta1 * ry;\n        var xy = -cosPhi * sinTheta1 * rx - sinPhi * cosTheta1 * ry;\n        var yy = -sinPhi * sinTheta1 * rx + cosPhi * cosTheta1 * ry;\n        // TODO: what if delta between θ1 and θ2 is greater than 2π?\n        // Always draw clockwise from θ1 to θ2.\n        theta2 -= theta1;\n        if (theta2 < 0) {\n            theta2 += Math.PI * 2;\n        }\n        // Multiplying each point [x, y] by:\n        // |xx xy cx| |x|\n        // |yx yy cy| |y|\n        // | 0  0  1| |1|\n        // TODO: This move command may be redundant, if we are already at this point.\n        // The coordinates of the point calculated here may differ ever so slightly\n        // because of precision error.\n        commands.push('M');\n        params.push(xx + cx, yx + cy);\n        while (theta2 >= rightAngle) {\n            theta2 -= rightAngle;\n            commands.push('C');\n            // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330\n            // Revert this commit when fixed ^^.\n            var lastX = xy + cx;\n            params.push(xx + xy * f90 + cx, yx + yy * f90 + cy, xx * f90 + xy + cx, yx * f90 + yy + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yy + cy);\n            // Prepend π/2 rotation matrix.\n            // |xx xy| | 0 1| -> | xy -xx|\n            // |yx yy| |-1 0| -> | yy -yx|\n            // [xx, yx, xy, yy] = [xy, yy, -xx, -yx];\n            // Compared to swapping with a temp variable, destructuring is:\n            // - 10% faster in Chrome 70\n            // - 99% slower in Firefox 63\n            // Temp variable solution is 45% faster in FF than Chrome.\n            // https://jsperf.com/multi-swap\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1165569\n            var temp = xx;\n            xx = xy;\n            xy = -temp;\n            temp = yx;\n            yx = yy;\n            yy = -temp;\n        }\n        if (theta2) {\n            var f = 4 / 3 * Math.tan(theta2 / 4);\n            var sinPhi2 = Math.sin(theta2);\n            var cosPhi2 = Math.cos(theta2);\n            var C2x = cosPhi2 + f * sinPhi2;\n            var C2y = sinPhi2 - f * cosPhi2;\n            commands.push('C');\n            // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330\n            // Revert this commit when fixed ^^.\n            var lastX = xx * cosPhi2 + xy * sinPhi2 + cx;\n            params.push(xx + xy * f + cx, yx + yy * f + cy, xx * C2x + xy * C2y + cx, yx * C2x + yy * C2y + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yx * cosPhi2 + yy * sinPhi2 + cy);\n        }\n        if (anticlockwise) {\n            for (var i = start, j = params.length - 2; i < j; i += 2, j -= 2) {\n                var temp = params[i];\n                params[i] = params[j];\n                params[j] = temp;\n                temp = params[i + 1];\n                params[i + 1] = params[j + 1];\n                params[j + 1] = temp;\n            }\n        }\n    };\n    Path2D.prototype.cubicArc = function (cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {\n        var commands = this.commands;\n        var params = this.params;\n        var start = commands.length;\n        Path2D.cubicArc(commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise);\n        var x = params[params.length - 2];\n        var y = params[params.length - 1];\n        if (this.xy) {\n            commands[start] = 'L';\n            this.xy[0] = x;\n            this.xy[1] = y;\n        }\n        else {\n            this.xy = [x, y];\n        }\n    };\n    /**\n     * Returns the `[x, y]` coordinates of the curve at `t`.\n     * @param points `(n + 1) * 2` control point coordinates for a Bézier curve of n-th order.\n     * @param t\n     */\n    Path2D.prototype.deCasteljau = function (points, t) {\n        var n = points.length;\n        if (n < 2 || n % 2 === 1) {\n            throw new Error('Fewer than two points or not an even count.');\n        }\n        else if (n === 2 || t === 0) {\n            return points.slice(0, 2);\n        }\n        else if (t === 1) {\n            return points.slice(-2);\n        }\n        else {\n            var newPoints = [];\n            var last = n - 2;\n            for (var i = 0; i < last; i += 2) {\n                newPoints.push((1 - t) * points[i] + t * points[i + 2], // x\n                (1 - t) * points[i + 1] + t * points[i + 3] // y\n                );\n            }\n            return this.deCasteljau(newPoints, t);\n        }\n    };\n    /**\n     * Approximates the given curve using `n` line segments.\n     * @param points `(n + 1) * 2` control point coordinates for a Bézier curve of n-th order.\n     * @param n\n     */\n    Path2D.prototype.approximateCurve = function (points, n) {\n        var xy = this.deCasteljau(points, 0);\n        this.moveTo(xy[0], xy[1]);\n        var step = 1 / n;\n        for (var t = step; t <= 1; t += step) {\n            var xy_1 = this.deCasteljau(points, t);\n            this.lineTo(xy_1[0], xy_1[1]);\n        }\n    };\n    /**\n     * Adds a quadratic curve segment to the path definition.\n     * Note: the given quadratic segment is converted and stored as a cubic one.\n     * @param cx x-component of the curve's control point\n     * @param cy y-component of the curve's control point\n     * @param x x-component of the end point\n     * @param y y-component of the end point\n     */\n    Path2D.prototype.quadraticCurveTo = function (cx, cy, x, y) {\n        if (!this.xy) {\n            this.moveTo(cx, cy);\n        }\n        // See https://pomax.github.io/bezierinfo/#reordering\n        this.cubicCurveTo((this.xy[0] + 2 * cx) / 3, (this.xy[1] + 2 * cy) / 3, // 1/3 start + 2/3 control\n        (2 * cx + x) / 3, (2 * cy + y) / 3, // 2/3 control + 1/3 end\n        x, y);\n    };\n    Path2D.prototype.cubicCurveTo = function (cx1, cy1, cx2, cy2, x, y) {\n        if (!this.xy) {\n            this.moveTo(cx1, cy1);\n        }\n        this.commands.push('C');\n        this.params.push(cx1, cy1, cx2, cy2, x, y);\n        this.xy[0] = x;\n        this.xy[1] = y;\n    };\n    Object.defineProperty(Path2D.prototype, \"closedPath\", {\n        get: function () {\n            return this._closedPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path2D.prototype.closePath = function () {\n        if (this.xy) {\n            this.xy = undefined;\n            this.commands.push('Z');\n            this._closedPath = true;\n        }\n    };\n    Path2D.prototype.clear = function () {\n        this.commands.length = 0;\n        this.params.length = 0;\n        this.xy = undefined;\n        this._closedPath = false;\n    };\n    Path2D.prototype.isPointInPath = function (x, y) {\n        var commands = this.commands;\n        var params = this.params;\n        var cn = commands.length;\n        // Hit testing using ray casting method, where the ray's origin is some point\n        // outside the path. In this case, an offscreen point that is remote enough, so that\n        // even if the path itself is large and is partially offscreen, the ray's origin\n        // will likely be outside the path anyway. To test if the given point is inside the\n        // path or not, we cast a ray from the origin to the given point and check the number\n        // of intersections of this segment with the path. If the number of intersections is\n        // even, then the ray both entered and exited the path an equal number of times,\n        // therefore the point is outside the path, and inside the path, if the number of\n        // intersections is odd. Since the path is compound, we check if the ray segment\n        // intersects with each of the path's segments, which can be either a line segment\n        // (one or no intersection points) or a Bézier curve segment (up to 3 intersection\n        // points).\n        var ox = -10000;\n        var oy = -10000;\n        // the starting point of the  current path\n        var sx = NaN;\n        var sy = NaN;\n        // the previous point of the current path\n        var px = 0;\n        var py = 0;\n        var intersectionCount = 0;\n        for (var ci = 0, pi = 0; ci < cn; ci++) {\n            switch (commands[ci]) {\n                case 'M':\n                    if (!isNaN(sx)) {\n                        if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\n                            intersectionCount++;\n                        }\n                    }\n                    sx = px = params[pi++];\n                    sy = py = params[pi++];\n                    break;\n                case 'L':\n                    if (segmentIntersection(px, py, px = params[pi++], py = params[pi++], ox, oy, x, y)) {\n                        intersectionCount++;\n                    }\n                    break;\n                case 'C':\n                    intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], px = params[pi++], py = params[pi++], ox, oy, x, y).length;\n                    break;\n                case 'Z':\n                    if (!isNaN(sx)) {\n                        if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\n                            intersectionCount++;\n                        }\n                    }\n                    break;\n            }\n        }\n        return intersectionCount % 2 === 1;\n    };\n    Path2D.fromString = function (value) {\n        var path = new Path2D();\n        path.setFromString(value);\n        return path;\n    };\n    /**\n     * Split the SVG path at command letters,\n     * then extract the command letter and parameters from each substring.\n     * @param value\n     */\n    Path2D.parseSvgPath = function (value) {\n        return value.trim().split(Path2D.splitCommandsRe).map(function (part) {\n            var strParams = part.match(Path2D.matchParamsRe);\n            return {\n                command: part.substr(0, 1),\n                params: strParams ? strParams.map(parseFloat) : []\n            };\n        });\n    };\n    Path2D.prettifySvgPath = function (value) {\n        return Path2D.parseSvgPath(value).map(function (d) { return d.command + d.params.join(','); }).join('\\n');\n    };\n    /**\n     * See https://www.w3.org/TR/SVG11/paths.html\n     * @param value\n     */\n    Path2D.prototype.setFromString = function (value) {\n        var _this = this;\n        this.clear();\n        var parts = Path2D.parseSvgPath(value);\n        // Current point.\n        var x;\n        var y;\n        // Last control point. Used to calculate the reflection point\n        // for `S`, `s`, `T`, `t` commands.\n        var cpx;\n        var cpy;\n        var lastCommand;\n        function checkQuadraticCP() {\n            if (!lastCommand.match(Path2D.quadraticCommandRe)) {\n                cpx = x;\n                cpy = y;\n            }\n        }\n        function checkCubicCP() {\n            if (!lastCommand.match(Path2D.cubicCommandRe)) {\n                cpx = x;\n                cpy = y;\n            }\n        }\n        // But that will make compiler complain about x/y, cpx/cpy\n        // being used without being set first.\n        parts.forEach(function (part) {\n            var p = part.params;\n            var n = p.length;\n            var i = 0;\n            switch (part.command) {\n                case 'M':\n                    _this.moveTo(x = p[i++], y = p[i++]);\n                    while (i < n) {\n                        _this.lineTo(x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 'm':\n                    _this.moveTo(x += p[i++], y += p[i++]);\n                    while (i < n) {\n                        _this.lineTo(x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'L':\n                    while (i < n) {\n                        _this.lineTo(x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 'l':\n                    while (i < n) {\n                        _this.lineTo(x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'C':\n                    while (i < n) {\n                        _this.cubicCurveTo(p[i++], p[i++], cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 'c':\n                    while (i < n) {\n                        _this.cubicCurveTo(x + p[i++], y + p[i++], cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'S':\n                    checkCubicCP();\n                    while (i < n) {\n                        _this.cubicCurveTo(x + x - cpx, y + y - cpy, cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 's':\n                    checkCubicCP();\n                    while (i < n) {\n                        _this.cubicCurveTo(x + x - cpx, y + y - cpy, cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'Q':\n                    while (i < n) {\n                        _this.quadraticCurveTo(cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 'q':\n                    while (i < n) {\n                        _this.quadraticCurveTo(cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'T':\n                    checkQuadraticCP();\n                    while (i < n) {\n                        _this.quadraticCurveTo(cpx = x + x - cpx, cpy = y + y - cpy, x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 't':\n                    checkQuadraticCP();\n                    while (i < n) {\n                        _this.quadraticCurveTo(cpx = x + x - cpx, cpy = y + y - cpy, x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'A':\n                    while (i < n) {\n                        _this.arcTo(p[i++], p[i++], p[i++] * Math.PI / 180, p[i++], p[i++], x = p[i++], y = p[i++]);\n                    }\n                    break;\n                case 'a':\n                    while (i < n) {\n                        _this.arcTo(p[i++], p[i++], p[i++] * Math.PI / 180, p[i++], p[i++], x += p[i++], y += p[i++]);\n                    }\n                    break;\n                case 'Z':\n                case 'z':\n                    _this.closePath();\n                    break;\n                case 'H':\n                    while (i < n) {\n                        _this.lineTo(x = p[i++], y);\n                    }\n                    break;\n                case 'h':\n                    while (i < n) {\n                        _this.lineTo(x += p[i++], y);\n                    }\n                    break;\n                case 'V':\n                    while (i < n) {\n                        _this.lineTo(x, y = p[i++]);\n                    }\n                    break;\n                case 'v':\n                    while (i < n) {\n                        _this.lineTo(x, y += p[i++]);\n                    }\n                    break;\n            }\n            lastCommand = part.command;\n        });\n    };\n    Path2D.prototype.toString = function () {\n        var c = this.commands;\n        var p = this.params;\n        var cn = c.length;\n        var out = [];\n        for (var ci = 0, pi = 0; ci < cn; ci++) {\n            switch (c[ci]) {\n                case 'M':\n                    out.push('M' + p[pi++] + ',' + p[pi++]);\n                    break;\n                case 'L':\n                    out.push('L' + p[pi++] + ',' + p[pi++]);\n                    break;\n                case 'C':\n                    out.push('C' + p[pi++] + ',' + p[pi++] + ' ' +\n                        p[pi++] + ',' + p[pi++] + ' ' +\n                        p[pi++] + ',' + p[pi++]);\n                    break;\n                case 'Z':\n                    out.push('Z');\n                    break;\n            }\n        }\n        return out.join('');\n    };\n    Path2D.prototype.toPrettyString = function () {\n        return Path2D.prettifySvgPath(this.toString());\n    };\n    Path2D.prototype.toSvg = function () {\n        return Path2D.xmlDeclaration + \"\\n<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 50\\\" version=\\\"1.1\\\" xmlns=\\\"\" + Path2D.xmlns + \"\\\">\\n    <path d=\\\"\" + this.toString() + \"\\\" style=\\\"fill:none;stroke:#000;stroke-width:0.5;\\\"/>\\n</svg>\";\n    };\n    Path2D.prototype.toDebugSvg = function () {\n        var d = Path2D.prettifySvgPath(this.toString());\n        return Path2D.xmlDeclaration + \"\\n<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 100 100\\\" version=\\\"1.1\\\" xmlns=\\\"\" + Path2D.xmlns + \"\\\">\\n    <path d=\\\"\" + d + \"\\\" style=\\\"fill:none;stroke:#000;stroke-width:0.5;\\\"/>\\n</svg>\";\n    };\n    /**\n     * Returns an array of sub-paths of this Path,\n     * where each sub-path is represented exclusively by cubic segments.\n     */\n    Path2D.prototype.toCubicPaths = function () {\n        // Each sub-path is an array of `(n * 3 + 1) * 2` numbers,\n        // where `n` is the number of segments.\n        var paths = [];\n        var params = this.params;\n        // current path\n        var path;\n        // the starting point of the  current path\n        var sx;\n        var sy;\n        // the previous point of the current path\n        var px;\n        var py;\n        var i = 0; // current parameter\n        this.commands.forEach(function (command) {\n            switch (command) {\n                case 'M':\n                    path = [\n                        sx = px = params[i++],\n                        sy = py = params[i++]\n                    ];\n                    paths.push(path);\n                    break;\n                case 'L':\n                    var x = params[i++];\n                    var y = params[i++];\n                    // Place control points along the line `a + (b - a) * t`\n                    // at t = 1/3 and 2/3:\n                    path.push((px + px + x) / 3, (py + py + y) / 3, (px + x + x) / 3, (py + y + y) / 3, px = x, py = y);\n                    break;\n                case 'C':\n                    path.push(params[i++], params[i++], params[i++], params[i++], px = params[i++], py = params[i++]);\n                    break;\n                case 'Z':\n                    path.push((px + px + sx) / 3, (py + py + sy) / 3, (px + sx + sx) / 3, (py + sy + sy) / 3, px = sx, py = sy);\n                    break;\n            }\n        });\n        return paths;\n    };\n    Path2D.cubicPathToString = function (path) {\n        var n = path.length;\n        if (!(n % 2 === 0 && (n / 2 - 1) / 2 >= 1)) {\n            throw new Error('Invalid path.');\n        }\n        return 'M' + path.slice(0, 2).join(',') + 'C' + path.slice(2).join(',');\n    };\n    Path2D.splitCommandsRe = /(?=[AaCcHhLlMmQqSsTtVvZz])/g;\n    Path2D.matchParamsRe = /-?[0-9]*\\.?\\d+/g;\n    Path2D.quadraticCommandRe = /[QqTt]/;\n    Path2D.cubicCommandRe = /[CcSs]/;\n    Path2D.xmlDeclaration = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    Path2D.xmlns = 'http://www.w3.org/2000/svg';\n    return Path2D;\n}());\nexport { Path2D };\n"]},"metadata":{},"sourceType":"module"}