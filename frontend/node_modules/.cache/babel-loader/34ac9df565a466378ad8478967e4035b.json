{"ast":null,"code":"import { cubicRoots } from \"./polyRoots\";\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\n\nexport function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n  var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n\n  if (d === 0) {\n    // The lines are parallel.\n    return null;\n  }\n\n  var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n  var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n\n  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n    return {\n      x: ax1 + ua * (ax2 - ax1),\n      y: ay1 + ua * (ay2 - ay1)\n    };\n  }\n\n  return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\n\nexport function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n  var intersections = []; // Find line equation coefficients.\n\n  var A = y1 - y2;\n  var B = x2 - x1;\n  var C = x1 * (y2 - y1) - y1 * (x2 - x1); // Find cubic Bezier curve equation coefficients from control points.\n\n  var bx = bezierCoefficients(px1, px2, px3, px4);\n  var by = bezierCoefficients(py1, py2, py3, py4);\n  var a = A * bx[0] + B * by[0]; // t^3\n\n  var b = A * bx[1] + B * by[1]; // t^2\n\n  var c = A * bx[2] + B * by[2]; // t\n\n  var d = A * bx[3] + B * by[3] + C; // 1\n\n  var roots = cubicRoots(a, b, c, d); // Verify that the roots are within bounds of the linear segment.\n\n  for (var i = 0; i < roots.length; i++) {\n    var t = roots[i];\n    var tt = t * t;\n    var ttt = t * tt; // Find the cartesian plane coordinates for the parametric root `t`.\n\n    var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n    var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3]; // The parametric cubic roots we found are intersection points\n    // with an infinite line, and so the x/y coordinates above are as well.\n    // Make sure the x/y is also within the bounds of the given segment.\n\n    var s = void 0;\n\n    if (x1 !== x2) {\n      s = (x - x1) / (x2 - x1);\n    } else {\n      // the line is vertical\n      s = (y - y1) / (y2 - y1);\n    }\n\n    if (s >= 0 && s <= 1) {\n      intersections.push({\n        x: x,\n        y: y\n      });\n    }\n  }\n\n  return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\n\nexport function bezierCoefficients(P1, P2, P3, P4) {\n  return [-P1 + 3 * P2 - 3 * P3 + P4, 3 * P1 - 6 * P2 + 3 * P3, -3 * P1 + 3 * P2, P1 //                 | 1  0  0  0| |P4|\n  ];\n}","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/intersection.js"],"names":["cubicRoots","segmentIntersection","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","d","ua","ub","x","y","cubicSegmentIntersections","px1","py1","px2","py2","px3","py3","px4","py4","x1","y1","x2","y2","intersections","A","B","C","bx","bezierCoefficients","by","a","b","c","roots","i","length","t","tt","ttt","s","push","P1","P2","P3","P4"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA;;;;;;AAKA,OAAO,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,GAAjD,EAAsDC,GAAtD,EAA2DC,GAA3D,EAAgEC,GAAhE,EAAqE;AACxE,MAAIC,CAAC,GAAG,CAACN,GAAG,GAAGF,GAAP,KAAeO,GAAG,GAAGF,GAArB,IAA4B,CAACF,GAAG,GAAGF,GAAP,KAAeK,GAAG,GAAGF,GAArB,CAApC;;AACA,MAAII,CAAC,KAAK,CAAV,EAAa;AAAE;AACX,WAAO,IAAP;AACH;;AACD,MAAIC,EAAE,GAAG,CAAC,CAACH,GAAG,GAAGF,GAAP,KAAeH,GAAG,GAAGI,GAArB,IAA4B,CAACL,GAAG,GAAGI,GAAP,KAAeG,GAAG,GAAGF,GAArB,CAA7B,IAA0DG,CAAnE;AACA,MAAIE,EAAE,GAAG,CAAC,CAACR,GAAG,GAAGF,GAAP,KAAeC,GAAG,GAAGI,GAArB,IAA4B,CAACF,GAAG,GAAGF,GAAP,KAAeD,GAAG,GAAGI,GAArB,CAA7B,IAA0DI,CAAnE;;AACA,MAAIC,EAAE,IAAI,CAAN,IAAWA,EAAE,IAAI,CAAjB,IAAsBC,EAAE,IAAI,CAA5B,IAAiCA,EAAE,IAAI,CAA3C,EAA8C;AAC1C,WAAO;AACHC,MAAAA,CAAC,EAAEX,GAAG,GAAGS,EAAE,IAAIP,GAAG,GAAGF,GAAV,CADR;AAEHY,MAAAA,CAAC,EAAEX,GAAG,GAAGQ,EAAE,IAAIN,GAAG,GAAGF,GAAV;AAFR,KAAP;AAIH;;AACD,SAAO,IAAP,CAbwE,CAa3D;AAChB;AACD;;;;;;AAKA,OAAO,SAASY,yBAAT,CAAmCC,GAAnC,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkDC,GAAlD,EAAuDC,GAAvD,EAA4DC,GAA5D,EAAiEC,GAAjE,EAAsEC,GAAtE,EAA2EC,EAA3E,EAA+EC,EAA/E,EAAmFC,EAAnF,EAAuFC,EAAvF,EAA2F;AAC9F,MAAIC,aAAa,GAAG,EAApB,CAD8F,CAE9F;;AACA,MAAIC,CAAC,GAAGJ,EAAE,GAAGE,EAAb;AACA,MAAIG,CAAC,GAAGJ,EAAE,GAAGF,EAAb;AACA,MAAIO,CAAC,GAAGP,EAAE,IAAIG,EAAE,GAAGF,EAAT,CAAF,GAAiBA,EAAE,IAAIC,EAAE,GAAGF,EAAT,CAA3B,CAL8F,CAM9F;;AACA,MAAIQ,EAAE,GAAGC,kBAAkB,CAACjB,GAAD,EAAME,GAAN,EAAWE,GAAX,EAAgBE,GAAhB,CAA3B;AACA,MAAIY,EAAE,GAAGD,kBAAkB,CAAChB,GAAD,EAAME,GAAN,EAAWE,GAAX,EAAgBE,GAAhB,CAA3B;AACA,MAAIY,CAAC,GAAGN,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAN,GAAYF,CAAC,GAAGI,EAAE,CAAC,CAAD,CAA1B,CAT8F,CAS/D;;AAC/B,MAAIE,CAAC,GAAGP,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAN,GAAYF,CAAC,GAAGI,EAAE,CAAC,CAAD,CAA1B,CAV8F,CAU/D;;AAC/B,MAAIG,CAAC,GAAGR,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAN,GAAYF,CAAC,GAAGI,EAAE,CAAC,CAAD,CAA1B,CAX8F,CAW/D;;AAC/B,MAAIxB,CAAC,GAAGmB,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAN,GAAYF,CAAC,GAAGI,EAAE,CAAC,CAAD,CAAlB,GAAwBH,CAAhC,CAZ8F,CAY3D;;AACnC,MAAIO,KAAK,GAAGtC,UAAU,CAACmC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU3B,CAAV,CAAtB,CAb8F,CAc9F;;AACA,OAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIE,CAAC,GAAGH,KAAK,CAACC,CAAD,CAAb;AACA,QAAIG,EAAE,GAAGD,CAAC,GAAGA,CAAb;AACA,QAAIE,GAAG,GAAGF,CAAC,GAAGC,EAAd,CAHmC,CAInC;;AACA,QAAI7B,CAAC,GAAGmB,EAAE,CAAC,CAAD,CAAF,GAAQW,GAAR,GAAcX,EAAE,CAAC,CAAD,CAAF,GAAQU,EAAtB,GAA2BV,EAAE,CAAC,CAAD,CAAF,GAAQS,CAAnC,GAAuCT,EAAE,CAAC,CAAD,CAAjD;AACA,QAAIlB,CAAC,GAAGoB,EAAE,CAAC,CAAD,CAAF,GAAQS,GAAR,GAAcT,EAAE,CAAC,CAAD,CAAF,GAAQQ,EAAtB,GAA2BR,EAAE,CAAC,CAAD,CAAF,GAAQO,CAAnC,GAAuCP,EAAE,CAAC,CAAD,CAAjD,CANmC,CAOnC;AACA;AACA;;AACA,QAAIU,CAAC,GAAG,KAAK,CAAb;;AACA,QAAIpB,EAAE,KAAKE,EAAX,EAAe;AACXkB,MAAAA,CAAC,GAAG,CAAC/B,CAAC,GAAGW,EAAL,KAAYE,EAAE,GAAGF,EAAjB,CAAJ;AACH,KAFD,MAGK;AAAE;AACHoB,MAAAA,CAAC,GAAG,CAAC9B,CAAC,GAAGW,EAAL,KAAYE,EAAE,GAAGF,EAAjB,CAAJ;AACH;;AACD,QAAImB,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAnB,EAAsB;AAClBhB,MAAAA,aAAa,CAACiB,IAAd,CAAmB;AAAEhC,QAAAA,CAAC,EAAEA,CAAL;AAAQC,QAAAA,CAAC,EAAEA;AAAX,OAAnB;AACH;AACJ;;AACD,SAAOc,aAAP;AACH;AACD;;;;;AAIA,OAAO,SAASK,kBAAT,CAA4Ba,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C;AAC/C,SAAO,CACH,CAACH,EAAD,GAAM,IAAIC,EAAV,GAAe,IAAIC,EAAnB,GAAwBC,EADrB,EAEH,IAAIH,EAAJ,GAAS,IAAIC,EAAb,GAAkB,IAAIC,EAFnB,EAGH,CAAC,CAAD,GAAKF,EAAL,GAAU,IAAIC,EAHX,EAIHD,EAJG,CAIA;AAJA,GAAP;AAMH","sourcesContent":["import { cubicRoots } from \"./polyRoots\";\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\nexport function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n    if (d === 0) { // The lines are parallel.\n        return null;\n    }\n    var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n    var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n        return {\n            x: ax1 + ua * (ax2 - ax1),\n            y: ay1 + ua * (ay2 - ay1)\n        };\n    }\n    return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\nexport function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n    var intersections = [];\n    // Find line equation coefficients.\n    var A = y1 - y2;\n    var B = x2 - x1;\n    var C = x1 * (y2 - y1) - y1 * (x2 - x1);\n    // Find cubic Bezier curve equation coefficients from control points.\n    var bx = bezierCoefficients(px1, px2, px3, px4);\n    var by = bezierCoefficients(py1, py2, py3, py4);\n    var a = A * bx[0] + B * by[0]; // t^3\n    var b = A * bx[1] + B * by[1]; // t^2\n    var c = A * bx[2] + B * by[2]; // t\n    var d = A * bx[3] + B * by[3] + C; // 1\n    var roots = cubicRoots(a, b, c, d);\n    // Verify that the roots are within bounds of the linear segment.\n    for (var i = 0; i < roots.length; i++) {\n        var t = roots[i];\n        var tt = t * t;\n        var ttt = t * tt;\n        // Find the cartesian plane coordinates for the parametric root `t`.\n        var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n        var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\n        // The parametric cubic roots we found are intersection points\n        // with an infinite line, and so the x/y coordinates above are as well.\n        // Make sure the x/y is also within the bounds of the given segment.\n        var s = void 0;\n        if (x1 !== x2) {\n            s = (x - x1) / (x2 - x1);\n        }\n        else { // the line is vertical\n            s = (y - y1) / (y2 - y1);\n        }\n        if (s >= 0 && s <= 1) {\n            intersections.push({ x: x, y: y });\n        }\n    }\n    return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\nexport function bezierCoefficients(P1, P2, P3, P4) {\n    return [\n        -P1 + 3 * P2 - 3 * P3 + P4,\n        3 * P1 - 6 * P2 + 3 * P3,\n        -3 * P1 + 3 * P2,\n        P1 //                 | 1  0  0  0| |P4|\n    ];\n}\n"]},"metadata":{},"sourceType":"module"}