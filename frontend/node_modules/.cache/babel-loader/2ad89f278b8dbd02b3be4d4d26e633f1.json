{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Node } from \"../node\";\nimport { chainObjects } from \"../../util/object\";\n\nvar Shape =\n/** @class */\nfunction (_super) {\n  __extends(Shape, _super);\n\n  function Shape() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.lastInstanceId = 0;\n    _this._fillOpacity = 1;\n    _this._strokeOpacity = 1;\n    _this._fill = Shape.defaultStyles.fill;\n    /**\n     * Note that `strokeStyle = null` means invisible stroke,\n     * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.\n     * For example, a rect shape with an invisible stroke may not align to the pixel grid\n     * properly because the stroke affects the rules of alignment, and arc shapes forming\n     * a pie chart will have a gap between them if they have an invisible stroke, whereas\n     * there would be not gap if there was no stroke at all.\n     * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,\n     * unless specific looks that is achieved by having an invisible stroke is desired.\n     */\n\n    _this._stroke = Shape.defaultStyles.stroke;\n    _this._strokeWidth = Shape.defaultStyles.strokeWidth;\n    _this._lineDash = Shape.defaultStyles.lineDash;\n    _this._lineDashOffset = Shape.defaultStyles.lineDashOffset;\n    _this._lineCap = Shape.defaultStyles.lineCap;\n    _this._lineJoin = Shape.defaultStyles.lineJoin;\n    _this._opacity = Shape.defaultStyles.opacity;\n\n    _this.onShadowChange = function () {\n      _this.dirty = true;\n    };\n\n    _this._fillShadow = Shape.defaultStyles.fillShadow;\n    _this._strokeShadow = Shape.defaultStyles.strokeShadow;\n    return _this;\n  }\n  /**\n   * Creates a light-weight instance of the given shape (that serves as a template).\n   * The created instance only stores the properites set on the instance itself\n   * and the rest of the properties come via the prototype chain from the template.\n   * This can greatly reduce memory usage in cases where one has many simular shapes,\n   * for example, circles of different size, position and color. The exact memory usage\n   * reduction will depend on the size of the template and the number of own properties\n   * set on its lightweight instances, but will typically be around an order of magnitude\n   * or more.\n   *\n   * Note: template shapes are not supposed to be part of the scene graph (they should not\n   * have a parent).\n   *\n   * @param template\n   */\n\n\n  Shape.createInstance = function (template) {\n    var shape = Object.create(template);\n\n    shape._setParent(undefined);\n\n    shape.id = template.id + '-Instance-' + String(++template.lastInstanceId);\n    return shape;\n  };\n  /**\n   * Restores the default styles introduced by this subclass.\n   */\n\n\n  Shape.prototype.restoreOwnStyles = function () {\n    var styles = this.constructor.defaultStyles;\n    var keys = Object.getOwnPropertyNames(styles); // getOwnPropertyNames is about 2.5 times faster than\n    // for..in with the hasOwnProperty check and in this\n    // case, where most properties are inherited, can be\n    // more then an order of magnitude faster.\n\n    for (var i = 0, n = keys.length; i < n; i++) {\n      var key = keys[i];\n      this[key] = styles[key];\n    }\n  };\n\n  Shape.prototype.restoreAllStyles = function () {\n    var styles = this.constructor.defaultStyles;\n\n    for (var property in styles) {\n      this[property] = styles[property];\n    }\n  };\n  /**\n   * Restores the base class default styles that have been overridden by this subclass.\n   */\n\n\n  Shape.prototype.restoreOverriddenStyles = function () {\n    var styles = this.constructor.defaultStyles;\n    var protoStyles = Object.getPrototypeOf(styles);\n\n    for (var property in styles) {\n      if (styles.hasOwnProperty(property) && protoStyles.hasOwnProperty(property)) {\n        this[property] = styles[property];\n      }\n    }\n  };\n\n  Object.defineProperty(Shape.prototype, \"fillOpacity\", {\n    get: function () {\n      return this._fillOpacity;\n    },\n    set: function (value) {\n      if (this._fillOpacity !== value) {\n        this._fillOpacity = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"strokeOpacity\", {\n    get: function () {\n      return this._strokeOpacity;\n    },\n    set: function (value) {\n      if (this._strokeOpacity !== value) {\n        this._strokeOpacity = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"fill\", {\n    get: function () {\n      return this._fill;\n    },\n    set: function (value) {\n      if (this._fill !== value) {\n        this._fill = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"stroke\", {\n    get: function () {\n      return this._stroke;\n    },\n    set: function (value) {\n      if (this._stroke !== value) {\n        this._stroke = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"strokeWidth\", {\n    get: function () {\n      return this._strokeWidth;\n    },\n    set: function (value) {\n      if (this._strokeWidth !== value) {\n        this._strokeWidth = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"alignment\", {\n    // An offset value to align to the pixel grid.\n    get: function () {\n      return Math.floor(this.strokeWidth) % 2 / 2;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Returns the aligned `start` or `length` value.\n  // For example: `start` could be `y` and `length` could be `height` of a rectangle.\n\n  Shape.prototype.align = function (alignment, start, length) {\n    if (length != undefined) {\n      return Math.floor(length) + Math.floor(start % 1 + length % 1);\n    }\n\n    return Math.floor(start) + alignment;\n  };\n\n  Object.defineProperty(Shape.prototype, \"lineDash\", {\n    get: function () {\n      return this._lineDash;\n    },\n    set: function (value) {\n      var oldValue = this._lineDash;\n\n      if (oldValue !== value) {\n        if (oldValue && value && oldValue.length === value.length) {\n          var identical = true;\n          var n = value.length;\n\n          for (var i = 0; i < n; i++) {\n            if (oldValue[i] !== value[i]) {\n              identical = false;\n              break;\n            }\n          }\n\n          if (identical) {\n            return;\n          }\n        }\n\n        this._lineDash = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"lineDashOffset\", {\n    get: function () {\n      return this._lineDashOffset;\n    },\n    set: function (value) {\n      if (this._lineDashOffset !== value) {\n        this._lineDashOffset = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"lineCap\", {\n    get: function () {\n      return this._lineCap;\n    },\n    set: function (value) {\n      if (this._lineCap !== value) {\n        this._lineCap = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"lineJoin\", {\n    get: function () {\n      return this._lineJoin;\n    },\n    set: function (value) {\n      if (this._lineJoin !== value) {\n        this._lineJoin = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"opacity\", {\n    get: function () {\n      return this._opacity;\n    },\n    set: function (value) {\n      value = Math.min(1, Math.max(0, value));\n\n      if (this._opacity !== value) {\n        this._opacity = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"fillShadow\", {\n    get: function () {\n      return this._fillShadow;\n    },\n    set: function (value) {\n      var oldValue = this._fillShadow;\n\n      if (oldValue !== value) {\n        if (oldValue) {\n          oldValue.removeEventListener('change', this.onShadowChange);\n        }\n\n        if (value) {\n          value.addEventListener('change', this.onShadowChange);\n        }\n\n        this._fillShadow = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Shape.prototype, \"strokeShadow\", {\n    get: function () {\n      return this._strokeShadow;\n    },\n    set: function (value) {\n      var oldValue = this._strokeShadow;\n\n      if (oldValue !== value) {\n        if (oldValue) {\n          oldValue.removeEventListener('change', this.onShadowChange);\n        }\n\n        if (value) {\n          value.addEventListener('change', this.onShadowChange);\n        }\n\n        this._strokeShadow = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Shape.prototype.fillStroke = function (ctx) {\n    if (!this.scene) {\n      return;\n    }\n\n    var pixelRatio = this.scene.canvas.pixelRatio || 1;\n\n    if (this.fill) {\n      ctx.fillStyle = this.fill;\n      ctx.globalAlpha = this.opacity * this.fillOpacity; // The canvas context scaling (depends on the device's pixel ratio)\n      // has no effect on shadows, so we have to account for the pixel ratio\n      // manually here.\n\n      var fillShadow = this.fillShadow;\n\n      if (fillShadow && fillShadow.enabled) {\n        ctx.shadowColor = fillShadow.color;\n        ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n        ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n        ctx.shadowBlur = fillShadow.blur * pixelRatio;\n      }\n\n      ctx.fill();\n    }\n\n    ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n\n    if (this.stroke && this.strokeWidth) {\n      ctx.strokeStyle = this.stroke;\n      ctx.globalAlpha = this.opacity * this.strokeOpacity;\n      ctx.lineWidth = this.strokeWidth;\n\n      if (this.lineDash) {\n        ctx.setLineDash(this.lineDash);\n      }\n\n      if (this.lineDashOffset) {\n        ctx.lineDashOffset = this.lineDashOffset;\n      }\n\n      if (this.lineCap) {\n        ctx.lineCap = this.lineCap;\n      }\n\n      if (this.lineJoin) {\n        ctx.lineJoin = this.lineJoin;\n      }\n\n      var strokeShadow = this.strokeShadow;\n\n      if (strokeShadow && strokeShadow.enabled) {\n        ctx.shadowColor = strokeShadow.color;\n        ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;\n        ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;\n        ctx.shadowBlur = strokeShadow.blur * pixelRatio;\n      }\n\n      ctx.stroke();\n    }\n  };\n\n  Shape.prototype.containsPoint = function (x, y) {\n    return this.isPointInPath(x, y);\n  };\n  /**\n   * Defaults for style properties. Note that properties that affect the position\n   * and shape of the node are not considered style properties, for example:\n   * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.\n   * Can be used to reset to the original styling after some custom styling\n   * has been applied (using the `restoreOwnStyles` and `restoreAllStyles` methods).\n   * These static defaults are meant to be inherited by subclasses.\n   */\n\n\n  Shape.defaultStyles = chainObjects({}, {\n    fill: 'black',\n    stroke: undefined,\n    strokeWidth: 0,\n    lineDash: undefined,\n    lineDashOffset: 0,\n    lineCap: undefined,\n    lineJoin: undefined,\n    opacity: 1,\n    fillShadow: undefined,\n    strokeShadow: undefined\n  });\n  return Shape;\n}(Node);\n\nexport { Shape };","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/shape/shape.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Node","chainObjects","Shape","_super","_this","apply","arguments","lastInstanceId","_fillOpacity","_strokeOpacity","_fill","defaultStyles","fill","_stroke","stroke","_strokeWidth","strokeWidth","_lineDash","lineDash","_lineDashOffset","lineDashOffset","_lineCap","lineCap","_lineJoin","lineJoin","_opacity","opacity","onShadowChange","dirty","_fillShadow","fillShadow","_strokeShadow","strokeShadow","createInstance","template","shape","_setParent","undefined","id","String","restoreOwnStyles","styles","keys","getOwnPropertyNames","i","n","length","key","restoreAllStyles","property","restoreOverriddenStyles","protoStyles","getPrototypeOf","defineProperty","get","set","value","enumerable","configurable","Math","floor","align","alignment","start","oldValue","identical","min","max","removeEventListener","addEventListener","fillStroke","ctx","scene","pixelRatio","canvas","fillStyle","globalAlpha","fillOpacity","enabled","shadowColor","color","shadowOffsetX","xOffset","shadowOffsetY","yOffset","shadowBlur","blur","strokeStyle","strokeOpacity","lineWidth","setLineDash","containsPoint","x","y","isPointInPath"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Node } from \"../node\";\nimport { chainObjects } from \"../../util/object\";\nvar Shape = /** @class */ (function (_super) {\n    __extends(Shape, _super);\n    function Shape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.lastInstanceId = 0;\n        _this._fillOpacity = 1;\n        _this._strokeOpacity = 1;\n        _this._fill = Shape.defaultStyles.fill;\n        /**\n         * Note that `strokeStyle = null` means invisible stroke,\n         * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.\n         * For example, a rect shape with an invisible stroke may not align to the pixel grid\n         * properly because the stroke affects the rules of alignment, and arc shapes forming\n         * a pie chart will have a gap between them if they have an invisible stroke, whereas\n         * there would be not gap if there was no stroke at all.\n         * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,\n         * unless specific looks that is achieved by having an invisible stroke is desired.\n         */\n        _this._stroke = Shape.defaultStyles.stroke;\n        _this._strokeWidth = Shape.defaultStyles.strokeWidth;\n        _this._lineDash = Shape.defaultStyles.lineDash;\n        _this._lineDashOffset = Shape.defaultStyles.lineDashOffset;\n        _this._lineCap = Shape.defaultStyles.lineCap;\n        _this._lineJoin = Shape.defaultStyles.lineJoin;\n        _this._opacity = Shape.defaultStyles.opacity;\n        _this.onShadowChange = function () {\n            _this.dirty = true;\n        };\n        _this._fillShadow = Shape.defaultStyles.fillShadow;\n        _this._strokeShadow = Shape.defaultStyles.strokeShadow;\n        return _this;\n    }\n    /**\n     * Creates a light-weight instance of the given shape (that serves as a template).\n     * The created instance only stores the properites set on the instance itself\n     * and the rest of the properties come via the prototype chain from the template.\n     * This can greatly reduce memory usage in cases where one has many simular shapes,\n     * for example, circles of different size, position and color. The exact memory usage\n     * reduction will depend on the size of the template and the number of own properties\n     * set on its lightweight instances, but will typically be around an order of magnitude\n     * or more.\n     *\n     * Note: template shapes are not supposed to be part of the scene graph (they should not\n     * have a parent).\n     *\n     * @param template\n     */\n    Shape.createInstance = function (template) {\n        var shape = Object.create(template);\n        shape._setParent(undefined);\n        shape.id = template.id + '-Instance-' + String(++template.lastInstanceId);\n        return shape;\n    };\n    /**\n     * Restores the default styles introduced by this subclass.\n     */\n    Shape.prototype.restoreOwnStyles = function () {\n        var styles = this.constructor.defaultStyles;\n        var keys = Object.getOwnPropertyNames(styles);\n        // getOwnPropertyNames is about 2.5 times faster than\n        // for..in with the hasOwnProperty check and in this\n        // case, where most properties are inherited, can be\n        // more then an order of magnitude faster.\n        for (var i = 0, n = keys.length; i < n; i++) {\n            var key = keys[i];\n            this[key] = styles[key];\n        }\n    };\n    Shape.prototype.restoreAllStyles = function () {\n        var styles = this.constructor.defaultStyles;\n        for (var property in styles) {\n            this[property] = styles[property];\n        }\n    };\n    /**\n     * Restores the base class default styles that have been overridden by this subclass.\n     */\n    Shape.prototype.restoreOverriddenStyles = function () {\n        var styles = this.constructor.defaultStyles;\n        var protoStyles = Object.getPrototypeOf(styles);\n        for (var property in styles) {\n            if (styles.hasOwnProperty(property) && protoStyles.hasOwnProperty(property)) {\n                this[property] = styles[property];\n            }\n        }\n    };\n    Object.defineProperty(Shape.prototype, \"fillOpacity\", {\n        get: function () {\n            return this._fillOpacity;\n        },\n        set: function (value) {\n            if (this._fillOpacity !== value) {\n                this._fillOpacity = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"strokeOpacity\", {\n        get: function () {\n            return this._strokeOpacity;\n        },\n        set: function (value) {\n            if (this._strokeOpacity !== value) {\n                this._strokeOpacity = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"fill\", {\n        get: function () {\n            return this._fill;\n        },\n        set: function (value) {\n            if (this._fill !== value) {\n                this._fill = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"stroke\", {\n        get: function () {\n            return this._stroke;\n        },\n        set: function (value) {\n            if (this._stroke !== value) {\n                this._stroke = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"strokeWidth\", {\n        get: function () {\n            return this._strokeWidth;\n        },\n        set: function (value) {\n            if (this._strokeWidth !== value) {\n                this._strokeWidth = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"alignment\", {\n        // An offset value to align to the pixel grid.\n        get: function () {\n            return Math.floor(this.strokeWidth) % 2 / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the aligned `start` or `length` value.\n    // For example: `start` could be `y` and `length` could be `height` of a rectangle.\n    Shape.prototype.align = function (alignment, start, length) {\n        if (length != undefined) {\n            return Math.floor(length) + Math.floor(start % 1 + length % 1);\n        }\n        return Math.floor(start) + alignment;\n    };\n    Object.defineProperty(Shape.prototype, \"lineDash\", {\n        get: function () {\n            return this._lineDash;\n        },\n        set: function (value) {\n            var oldValue = this._lineDash;\n            if (oldValue !== value) {\n                if (oldValue && value && oldValue.length === value.length) {\n                    var identical = true;\n                    var n = value.length;\n                    for (var i = 0; i < n; i++) {\n                        if (oldValue[i] !== value[i]) {\n                            identical = false;\n                            break;\n                        }\n                    }\n                    if (identical) {\n                        return;\n                    }\n                }\n                this._lineDash = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"lineDashOffset\", {\n        get: function () {\n            return this._lineDashOffset;\n        },\n        set: function (value) {\n            if (this._lineDashOffset !== value) {\n                this._lineDashOffset = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"lineCap\", {\n        get: function () {\n            return this._lineCap;\n        },\n        set: function (value) {\n            if (this._lineCap !== value) {\n                this._lineCap = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"lineJoin\", {\n        get: function () {\n            return this._lineJoin;\n        },\n        set: function (value) {\n            if (this._lineJoin !== value) {\n                this._lineJoin = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"opacity\", {\n        get: function () {\n            return this._opacity;\n        },\n        set: function (value) {\n            value = Math.min(1, Math.max(0, value));\n            if (this._opacity !== value) {\n                this._opacity = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"fillShadow\", {\n        get: function () {\n            return this._fillShadow;\n        },\n        set: function (value) {\n            var oldValue = this._fillShadow;\n            if (oldValue !== value) {\n                if (oldValue) {\n                    oldValue.removeEventListener('change', this.onShadowChange);\n                }\n                if (value) {\n                    value.addEventListener('change', this.onShadowChange);\n                }\n                this._fillShadow = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Shape.prototype, \"strokeShadow\", {\n        get: function () {\n            return this._strokeShadow;\n        },\n        set: function (value) {\n            var oldValue = this._strokeShadow;\n            if (oldValue !== value) {\n                if (oldValue) {\n                    oldValue.removeEventListener('change', this.onShadowChange);\n                }\n                if (value) {\n                    value.addEventListener('change', this.onShadowChange);\n                }\n                this._strokeShadow = value;\n                this.dirty = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Shape.prototype.fillStroke = function (ctx) {\n        if (!this.scene) {\n            return;\n        }\n        var pixelRatio = this.scene.canvas.pixelRatio || 1;\n        if (this.fill) {\n            ctx.fillStyle = this.fill;\n            ctx.globalAlpha = this.opacity * this.fillOpacity;\n            // The canvas context scaling (depends on the device's pixel ratio)\n            // has no effect on shadows, so we have to account for the pixel ratio\n            // manually here.\n            var fillShadow = this.fillShadow;\n            if (fillShadow && fillShadow.enabled) {\n                ctx.shadowColor = fillShadow.color;\n                ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n                ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n                ctx.shadowBlur = fillShadow.blur * pixelRatio;\n            }\n            ctx.fill();\n        }\n        ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n        if (this.stroke && this.strokeWidth) {\n            ctx.strokeStyle = this.stroke;\n            ctx.globalAlpha = this.opacity * this.strokeOpacity;\n            ctx.lineWidth = this.strokeWidth;\n            if (this.lineDash) {\n                ctx.setLineDash(this.lineDash);\n            }\n            if (this.lineDashOffset) {\n                ctx.lineDashOffset = this.lineDashOffset;\n            }\n            if (this.lineCap) {\n                ctx.lineCap = this.lineCap;\n            }\n            if (this.lineJoin) {\n                ctx.lineJoin = this.lineJoin;\n            }\n            var strokeShadow = this.strokeShadow;\n            if (strokeShadow && strokeShadow.enabled) {\n                ctx.shadowColor = strokeShadow.color;\n                ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;\n                ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;\n                ctx.shadowBlur = strokeShadow.blur * pixelRatio;\n            }\n            ctx.stroke();\n        }\n    };\n    Shape.prototype.containsPoint = function (x, y) {\n        return this.isPointInPath(x, y);\n    };\n    /**\n     * Defaults for style properties. Note that properties that affect the position\n     * and shape of the node are not considered style properties, for example:\n     * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.\n     * Can be used to reset to the original styling after some custom styling\n     * has been applied (using the `restoreOwnStyles` and `restoreAllStyles` methods).\n     * These static defaults are meant to be inherited by subclasses.\n     */\n    Shape.defaultStyles = chainObjects({}, {\n        fill: 'black',\n        stroke: undefined,\n        strokeWidth: 0,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        lineCap: undefined,\n        lineJoin: undefined,\n        opacity: 1,\n        fillShadow: undefined,\n        strokeShadow: undefined\n    });\n    return Shape;\n}(Node));\nexport { Shape };\n"]},"metadata":{},"sourceType":"module"}