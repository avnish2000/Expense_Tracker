{"ast":null,"code":"var twoPi = Math.PI * 2;\n/**\n * Normalize the given angle to be in the [0, 2π) interval.\n * @param radians Angle in radians.\n */\n\nexport function normalizeAngle360(radians) {\n  radians %= twoPi;\n  radians += twoPi;\n  radians %= twoPi;\n  return radians;\n}\nexport function normalizeAngle360Inclusive(radians) {\n  radians %= twoPi;\n  radians += twoPi;\n\n  if (radians !== twoPi) {\n    radians %= twoPi;\n  }\n\n  return radians;\n}\n/**\n * Normalize the given angle to be in the [-π, π) interval.\n * @param radians Angle in radians.\n */\n\nexport function normalizeAngle180(radians) {\n  radians %= twoPi;\n\n  if (radians < -Math.PI) {\n    radians += twoPi;\n  } else if (radians >= Math.PI) {\n    radians -= twoPi;\n  }\n\n  return radians;\n}\nexport function toRadians(degrees) {\n  return degrees / 180 * Math.PI;\n}\nexport function toDegrees(radians) {\n  return radians / Math.PI * 180;\n}","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/util/angle.js"],"names":["twoPi","Math","PI","normalizeAngle360","radians","normalizeAngle360Inclusive","normalizeAngle180","toRadians","degrees","toDegrees"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,IAAI,CAACC,EAAL,GAAU,CAAtB;AACA;;;;;AAIA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACvCA,EAAAA,OAAO,IAAIJ,KAAX;AACAI,EAAAA,OAAO,IAAIJ,KAAX;AACAI,EAAAA,OAAO,IAAIJ,KAAX;AACA,SAAOI,OAAP;AACH;AACD,OAAO,SAASC,0BAAT,CAAoCD,OAApC,EAA6C;AAChDA,EAAAA,OAAO,IAAIJ,KAAX;AACAI,EAAAA,OAAO,IAAIJ,KAAX;;AACA,MAAII,OAAO,KAAKJ,KAAhB,EAAuB;AACnBI,IAAAA,OAAO,IAAIJ,KAAX;AACH;;AACD,SAAOI,OAAP;AACH;AACD;;;;;AAIA,OAAO,SAASE,iBAAT,CAA2BF,OAA3B,EAAoC;AACvCA,EAAAA,OAAO,IAAIJ,KAAX;;AACA,MAAII,OAAO,GAAG,CAACH,IAAI,CAACC,EAApB,EAAwB;AACpBE,IAAAA,OAAO,IAAIJ,KAAX;AACH,GAFD,MAGK,IAAII,OAAO,IAAIH,IAAI,CAACC,EAApB,EAAwB;AACzBE,IAAAA,OAAO,IAAIJ,KAAX;AACH;;AACD,SAAOI,OAAP;AACH;AACD,OAAO,SAASG,SAAT,CAAmBC,OAAnB,EAA4B;AAC/B,SAAOA,OAAO,GAAG,GAAV,GAAgBP,IAAI,CAACC,EAA5B;AACH;AACD,OAAO,SAASO,SAAT,CAAmBL,OAAnB,EAA4B;AAC/B,SAAOA,OAAO,GAAGH,IAAI,CAACC,EAAf,GAAoB,GAA3B;AACH","sourcesContent":["var twoPi = Math.PI * 2;\n/**\n * Normalize the given angle to be in the [0, 2π) interval.\n * @param radians Angle in radians.\n */\nexport function normalizeAngle360(radians) {\n    radians %= twoPi;\n    radians += twoPi;\n    radians %= twoPi;\n    return radians;\n}\nexport function normalizeAngle360Inclusive(radians) {\n    radians %= twoPi;\n    radians += twoPi;\n    if (radians !== twoPi) {\n        radians %= twoPi;\n    }\n    return radians;\n}\n/**\n * Normalize the given angle to be in the [-π, π) interval.\n * @param radians Angle in radians.\n */\nexport function normalizeAngle180(radians) {\n    radians %= twoPi;\n    if (radians < -Math.PI) {\n        radians += twoPi;\n    }\n    else if (radians >= Math.PI) {\n        radians -= twoPi;\n    }\n    return radians;\n}\nexport function toRadians(degrees) {\n    return degrees / 180 * Math.PI;\n}\nexport function toDegrees(radians) {\n    return radians / Math.PI * 180;\n}\n"]},"metadata":{},"sourceType":"module"}