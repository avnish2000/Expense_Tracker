{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar _a, _b, _c, _d;\n\nimport { Padding } from \"../util/padding\";\nimport { CartesianChart } from \"./cartesianChart\";\nimport { GroupedCategoryChart } from \"./groupedCategoryChart\";\nimport { NumberAxis } from \"./axis/numberAxis\";\nimport { CategoryAxis } from \"./axis/categoryAxis\";\nimport { GroupedCategoryAxis } from \"./axis/groupedCategoryAxis\";\nimport { LineSeries } from \"./series/cartesian/lineSeries\";\nimport { BarSeries } from \"./series/cartesian/barSeries\";\nimport { HistogramSeries } from \"./series/cartesian/histogramSeries\";\nimport { ScatterSeries } from \"./series/cartesian/scatterSeries\";\nimport { AreaSeries } from \"./series/cartesian/areaSeries\";\nimport { PolarChart } from \"./polarChart\";\nimport { PieSeries } from \"./series/polar/pieSeries\";\nimport { AxisLabel, AxisTick } from \"../axis\";\nimport { TimeAxis } from \"./axis/timeAxis\";\nimport { Caption } from \"../caption\";\nimport { DropShadow } from \"../scene/dropShadow\";\nimport { Legend, LegendPosition, LegendItem, LegendMarker, LegendLabel } from \"./legend\";\nimport { Navigator } from \"./navigator/navigator\";\nimport { NavigatorMask } from \"./navigator/navigatorMask\";\nimport { NavigatorHandle } from \"./navigator/navigatorHandle\";\nimport { CartesianSeriesMarker } from \"./series/cartesian/cartesianSeries\";\n/*\n    This file defines the specs for creating different kinds of charts, but\n    contains no code that uses the specs to actually create charts\n*/\n\nvar chartPadding = 20;\nvar commonChartMappings = {\n  background: {\n    meta: {\n      defaults: {\n        visible: true,\n        fill: 'white'\n      }\n    }\n  },\n  padding: {\n    meta: {\n      constructor: Padding,\n      defaults: {\n        top: chartPadding,\n        right: chartPadding,\n        bottom: chartPadding,\n        left: chartPadding\n      }\n    }\n  },\n  title: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: true,\n        padding: {\n          meta: {\n            constructor: Padding,\n            defaults: {\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10\n            }\n          }\n        },\n        text: 'Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 14,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgb(70, 70, 70)'\n      }\n    }\n  },\n  subtitle: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: true,\n        padding: {\n          meta: {\n            constructor: Padding,\n            defaults: {\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10\n            }\n          }\n        },\n        text: 'Subtitle',\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgb(140, 140, 140)'\n      }\n    }\n  },\n  legend: {\n    meta: {\n      constructor: Legend,\n      defaults: {\n        enabled: true,\n        position: LegendPosition.Right,\n        spacing: 20\n      }\n    },\n    item: {\n      meta: {\n        constructor: LegendItem,\n        defaults: {\n          paddingX: 16,\n          paddingY: 8\n        }\n      },\n      marker: {\n        meta: {\n          constructor: LegendMarker,\n          defaults: {\n            shape: undefined,\n            size: 15,\n            strokeWidth: 1,\n            padding: 8\n          }\n        }\n      },\n      label: {\n        meta: {\n          constructor: LegendLabel,\n          defaults: {\n            color: 'black',\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 12,\n            fontFamily: 'Verdana, sans-serif'\n          }\n        }\n      }\n    }\n  }\n};\nvar chartDefaults = {\n  container: undefined,\n  autoSize: true,\n  width: 600,\n  height: 300,\n  data: [],\n  title: undefined,\n  subtitle: undefined,\n  padding: {},\n  background: {},\n  legend: {\n    item: {\n      marker: {},\n      label: {}\n    }\n  },\n  navigator: {\n    mask: {},\n    minHandle: {},\n    maxHandle: {}\n  },\n  listeners: undefined\n};\nvar chartMeta = {\n  // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything\n  // is configured the same way, via the properties, and makes the factory pattern work well) but the charts\n  // themselves are the exceptions.\n  // If a chart config has the (optional) `document` property, it will be passed to the constructor.\n  // There is no actual `document` property on the chart, it can only be supplied during instantiation.\n  constructorParams: ['document'],\n  setAsIs: ['container', 'data', 'tooltipOffset']\n};\nvar axisDefaults = {\n  defaults: {\n    visibleRange: [0, 1],\n    label: {},\n    tick: {},\n    title: {},\n    line: {},\n    gridStyle: [{\n      stroke: 'rgb(219, 219, 219)',\n      lineDash: [4, 2]\n    }]\n  }\n};\nvar seriesDefaults = {\n  visible: true,\n  showInLegend: true,\n  listeners: undefined\n};\nvar columnSeriesDefaults = {\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  xKey: '',\n  xName: '',\n  yKeys: [],\n  yNames: [],\n  grouped: false,\n  normalizedTo: undefined,\n  strokeWidth: 1,\n  lineDash: undefined,\n  lineDashOffset: 0,\n  shadow: undefined,\n  highlightStyle: {\n    fill: 'yellow'\n  }\n};\nvar shadowMapping = {\n  shadow: {\n    meta: {\n      constructor: DropShadow,\n      defaults: {\n        enabled: true,\n        color: 'rgba(0, 0, 0, 0.5)',\n        xOffset: 0,\n        yOffset: 0,\n        blur: 5\n      }\n    }\n  }\n};\nvar labelDefaults = {\n  enabled: true,\n  fontStyle: undefined,\n  fontWeight: undefined,\n  fontSize: 12,\n  fontFamily: 'Verdana, sans-serif',\n  color: 'rgb(70, 70, 70)'\n};\nvar barLabelMapping = {\n  label: {\n    meta: {\n      defaults: __assign(__assign({}, labelDefaults), {\n        formatter: undefined\n      })\n    }\n  }\n};\nvar axisMappings = {\n  line: {\n    meta: {\n      defaults: {\n        width: 1,\n        color: 'rgb(195, 195, 195)'\n      }\n    }\n  },\n  title: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: true,\n        padding: {\n          meta: {\n            constructor: Padding,\n            defaults: {\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10\n            }\n          }\n        },\n        text: 'Axis Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgb(70, 70, 70)'\n      }\n    }\n  },\n  label: {\n    meta: {\n      constructor: AxisLabel,\n      defaults: {\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        padding: 5,\n        rotation: 0,\n        color: 'rgb(87, 87, 87)',\n        formatter: undefined\n      }\n    }\n  },\n  tick: {\n    meta: {\n      constructor: AxisTick,\n      defaults: {\n        width: 1,\n        size: 6,\n        color: 'rgb(195, 195, 195)',\n        count: 10\n      }\n    }\n  }\n};\nvar mappings = (_a = {}, _a[CartesianChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: CartesianChart\n  }, chartMeta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      axes: [{\n        type: NumberAxis.type,\n        position: 'left'\n      }, {\n        type: CategoryAxis.type,\n        position: 'bottom'\n      }]\n    })\n  })\n}, commonChartMappings), {\n  axes: (_b = {}, _b[NumberAxis.type] = __assign({\n    meta: __assign({\n      constructor: NumberAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[CategoryAxis.type] = __assign({\n    meta: __assign({\n      constructor: CategoryAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[GroupedCategoryAxis.type] = __assign({\n    meta: __assign({\n      constructor: GroupedCategoryAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[TimeAxis.type] = __assign({\n    meta: __assign({\n      constructor: TimeAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b),\n  series: (_c = {\n    column: __assign(__assign({\n      meta: {\n        constructor: BarSeries,\n        defaults: __assign(__assign({\n          flipXY: false\n        }, seriesDefaults), columnSeriesDefaults)\n      },\n      highlightStyle: {}\n    }, barLabelMapping), shadowMapping)\n  }, _c[BarSeries.type] = __assign(__assign({\n    meta: {\n      constructor: BarSeries,\n      defaults: __assign(__assign({\n        flipXY: true\n      }, seriesDefaults), columnSeriesDefaults)\n    },\n    highlightStyle: {}\n  }, barLabelMapping), shadowMapping), _c[LineSeries.type] = {\n    meta: {\n      constructor: LineSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        xName: '',\n        yKey: '',\n        yName: '',\n        strokeWidth: 2,\n        strokeOpacity: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        tooltipRenderer: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {},\n    marker: {\n      meta: {\n        constructor: CartesianSeriesMarker,\n        defaults: {\n          enabled: true,\n          shape: 'circle',\n          size: 6,\n          maxSize: 30,\n          strokeWidth: 1,\n          formatter: undefined\n        }\n      }\n    }\n  }, _c[ScatterSeries.type] = {\n    meta: {\n      constructor: ScatterSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        sizeKey: undefined,\n        labelKey: undefined,\n        xName: '',\n        yName: '',\n        sizeName: 'Size',\n        labelName: 'Label',\n        strokeWidth: 2,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        tooltipRenderer: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {},\n    marker: {\n      meta: {\n        constructor: CartesianSeriesMarker,\n        defaults: {\n          enabled: true,\n          shape: 'circle',\n          size: 6,\n          maxSize: 30,\n          strokeWidth: 1,\n          formatter: undefined\n        }\n      }\n    }\n  }, _c[AreaSeries.type] = __assign({\n    meta: {\n      constructor: AreaSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        xKey: '',\n        xName: '',\n        yKeys: [],\n        yNames: [],\n        normalizedTo: undefined,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        strokeWidth: 2,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        shadow: undefined,\n        tooltipRenderer: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {},\n    marker: {\n      meta: {\n        constructor: CartesianSeriesMarker,\n        defaults: {\n          enabled: true,\n          shape: 'circle',\n          size: 6,\n          maxSize: 30,\n          strokeWidth: 1,\n          formatter: undefined\n        }\n      }\n    }\n  }, shadowMapping), _c[HistogramSeries.type] = __assign({\n    meta: {\n      constructor: HistogramSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        xName: '',\n        yName: '',\n        strokeWidth: 1,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        areaPlot: false,\n        aggregation: 'sum',\n        tooltipRenderer: undefined,\n        highlightStyle: {\n          fill: 'yellow'\n        }\n      })\n    },\n    highlightStyle: {},\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          formatter: undefined\n        })\n      }\n    }\n  }, shadowMapping), _c),\n  navigator: {\n    meta: {\n      constructor: Navigator,\n      defaults: {\n        enabled: false,\n        height: 30,\n        min: 0,\n        max: 1\n      }\n    },\n    mask: {\n      meta: {\n        constructor: NavigatorMask,\n        defaults: {\n          fill: '#999999',\n          stroke: '#999999',\n          strokeWidth: 1,\n          fillOpacity: 0.2\n        }\n      }\n    },\n    minHandle: {\n      meta: {\n        constructor: NavigatorHandle,\n        defaults: {\n          fill: '#f2f2f2',\n          stroke: '#999999',\n          strokeWidth: 1,\n          width: 8,\n          height: 16,\n          gripLineGap: 2,\n          gripLineLength: 8\n        }\n      }\n    },\n    maxHandle: {\n      meta: {\n        constructor: NavigatorHandle,\n        defaults: {\n          fill: '#f2f2f2',\n          stroke: '#999999',\n          strokeWidth: 1,\n          width: 8,\n          height: 16,\n          gripLineGap: 2,\n          gripLineLength: 8\n        }\n      }\n    }\n  }\n}), _a[PolarChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: PolarChart\n  }, chartMeta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      padding: {\n        meta: {\n          constructor: Padding,\n          defaults: {\n            top: 40,\n            right: 40,\n            bottom: 40,\n            left: 40\n          }\n        }\n      }\n    })\n  })\n}, commonChartMappings), {\n  series: (_d = {}, _d[PieSeries.type] = __assign({\n    meta: {\n      constructor: PieSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        angleKey: '',\n        angleName: '',\n        radiusKey: undefined,\n        radiusName: undefined,\n        labelKey: undefined,\n        labelName: undefined,\n        callout: {},\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        rotation: 0,\n        outerRadiusOffset: 0,\n        innerRadiusOffset: 0,\n        strokeWidth: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        shadow: undefined\n      })\n    },\n    highlightStyle: {},\n    title: {\n      meta: {\n        constructor: Caption,\n        defaults: {\n          enabled: true,\n          padding: {\n            meta: {\n              constructor: Padding,\n              defaults: {\n                top: 10,\n                right: 10,\n                bottom: 10,\n                left: 10\n              }\n            }\n          },\n          text: 'Series Title',\n          fontStyle: undefined,\n          fontWeight: 'bold',\n          fontSize: 14,\n          fontFamily: 'Verdana, sans-serif',\n          color: 'black'\n        }\n      }\n    },\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          offset: 3,\n          minAngle: 20\n        })\n      }\n    },\n    callout: {\n      meta: {\n        defaults: {\n          length: 10,\n          strokeWidth: 1\n        }\n      }\n    }\n  }, shadowMapping), _d)\n}), _a); // Amend the `mappings` object with aliases for different chart types.\n\n{\n  var typeToAliases = {\n    cartesian: ['line', 'area', 'bar', 'column'],\n    polar: ['pie']\n  };\n\n  var _loop_1 = function (type) {\n    typeToAliases[type].forEach(function (alias) {\n      mappings[alias] = mappings[type];\n    });\n  };\n\n  for (var type in typeToAliases) {\n    _loop_1(type);\n  }\n} // Special handling for scatter and histogram charts, for which both axes should default to type `number`.\n\nmappings['scatter'] = mappings['histogram'] = __assign(__assign({}, mappings.cartesian), {\n  meta: __assign(__assign({}, mappings.cartesian.meta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      axes: [{\n        type: 'number',\n        position: 'bottom'\n      }, {\n        type: 'number',\n        position: 'left'\n      }]\n    })\n  })\n});\nvar groupedCategoryChartMapping = Object.create(mappings[CartesianChart.type]);\nvar groupedCategoryChartMeta = Object.create(groupedCategoryChartMapping.meta);\ngroupedCategoryChartMeta.constructor = GroupedCategoryChart;\ngroupedCategoryChartMapping.meta = groupedCategoryChartMeta;\nmappings[GroupedCategoryChart.type] = groupedCategoryChartMapping;\nexport default mappings;","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/chart/agChartMappings.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","_a","_b","_c","_d","Padding","CartesianChart","GroupedCategoryChart","NumberAxis","CategoryAxis","GroupedCategoryAxis","LineSeries","BarSeries","HistogramSeries","ScatterSeries","AreaSeries","PolarChart","PieSeries","AxisLabel","AxisTick","TimeAxis","Caption","DropShadow","Legend","LegendPosition","LegendItem","LegendMarker","LegendLabel","Navigator","NavigatorMask","NavigatorHandle","CartesianSeriesMarker","chartPadding","commonChartMappings","background","meta","defaults","visible","fill","padding","constructor","top","right","bottom","left","title","enabled","text","fontStyle","undefined","fontWeight","fontSize","fontFamily","color","subtitle","legend","position","Right","spacing","item","paddingX","paddingY","marker","shape","size","strokeWidth","label","chartDefaults","container","autoSize","width","height","data","navigator","mask","minHandle","maxHandle","listeners","chartMeta","constructorParams","setAsIs","axisDefaults","visibleRange","tick","line","gridStyle","stroke","lineDash","seriesDefaults","showInLegend","columnSeriesDefaults","fillOpacity","strokeOpacity","xKey","xName","yKeys","yNames","grouped","normalizedTo","lineDashOffset","shadow","highlightStyle","shadowMapping","xOffset","yOffset","blur","labelDefaults","barLabelMapping","formatter","axisMappings","rotation","count","mappings","type","axes","series","column","flipXY","yKey","yName","tooltipRenderer","maxSize","sizeKey","labelKey","sizeName","labelName","areaPlot","aggregation","min","max","gripLineGap","gripLineLength","angleKey","angleName","radiusKey","radiusName","callout","outerRadiusOffset","innerRadiusOffset","offset","minAngle","typeToAliases","cartesian","polar","_loop_1","forEach","alias","groupedCategoryChartMapping","create","groupedCategoryChartMeta"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a, _b, _c, _d;\nimport { Padding } from \"../util/padding\";\nimport { CartesianChart } from \"./cartesianChart\";\nimport { GroupedCategoryChart } from \"./groupedCategoryChart\";\nimport { NumberAxis } from \"./axis/numberAxis\";\nimport { CategoryAxis } from \"./axis/categoryAxis\";\nimport { GroupedCategoryAxis } from \"./axis/groupedCategoryAxis\";\nimport { LineSeries } from \"./series/cartesian/lineSeries\";\nimport { BarSeries } from \"./series/cartesian/barSeries\";\nimport { HistogramSeries } from \"./series/cartesian/histogramSeries\";\nimport { ScatterSeries } from \"./series/cartesian/scatterSeries\";\nimport { AreaSeries } from \"./series/cartesian/areaSeries\";\nimport { PolarChart } from \"./polarChart\";\nimport { PieSeries } from \"./series/polar/pieSeries\";\nimport { AxisLabel, AxisTick } from \"../axis\";\nimport { TimeAxis } from \"./axis/timeAxis\";\nimport { Caption } from \"../caption\";\nimport { DropShadow } from \"../scene/dropShadow\";\nimport { Legend, LegendPosition, LegendItem, LegendMarker, LegendLabel } from \"./legend\";\nimport { Navigator } from \"./navigator/navigator\";\nimport { NavigatorMask } from \"./navigator/navigatorMask\";\nimport { NavigatorHandle } from \"./navigator/navigatorHandle\";\nimport { CartesianSeriesMarker } from \"./series/cartesian/cartesianSeries\";\n/*\n    This file defines the specs for creating different kinds of charts, but\n    contains no code that uses the specs to actually create charts\n*/\nvar chartPadding = 20;\nvar commonChartMappings = {\n    background: {\n        meta: {\n            defaults: {\n                visible: true,\n                fill: 'white'\n            }\n        }\n    },\n    padding: {\n        meta: {\n            constructor: Padding,\n            defaults: {\n                top: chartPadding,\n                right: chartPadding,\n                bottom: chartPadding,\n                left: chartPadding\n            }\n        }\n    },\n    title: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: true,\n                padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }\n                    }\n                },\n                text: 'Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 14,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgb(70, 70, 70)'\n            }\n        }\n    },\n    subtitle: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: true,\n                padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }\n                    }\n                },\n                text: 'Subtitle',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgb(140, 140, 140)'\n            }\n        }\n    },\n    legend: {\n        meta: {\n            constructor: Legend,\n            defaults: {\n                enabled: true,\n                position: LegendPosition.Right,\n                spacing: 20\n            }\n        },\n        item: {\n            meta: {\n                constructor: LegendItem,\n                defaults: {\n                    paddingX: 16,\n                    paddingY: 8\n                }\n            },\n            marker: {\n                meta: {\n                    constructor: LegendMarker,\n                    defaults: {\n                        shape: undefined,\n                        size: 15,\n                        strokeWidth: 1,\n                        padding: 8\n                    }\n                }\n            },\n            label: {\n                meta: {\n                    constructor: LegendLabel,\n                    defaults: {\n                        color: 'black',\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: 'Verdana, sans-serif'\n                    }\n                }\n            }\n        }\n    }\n};\nvar chartDefaults = {\n    container: undefined,\n    autoSize: true,\n    width: 600,\n    height: 300,\n    data: [],\n    title: undefined,\n    subtitle: undefined,\n    padding: {},\n    background: {},\n    legend: {\n        item: {\n            marker: {},\n            label: {}\n        }\n    },\n    navigator: {\n        mask: {},\n        minHandle: {},\n        maxHandle: {}\n    },\n    listeners: undefined\n};\nvar chartMeta = {\n    // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything\n    // is configured the same way, via the properties, and makes the factory pattern work well) but the charts\n    // themselves are the exceptions.\n    // If a chart config has the (optional) `document` property, it will be passed to the constructor.\n    // There is no actual `document` property on the chart, it can only be supplied during instantiation.\n    constructorParams: ['document'],\n    setAsIs: ['container', 'data', 'tooltipOffset'],\n};\nvar axisDefaults = {\n    defaults: {\n        visibleRange: [0, 1],\n        label: {},\n        tick: {},\n        title: {},\n        line: {},\n        gridStyle: [{\n                stroke: 'rgb(219, 219, 219)',\n                lineDash: [4, 2]\n            }]\n    }\n};\nvar seriesDefaults = {\n    visible: true,\n    showInLegend: true,\n    listeners: undefined\n};\nvar columnSeriesDefaults = {\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    xKey: '',\n    xName: '',\n    yKeys: [],\n    yNames: [],\n    grouped: false,\n    normalizedTo: undefined,\n    strokeWidth: 1,\n    lineDash: undefined,\n    lineDashOffset: 0,\n    shadow: undefined,\n    highlightStyle: {\n        fill: 'yellow'\n    }\n};\nvar shadowMapping = {\n    shadow: {\n        meta: {\n            constructor: DropShadow,\n            defaults: {\n                enabled: true,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 0,\n                yOffset: 0,\n                blur: 5\n            }\n        }\n    }\n};\nvar labelDefaults = {\n    enabled: true,\n    fontStyle: undefined,\n    fontWeight: undefined,\n    fontSize: 12,\n    fontFamily: 'Verdana, sans-serif',\n    color: 'rgb(70, 70, 70)'\n};\nvar barLabelMapping = {\n    label: {\n        meta: {\n            defaults: __assign(__assign({}, labelDefaults), { formatter: undefined })\n        }\n    }\n};\nvar axisMappings = {\n    line: {\n        meta: {\n            defaults: {\n                width: 1,\n                color: 'rgb(195, 195, 195)'\n            }\n        }\n    },\n    title: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: true,\n                padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }\n                    }\n                },\n                text: 'Axis Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgb(70, 70, 70)'\n            }\n        }\n    },\n    label: {\n        meta: {\n            constructor: AxisLabel,\n            defaults: {\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                padding: 5,\n                rotation: 0,\n                color: 'rgb(87, 87, 87)',\n                formatter: undefined\n            }\n        }\n    },\n    tick: {\n        meta: {\n            constructor: AxisTick,\n            defaults: {\n                width: 1,\n                size: 6,\n                color: 'rgb(195, 195, 195)',\n                count: 10\n            }\n        }\n    }\n};\nvar mappings = (_a = {},\n    _a[CartesianChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: CartesianChart }, chartMeta), { defaults: __assign(__assign({}, chartDefaults), { axes: [{\n                        type: NumberAxis.type,\n                        position: 'left'\n                    }, {\n                        type: CategoryAxis.type,\n                        position: 'bottom'\n                    }] }) }) }, commonChartMappings), { axes: (_b = {},\n            _b[NumberAxis.type] = __assign({ meta: __assign({ constructor: NumberAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[CategoryAxis.type] = __assign({ meta: __assign({ constructor: CategoryAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[GroupedCategoryAxis.type] = __assign({ meta: __assign({ constructor: GroupedCategoryAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[TimeAxis.type] = __assign({ meta: __assign({ constructor: TimeAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b), series: (_c = {\n                column: __assign(__assign({ meta: {\n                        constructor: BarSeries,\n                        defaults: __assign(__assign({ flipXY: false }, seriesDefaults), columnSeriesDefaults)\n                    }, highlightStyle: {} }, barLabelMapping), shadowMapping)\n            },\n            _c[BarSeries.type] = __assign(__assign({ meta: {\n                    constructor: BarSeries,\n                    defaults: __assign(__assign({ flipXY: true }, seriesDefaults), columnSeriesDefaults)\n                }, highlightStyle: {} }, barLabelMapping), shadowMapping),\n            _c[LineSeries.type] = {\n                meta: {\n                    constructor: LineSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', xName: '', yKey: '', yName: '', strokeWidth: 2, strokeOpacity: 1, lineDash: undefined, lineDashOffset: 0, tooltipRenderer: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                },\n                highlightStyle: {},\n                marker: {\n                    meta: {\n                        constructor: CartesianSeriesMarker,\n                        defaults: {\n                            enabled: true,\n                            shape: 'circle',\n                            size: 6,\n                            maxSize: 30,\n                            strokeWidth: 1,\n                            formatter: undefined\n                        }\n                    }\n                }\n            },\n            _c[ScatterSeries.type] = {\n                meta: {\n                    constructor: ScatterSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', yKey: '', sizeKey: undefined, labelKey: undefined, xName: '', yName: '', sizeName: 'Size', labelName: 'Label', strokeWidth: 2, fillOpacity: 1, strokeOpacity: 1, tooltipRenderer: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                },\n                highlightStyle: {},\n                marker: {\n                    meta: {\n                        constructor: CartesianSeriesMarker,\n                        defaults: {\n                            enabled: true,\n                            shape: 'circle',\n                            size: 6,\n                            maxSize: 30,\n                            strokeWidth: 1,\n                            formatter: undefined\n                        }\n                    }\n                }\n            },\n            _c[AreaSeries.type] = __assign({ meta: {\n                    constructor: AreaSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { xKey: '', xName: '', yKeys: [], yNames: [], normalizedTo: undefined, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 2, lineDash: undefined, lineDashOffset: 0, shadow: undefined, tooltipRenderer: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                }, highlightStyle: {}, marker: {\n                    meta: {\n                        constructor: CartesianSeriesMarker,\n                        defaults: {\n                            enabled: true,\n                            shape: 'circle',\n                            size: 6,\n                            maxSize: 30,\n                            strokeWidth: 1,\n                            formatter: undefined\n                        }\n                    }\n                } }, shadowMapping),\n            _c[HistogramSeries.type] = __assign({ meta: {\n                    constructor: HistogramSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', yKey: '', xName: '', yName: '', strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, lineDash: undefined, lineDashOffset: 0, areaPlot: false, aggregation: 'sum', tooltipRenderer: undefined, highlightStyle: {\n                            fill: 'yellow'\n                        } })\n                }, highlightStyle: {}, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { formatter: undefined })\n                    }\n                } }, shadowMapping),\n            _c), navigator: {\n            meta: {\n                constructor: Navigator,\n                defaults: {\n                    enabled: false,\n                    height: 30,\n                    min: 0,\n                    max: 1\n                }\n            },\n            mask: {\n                meta: {\n                    constructor: NavigatorMask,\n                    defaults: {\n                        fill: '#999999',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        fillOpacity: 0.2\n                    }\n                }\n            },\n            minHandle: {\n                meta: {\n                    constructor: NavigatorHandle,\n                    defaults: {\n                        fill: '#f2f2f2',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        width: 8,\n                        height: 16,\n                        gripLineGap: 2,\n                        gripLineLength: 8\n                    }\n                }\n            },\n            maxHandle: {\n                meta: {\n                    constructor: NavigatorHandle,\n                    defaults: {\n                        fill: '#f2f2f2',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        width: 8,\n                        height: 16,\n                        gripLineGap: 2,\n                        gripLineLength: 8\n                    }\n                }\n            }\n        } }),\n    _a[PolarChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: PolarChart }, chartMeta), { defaults: __assign(__assign({}, chartDefaults), { padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 40,\n                            right: 40,\n                            bottom: 40,\n                            left: 40\n                        }\n                    }\n                } }) }) }, commonChartMappings), { series: (_d = {},\n            _d[PieSeries.type] = __assign({ meta: {\n                    constructor: PieSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { title: undefined, angleKey: '', angleName: '', radiusKey: undefined, radiusName: undefined, labelKey: undefined, labelName: undefined, callout: {}, fillOpacity: 1, strokeOpacity: 1, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, strokeWidth: 1, lineDash: undefined, lineDashOffset: 0, shadow: undefined })\n                }, highlightStyle: {}, title: {\n                    meta: {\n                        constructor: Caption,\n                        defaults: {\n                            enabled: true,\n                            padding: {\n                                meta: {\n                                    constructor: Padding,\n                                    defaults: {\n                                        top: 10,\n                                        right: 10,\n                                        bottom: 10,\n                                        left: 10\n                                    }\n                                }\n                            },\n                            text: 'Series Title',\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 14,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'black'\n                        }\n                    }\n                }, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { offset: 3, minAngle: 20 })\n                    }\n                }, callout: {\n                    meta: {\n                        defaults: {\n                            length: 10,\n                            strokeWidth: 1\n                        }\n                    }\n                } }, shadowMapping),\n            _d) }),\n    _a);\n// Amend the `mappings` object with aliases for different chart types.\n{\n    var typeToAliases = {\n        cartesian: ['line', 'area', 'bar', 'column'],\n        polar: ['pie']\n    };\n    var _loop_1 = function (type) {\n        typeToAliases[type].forEach(function (alias) {\n            mappings[alias] = mappings[type];\n        });\n    };\n    for (var type in typeToAliases) {\n        _loop_1(type);\n    }\n}\n// Special handling for scatter and histogram charts, for which both axes should default to type `number`.\nmappings['scatter'] =\n    mappings['histogram'] = __assign(__assign({}, mappings.cartesian), { meta: __assign(__assign({}, mappings.cartesian.meta), { defaults: __assign(__assign({}, chartDefaults), { axes: [{\n                        type: 'number',\n                        position: 'bottom'\n                    }, {\n                        type: 'number',\n                        position: 'left'\n                    }] }) }) });\nvar groupedCategoryChartMapping = Object.create(mappings[CartesianChart.type]);\nvar groupedCategoryChartMeta = Object.create(groupedCategoryChartMapping.meta);\ngroupedCategoryChartMeta.constructor = GroupedCategoryChart;\ngroupedCategoryChartMapping.meta = groupedCategoryChartMeta;\nmappings[GroupedCategoryChart.type] = groupedCategoryChartMapping;\nexport default mappings;\n"]},"metadata":{},"sourceType":"module"}