{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ContinuousScale from \"./continuousScale\";\nimport ticks, { tickIncrement } from \"../util/ticks\";\n/**\n * Maps continuous domain to a continuous range.\n */\n\nvar LinearScale =\n/** @class */\nfunction (_super) {\n  __extends(LinearScale, _super);\n\n  function LinearScale() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LinearScale.prototype.ticks = function (count) {\n    if (count === void 0) {\n      count = 10;\n    }\n\n    var d = this._domain;\n    return ticks(d[0], d[d.length - 1], count);\n  };\n  /**\n   * Extends the domain so that it starts and ends on nice round values.\n   * @param count Tick count.\n   */\n\n\n  LinearScale.prototype.nice = function (count) {\n    if (count === void 0) {\n      count = 10;\n    }\n\n    var d = this.domain;\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var step;\n\n    if (stop < start) {\n      step = start;\n      start = stop;\n      stop = step;\n      step = i0;\n      i0 = i1;\n      i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      this.domain = d;\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      this.domain = d;\n    }\n  };\n\n  return LinearScale;\n}(ContinuousScale);\n\nexport { LinearScale };","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scale/linearScale.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ContinuousScale","ticks","tickIncrement","LinearScale","_super","apply","arguments","count","_domain","length","nice","domain","i0","i1","start","stop","step","Math","floor","ceil"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ContinuousScale from \"./continuousScale\";\nimport ticks, { tickIncrement } from \"../util/ticks\";\n/**\n * Maps continuous domain to a continuous range.\n */\nvar LinearScale = /** @class */ (function (_super) {\n    __extends(LinearScale, _super);\n    function LinearScale() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LinearScale.prototype.ticks = function (count) {\n        if (count === void 0) { count = 10; }\n        var d = this._domain;\n        return ticks(d[0], d[d.length - 1], count);\n    };\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * @param count Tick count.\n     */\n    LinearScale.prototype.nice = function (count) {\n        if (count === void 0) { count = 10; }\n        var d = this.domain;\n        var i0 = 0;\n        var i1 = d.length - 1;\n        var start = d[i0];\n        var stop = d[i1];\n        var step;\n        if (stop < start) {\n            step = start;\n            start = stop;\n            stop = step;\n            step = i0;\n            i0 = i1;\n            i1 = step;\n        }\n        step = tickIncrement(start, stop, count);\n        if (step > 0) {\n            start = Math.floor(start / step) * step;\n            stop = Math.ceil(stop / step) * step;\n            step = tickIncrement(start, stop, count);\n        }\n        else if (step < 0) {\n            start = Math.ceil(start * step) / step;\n            stop = Math.floor(stop * step) / step;\n            step = tickIncrement(start, stop, count);\n        }\n        if (step > 0) {\n            d[i0] = Math.floor(start / step) * step;\n            d[i1] = Math.ceil(stop / step) * step;\n            this.domain = d;\n        }\n        else if (step < 0) {\n            d[i0] = Math.ceil(start * step) / step;\n            d[i1] = Math.floor(stop * step) / step;\n            this.domain = d;\n        }\n    };\n    return LinearScale;\n}(ContinuousScale));\nexport { LinearScale };\n"]},"metadata":{},"sourceType":"module"}