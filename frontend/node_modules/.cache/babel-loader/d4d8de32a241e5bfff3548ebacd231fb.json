{"ast":null,"code":"/**\n * Creates a new object with a `parent` as its prototype\n * and copies properties from the `child` into it.\n * @param parent\n * @param child\n */\nexport function chainObjects(parent, child) {\n  var obj = Object.create(parent);\n\n  for (var prop in child) {\n    if (child.hasOwnProperty(prop)) {\n      obj[prop] = child[prop];\n    }\n  }\n\n  return obj;\n}\nexport function getValue(object, path) {\n  var parts = Array.isArray(path) ? path : path.split('.');\n  var value = object;\n  parts.forEach(function (part) {\n    value = value[part];\n  });\n  return value;\n}\n\nfunction emptyTarget(value) {\n  return Array.isArray(value) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  return options.clone !== false && options.isMergeableObject(value) ? deepMerge(emptyTarget(value), value, options) : value;\n}\n\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options);\n  });\n}\n\nfunction getMergeFunction(key, options) {\n  if (!options.customMerge) {\n    return deepMerge;\n  }\n\n  var customMerge = options.customMerge(key);\n  return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n    return target.propertyIsEnumerable(symbol);\n  }) : [];\n}\n\nfunction getKeys(target) {\n  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object, property) {\n  try {\n    return property in object;\n  } catch (_) {\n    return false;\n  }\n} // Protects from prototype poisoning and unexpected merging up the prototype chain.\n\n\nfunction propertyIsUnsafe(target, key) {\n  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n  var destination = {};\n\n  if (options.isMergeableObject(target)) {\n    getKeys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n\n  getKeys(source).forEach(function (key) {\n    if (propertyIsUnsafe(target, key)) {\n      return;\n    }\n\n    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n    } else {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    }\n  });\n  return destination;\n}\n\nfunction defaultIsMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n}\n\nfunction isNonNullObject(value) {\n  return !!value && typeof value === 'object';\n}\n\nfunction isSpecial(value) {\n  var stringValue = Object.prototype.toString.call(value);\n  return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\n\nexport function deepMerge(target, source, options) {\n  options = options || {};\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n  // implementations can use it. The caller may not replace it.\n\n  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n  var sourceIsArray = Array.isArray(source);\n  var targetIsArray = Array.isArray(target);\n  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  } else {\n    return mergeObject(target, source, options);\n  }\n}\nexport function isObject(value) {\n  return typeof value === 'object' && !Array.isArray(value);\n}","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/util/object.js"],"names":["chainObjects","parent","child","obj","Object","create","prop","hasOwnProperty","getValue","object","path","parts","Array","isArray","split","value","forEach","part","emptyTarget","cloneUnlessOtherwiseSpecified","options","clone","isMergeableObject","deepMerge","defaultArrayMerge","target","source","concat","map","element","getMergeFunction","key","customMerge","getEnumerableOwnPropertySymbols","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getKeys","keys","propertyIsOnObject","property","_","propertyIsUnsafe","call","mergeObject","destination","defaultIsMergeableObject","isNonNullObject","isSpecial","stringValue","prototype","toString","arrayMerge","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","isObject"],"mappings":"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","sourcesContent":["/**\n * Creates a new object with a `parent` as its prototype\n * and copies properties from the `child` into it.\n * @param parent\n * @param child\n */\nexport function chainObjects(parent, child) {\n    var obj = Object.create(parent);\n    for (var prop in child) {\n        if (child.hasOwnProperty(prop)) {\n            obj[prop] = child[prop];\n        }\n    }\n    return obj;\n}\nexport function getValue(object, path) {\n    var parts = Array.isArray(path) ? path : path.split('.');\n    var value = object;\n    parts.forEach(function (part) {\n        value = value[part];\n    });\n    return value;\n}\nfunction emptyTarget(value) {\n    return Array.isArray(value) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return (options.clone !== false && options.isMergeableObject(value))\n        ? deepMerge(emptyTarget(value), value, options)\n        : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function (element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepMerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols\n        ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n            return target.propertyIsEnumerable(symbol);\n        })\n        : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    }\n    catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n        && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n            && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\nfunction mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function (key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function (key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        }\n        else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction defaultIsMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n}\nfunction isNonNullObject(value) {\n    return !!value && typeof value === 'object';\n}\nfunction isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\nexport function deepMerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    }\n    else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    }\n    else {\n        return mergeObject(target, source, options);\n    }\n}\nexport function isObject(value) {\n    return typeof value === 'object' && !Array.isArray(value);\n}\n"]},"metadata":{},"sourceType":"module"}