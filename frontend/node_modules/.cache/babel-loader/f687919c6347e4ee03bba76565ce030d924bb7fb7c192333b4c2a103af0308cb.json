{"ast":null,"code":"import interpolateValue from \"../interpolate/value\";\nimport interpolateNumber from \"../interpolate/number\";\nexport var constant = function (x) {\n  return function () {\n    return x;\n  };\n};\nexport var identity = function (x) {\n  return x;\n};\nfunction clamper(domain) {\n  var _a;\n  var a = domain[0];\n  var b = domain[domain.length - 1];\n  if (a > b) {\n    _a = [b, a], a = _a[0], b = _a[1];\n  }\n  return function (x) {\n    return Math.max(a, Math.min(b, x));\n  };\n}\nvar ContinuousScale = /** @class */function () {\n  function ContinuousScale() {\n    /**\n     * The output value of the scale for `undefined` or `NaN` input values.\n     */\n    this.unknown = undefined;\n    this._clamp = identity;\n    this._domain = [0, 1];\n    this._range = [0, 1];\n    this.transform = identity; // transforms domain value\n    this.untransform = identity; // untransforms domain value\n    this._interpolate = interpolateValue;\n    this.rescale();\n  }\n  Object.defineProperty(ContinuousScale.prototype, \"clamp\", {\n    get: function () {\n      return this._clamp !== identity;\n    },\n    set: function (value) {\n      this._clamp = value ? clamper(this.domain) : identity;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ContinuousScale.prototype.setDomain = function (values) {\n    this._domain = Array.prototype.map.call(values, function (v) {\n      return +v;\n    });\n    if (this._clamp !== identity) {\n      this._clamp = clamper(this.domain);\n    }\n    this.rescale();\n  };\n  ContinuousScale.prototype.getDomain = function () {\n    return this._domain.slice();\n  };\n  Object.defineProperty(ContinuousScale.prototype, \"domain\", {\n    get: function () {\n      return this.getDomain();\n    },\n    set: function (values) {\n      this.setDomain(values);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContinuousScale.prototype, \"range\", {\n    get: function () {\n      return this._range.slice();\n    },\n    set: function (values) {\n      this._range = Array.prototype.slice.call(values);\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContinuousScale.prototype, \"interpolate\", {\n    get: function () {\n      return this._interpolate;\n    },\n    set: function (value) {\n      this._interpolate = value;\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ContinuousScale.prototype.rescale = function () {\n    if (Math.min(this.domain.length, this.range.length) > 2) {\n      // this.piecewise = this.polymap;\n    } else {\n      this.piecewise = this.bimap;\n    }\n    this.output = undefined;\n    this.input = undefined;\n  };\n  /**\n   * Returns a function that converts `x` in `[a, b]` to `t` in `[0, 1]`. Non-clamping.\n   * @param a\n   * @param b\n   */\n  ContinuousScale.prototype.normalize = function (a, b) {\n    return (b -= a = +a) ? function (x) {\n      return (x - a) / b;\n    } : constant(isNaN(b) ? NaN : 0.5);\n  };\n  ContinuousScale.prototype.bimap = function (domain, range, interpolate) {\n    var x0 = domain[0];\n    var x1 = domain[1];\n    var y0 = range[0];\n    var y1 = range[1];\n    var xt;\n    var ty;\n    if (x1 < x0) {\n      xt = this.normalize(x1, x0);\n      ty = interpolate(y1, y0);\n    } else {\n      xt = this.normalize(x0, x1);\n      ty = interpolate(y0, y1);\n    }\n    return function (x) {\n      return ty(xt(x));\n    }; // domain value x --> t in [0, 1] --> range value y\n  };\n  // private polymap(domain: any[], range: any[], interpolate: (a: any, b: any) => (t: number) => any): Reinterpolator<any> {\n  //     // number of segments in the polylinear scale\n  //     const n = Math.min(domain.length, range.length) - 1;\n  //     if (domain[n] < domain[0]) {\n  //         domain = domain.slice().reverse();\n  //         range = range.slice().reverse();\n  //     }\n  //     // deinterpolators from domain segment value to t\n  //     const dt = Array.from( {length: n}, (_, i) => this.normalize(domain[i], domain[i+1]) );\n  //     // reinterpolators from t to range segment value\n  //     const tr = Array.from( {length: n}, (_, i) => interpolate(range[i], range[i+1]) );\n  //     return (x) => {\n  //         const i = bisectRight(domain, x, ascending, 1, n) - 1; // Find the domain segment that `x` belongs to.\n  //         // This also tells us which deinterpolator/reinterpolator pair to use.\n  //         return tr[i](dt[i](x));\n  //     };\n  // }\n  ContinuousScale.prototype.convert = function (x) {\n    x = +x;\n    if (isNaN(x)) {\n      return this.unknown;\n    } else {\n      if (!this.output) {\n        this.output = this.piecewise(this.domain.map(this.transform), this.range, this.interpolate);\n      }\n      return this.output(this.transform(this._clamp(x)));\n    }\n  };\n  ContinuousScale.prototype.invert = function (y) {\n    if (!this.input) {\n      this.input = this.piecewise(this.range, this.domain.map(this.transform), interpolateNumber);\n    }\n    return this._clamp(this.untransform(this.input(y)));\n  };\n  return ContinuousScale;\n}();\nexport default ContinuousScale;","map":{"version":3,"names":["interpolateValue","interpolateNumber","constant","x","identity","clamper","domain","_a","a","b","length","Math","max","min","ContinuousScale","unknown","undefined","_clamp","_domain","_range","transform","untransform","_interpolate","rescale","Object","defineProperty","prototype","get","set","value","enumerable","configurable","setDomain","values","Array","map","call","v","getDomain","slice","range","piecewise","bimap","output","input","normalize","isNaN","NaN","interpolate","x0","x1","y0","y1","xt","ty","convert","invert","y"],"sources":["C:/Users/avnis/Documents/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scale/continuousScale.js"],"sourcesContent":["import interpolateValue from \"../interpolate/value\";\nimport interpolateNumber from \"../interpolate/number\";\nexport var constant = function (x) { return function () { return x; }; };\nexport var identity = function (x) { return x; };\nfunction clamper(domain) {\n    var _a;\n    var a = domain[0];\n    var b = domain[domain.length - 1];\n    if (a > b) {\n        _a = [b, a], a = _a[0], b = _a[1];\n    }\n    return function (x) { return Math.max(a, Math.min(b, x)); };\n}\nvar ContinuousScale = /** @class */ (function () {\n    function ContinuousScale() {\n        /**\n         * The output value of the scale for `undefined` or `NaN` input values.\n         */\n        this.unknown = undefined;\n        this._clamp = identity;\n        this._domain = [0, 1];\n        this._range = [0, 1];\n        this.transform = identity; // transforms domain value\n        this.untransform = identity; // untransforms domain value\n        this._interpolate = interpolateValue;\n        this.rescale();\n    }\n    Object.defineProperty(ContinuousScale.prototype, \"clamp\", {\n        get: function () {\n            return this._clamp !== identity;\n        },\n        set: function (value) {\n            this._clamp = value ? clamper(this.domain) : identity;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContinuousScale.prototype.setDomain = function (values) {\n        this._domain = Array.prototype.map.call(values, function (v) { return +v; });\n        if (this._clamp !== identity) {\n            this._clamp = clamper(this.domain);\n        }\n        this.rescale();\n    };\n    ContinuousScale.prototype.getDomain = function () {\n        return this._domain.slice();\n    };\n    Object.defineProperty(ContinuousScale.prototype, \"domain\", {\n        get: function () {\n            return this.getDomain();\n        },\n        set: function (values) {\n            this.setDomain(values);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContinuousScale.prototype, \"range\", {\n        get: function () {\n            return this._range.slice();\n        },\n        set: function (values) {\n            this._range = Array.prototype.slice.call(values);\n            this.rescale();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContinuousScale.prototype, \"interpolate\", {\n        get: function () {\n            return this._interpolate;\n        },\n        set: function (value) {\n            this._interpolate = value;\n            this.rescale();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContinuousScale.prototype.rescale = function () {\n        if (Math.min(this.domain.length, this.range.length) > 2) {\n            // this.piecewise = this.polymap;\n        }\n        else {\n            this.piecewise = this.bimap;\n        }\n        this.output = undefined;\n        this.input = undefined;\n    };\n    /**\n     * Returns a function that converts `x` in `[a, b]` to `t` in `[0, 1]`. Non-clamping.\n     * @param a\n     * @param b\n     */\n    ContinuousScale.prototype.normalize = function (a, b) {\n        return (b -= (a = +a))\n            ? function (x) { return (x - a) / b; }\n            : constant(isNaN(b) ? NaN : 0.5);\n    };\n    ContinuousScale.prototype.bimap = function (domain, range, interpolate) {\n        var x0 = domain[0];\n        var x1 = domain[1];\n        var y0 = range[0];\n        var y1 = range[1];\n        var xt;\n        var ty;\n        if (x1 < x0) {\n            xt = this.normalize(x1, x0);\n            ty = interpolate(y1, y0);\n        }\n        else {\n            xt = this.normalize(x0, x1);\n            ty = interpolate(y0, y1);\n        }\n        return function (x) { return ty(xt(x)); }; // domain value x --> t in [0, 1] --> range value y\n    };\n    // private polymap(domain: any[], range: any[], interpolate: (a: any, b: any) => (t: number) => any): Reinterpolator<any> {\n    //     // number of segments in the polylinear scale\n    //     const n = Math.min(domain.length, range.length) - 1;\n    //     if (domain[n] < domain[0]) {\n    //         domain = domain.slice().reverse();\n    //         range = range.slice().reverse();\n    //     }\n    //     // deinterpolators from domain segment value to t\n    //     const dt = Array.from( {length: n}, (_, i) => this.normalize(domain[i], domain[i+1]) );\n    //     // reinterpolators from t to range segment value\n    //     const tr = Array.from( {length: n}, (_, i) => interpolate(range[i], range[i+1]) );\n    //     return (x) => {\n    //         const i = bisectRight(domain, x, ascending, 1, n) - 1; // Find the domain segment that `x` belongs to.\n    //         // This also tells us which deinterpolator/reinterpolator pair to use.\n    //         return tr[i](dt[i](x));\n    //     };\n    // }\n    ContinuousScale.prototype.convert = function (x) {\n        x = +x;\n        if (isNaN(x)) {\n            return this.unknown;\n        }\n        else {\n            if (!this.output) {\n                this.output = this.piecewise(this.domain.map(this.transform), this.range, this.interpolate);\n            }\n            return this.output(this.transform(this._clamp(x)));\n        }\n    };\n    ContinuousScale.prototype.invert = function (y) {\n        if (!this.input) {\n            this.input = this.piecewise(this.range, this.domain.map(this.transform), interpolateNumber);\n        }\n        return this._clamp(this.untransform(this.input(y)));\n    };\n    return ContinuousScale;\n}());\nexport default ContinuousScale;\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,sBAAsB;AACnD,OAAOC,iBAAiB,MAAM,uBAAuB;AACrD,OAAO,IAAIC,QAAQ,GAAG,UAAUC,CAAC,EAAE;EAAE,OAAO,YAAY;IAAE,OAAOA,CAAC;EAAE,CAAC;AAAE,CAAC;AACxE,OAAO,IAAIC,QAAQ,GAAG,UAAUD,CAAC,EAAE;EAAE,OAAOA,CAAC;AAAE,CAAC;AAChD,SAASE,OAAO,CAACC,MAAM,EAAE;EACrB,IAAIC,EAAE;EACN,IAAIC,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC;EACjB,IAAIG,CAAC,GAAGH,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;EACjC,IAAIF,CAAC,GAAGC,CAAC,EAAE;IACPF,EAAE,GAAG,CAACE,CAAC,EAAED,CAAC,CAAC,EAAEA,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAEE,CAAC,GAAGF,EAAE,CAAC,CAAC,CAAC;EACrC;EACA,OAAO,UAAUJ,CAAC,EAAE;IAAE,OAAOQ,IAAI,CAACC,GAAG,CAACJ,CAAC,EAAEG,IAAI,CAACE,GAAG,CAACJ,CAAC,EAAEN,CAAC,CAAC,CAAC;EAAE,CAAC;AAC/D;AACA,IAAIW,eAAe,GAAG,aAAe,YAAY;EAC7C,SAASA,eAAe,GAAG;IACvB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAGC,SAAS;IACxB,IAAI,CAACC,MAAM,GAAGb,QAAQ;IACtB,IAAI,CAACc,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACpB,IAAI,CAACC,SAAS,GAAGhB,QAAQ,CAAC,CAAC;IAC3B,IAAI,CAACiB,WAAW,GAAGjB,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAACkB,YAAY,GAAGtB,gBAAgB;IACpC,IAAI,CAACuB,OAAO,EAAE;EAClB;EACAC,MAAM,CAACC,cAAc,CAACX,eAAe,CAACY,SAAS,EAAE,OAAO,EAAE;IACtDC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACV,MAAM,KAAKb,QAAQ;IACnC,CAAC;IACDwB,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACZ,MAAM,GAAGY,KAAK,GAAGxB,OAAO,CAAC,IAAI,CAACC,MAAM,CAAC,GAAGF,QAAQ;IACzD,CAAC;IACD0B,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,eAAe,CAACY,SAAS,CAACM,SAAS,GAAG,UAAUC,MAAM,EAAE;IACpD,IAAI,CAACf,OAAO,GAAGgB,KAAK,CAACR,SAAS,CAACS,GAAG,CAACC,IAAI,CAACH,MAAM,EAAE,UAAUI,CAAC,EAAE;MAAE,OAAO,CAACA,CAAC;IAAE,CAAC,CAAC;IAC5E,IAAI,IAAI,CAACpB,MAAM,KAAKb,QAAQ,EAAE;MAC1B,IAAI,CAACa,MAAM,GAAGZ,OAAO,CAAC,IAAI,CAACC,MAAM,CAAC;IACtC;IACA,IAAI,CAACiB,OAAO,EAAE;EAClB,CAAC;EACDT,eAAe,CAACY,SAAS,CAACY,SAAS,GAAG,YAAY;IAC9C,OAAO,IAAI,CAACpB,OAAO,CAACqB,KAAK,EAAE;EAC/B,CAAC;EACDf,MAAM,CAACC,cAAc,CAACX,eAAe,CAACY,SAAS,EAAE,QAAQ,EAAE;IACvDC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACW,SAAS,EAAE;IAC3B,CAAC;IACDV,GAAG,EAAE,UAAUK,MAAM,EAAE;MACnB,IAAI,CAACD,SAAS,CAACC,MAAM,CAAC;IAC1B,CAAC;IACDH,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACX,eAAe,CAACY,SAAS,EAAE,OAAO,EAAE;IACtDC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACR,MAAM,CAACoB,KAAK,EAAE;IAC9B,CAAC;IACDX,GAAG,EAAE,UAAUK,MAAM,EAAE;MACnB,IAAI,CAACd,MAAM,GAAGe,KAAK,CAACR,SAAS,CAACa,KAAK,CAACH,IAAI,CAACH,MAAM,CAAC;MAChD,IAAI,CAACV,OAAO,EAAE;IAClB,CAAC;IACDO,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACX,eAAe,CAACY,SAAS,EAAE,aAAa,EAAE;IAC5DC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACL,YAAY;IAC5B,CAAC;IACDM,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACP,YAAY,GAAGO,KAAK;MACzB,IAAI,CAACN,OAAO,EAAE;IAClB,CAAC;IACDO,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,eAAe,CAACY,SAAS,CAACH,OAAO,GAAG,YAAY;IAC5C,IAAIZ,IAAI,CAACE,GAAG,CAAC,IAAI,CAACP,MAAM,CAACI,MAAM,EAAE,IAAI,CAAC8B,KAAK,CAAC9B,MAAM,CAAC,GAAG,CAAC,EAAE;MACrD;IAAA,CACH,MACI;MACD,IAAI,CAAC+B,SAAS,GAAG,IAAI,CAACC,KAAK;IAC/B;IACA,IAAI,CAACC,MAAM,GAAG3B,SAAS;IACvB,IAAI,CAAC4B,KAAK,GAAG5B,SAAS;EAC1B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIF,eAAe,CAACY,SAAS,CAACmB,SAAS,GAAG,UAAUrC,CAAC,EAAEC,CAAC,EAAE;IAClD,OAAO,CAACA,CAAC,IAAKD,CAAC,GAAG,CAACA,CAAE,IACf,UAAUL,CAAC,EAAE;MAAE,OAAO,CAACA,CAAC,GAAGK,CAAC,IAAIC,CAAC;IAAE,CAAC,GACpCP,QAAQ,CAAC4C,KAAK,CAACrC,CAAC,CAAC,GAAGsC,GAAG,GAAG,GAAG,CAAC;EACxC,CAAC;EACDjC,eAAe,CAACY,SAAS,CAACgB,KAAK,GAAG,UAAUpC,MAAM,EAAEkC,KAAK,EAAEQ,WAAW,EAAE;IACpE,IAAIC,EAAE,GAAG3C,MAAM,CAAC,CAAC,CAAC;IAClB,IAAI4C,EAAE,GAAG5C,MAAM,CAAC,CAAC,CAAC;IAClB,IAAI6C,EAAE,GAAGX,KAAK,CAAC,CAAC,CAAC;IACjB,IAAIY,EAAE,GAAGZ,KAAK,CAAC,CAAC,CAAC;IACjB,IAAIa,EAAE;IACN,IAAIC,EAAE;IACN,IAAIJ,EAAE,GAAGD,EAAE,EAAE;MACTI,EAAE,GAAG,IAAI,CAACR,SAAS,CAACK,EAAE,EAAED,EAAE,CAAC;MAC3BK,EAAE,GAAGN,WAAW,CAACI,EAAE,EAAED,EAAE,CAAC;IAC5B,CAAC,MACI;MACDE,EAAE,GAAG,IAAI,CAACR,SAAS,CAACI,EAAE,EAAEC,EAAE,CAAC;MAC3BI,EAAE,GAAGN,WAAW,CAACG,EAAE,EAAEC,EAAE,CAAC;IAC5B;IACA,OAAO,UAAUjD,CAAC,EAAE;MAAE,OAAOmD,EAAE,CAACD,EAAE,CAAClD,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC;EAC/C,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAW,eAAe,CAACY,SAAS,CAAC6B,OAAO,GAAG,UAAUpD,CAAC,EAAE;IAC7CA,CAAC,GAAG,CAACA,CAAC;IACN,IAAI2C,KAAK,CAAC3C,CAAC,CAAC,EAAE;MACV,OAAO,IAAI,CAACY,OAAO;IACvB,CAAC,MACI;MACD,IAAI,CAAC,IAAI,CAAC4B,MAAM,EAAE;QACd,IAAI,CAACA,MAAM,GAAG,IAAI,CAACF,SAAS,CAAC,IAAI,CAACnC,MAAM,CAAC6B,GAAG,CAAC,IAAI,CAACf,SAAS,CAAC,EAAE,IAAI,CAACoB,KAAK,EAAE,IAAI,CAACQ,WAAW,CAAC;MAC/F;MACA,OAAO,IAAI,CAACL,MAAM,CAAC,IAAI,CAACvB,SAAS,CAAC,IAAI,CAACH,MAAM,CAACd,CAAC,CAAC,CAAC,CAAC;IACtD;EACJ,CAAC;EACDW,eAAe,CAACY,SAAS,CAAC8B,MAAM,GAAG,UAAUC,CAAC,EAAE;IAC5C,IAAI,CAAC,IAAI,CAACb,KAAK,EAAE;MACb,IAAI,CAACA,KAAK,GAAG,IAAI,CAACH,SAAS,CAAC,IAAI,CAACD,KAAK,EAAE,IAAI,CAAClC,MAAM,CAAC6B,GAAG,CAAC,IAAI,CAACf,SAAS,CAAC,EAAEnB,iBAAiB,CAAC;IAC/F;IACA,OAAO,IAAI,CAACgB,MAAM,CAAC,IAAI,CAACI,WAAW,CAAC,IAAI,CAACuB,KAAK,CAACa,CAAC,CAAC,CAAC,CAAC;EACvD,CAAC;EACD,OAAO3C,eAAe;AAC1B,CAAC,EAAG;AACJ,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}