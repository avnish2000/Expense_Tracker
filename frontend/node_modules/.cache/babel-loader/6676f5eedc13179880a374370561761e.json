{"ast":null,"code":"export function isEqual(a, b, epsilon) {\n  if (epsilon === void 0) {\n    epsilon = 1e-10;\n  }\n\n  return Math.abs(a - b) < epsilon;\n}\n/**\n * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.\n * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.\n * That's not very helpful, because all the meaningful information is lost.\n * In this case we would want the formatted value to have at least two significant digits: `0.000034`,\n * not two fraction digits.\n * @param value\n * @param fractionOrSignificantDigits\n */\n\nexport function toFixed(value, fractionOrSignificantDigits) {\n  if (fractionOrSignificantDigits === void 0) {\n    fractionOrSignificantDigits = 2;\n  }\n\n  var power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n\n  if (power >= 0 || !isFinite(power)) {\n    return value.toFixed(fractionOrSignificantDigits); // fraction digits\n  }\n\n  return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits\n}\nvar numberUnits = [\"\", \"K\", \"M\", \"B\", \"T\"];\nexport function log10(x) {\n  return Math.log(x) * Math.LOG10E;\n}\nexport function toReadableNumber(value, fractionDigits) {\n  if (fractionDigits === void 0) {\n    fractionDigits = 2;\n  } // For example: toReadableNumber(10550000000) yields \"10.6B\"\n\n\n  var prefix = '';\n\n  if (value <= 0) {\n    value = -value;\n    prefix = '-';\n  }\n\n  var thousands = ~~(log10(value) / log10(1000)); // discard the floating point part\n\n  return prefix + (value / Math.pow(1000.0, thousands)).toFixed(fractionDigits) + numberUnits[thousands];\n}","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/util/number.js"],"names":["isEqual","a","b","epsilon","Math","abs","toFixed","value","fractionOrSignificantDigits","power","floor","log","LN10","isFinite","numberUnits","log10","x","LOG10E","toReadableNumber","fractionDigits","prefix","thousands","pow"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,OAAvB,EAAgC;AACnC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,KAAV;AAAkB;;AAC5C,SAAOC,IAAI,CAACC,GAAL,CAASJ,CAAC,GAAGC,CAAb,IAAkBC,OAAzB;AACH;AACD;;;;;;;;;;AASA,OAAO,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,2BAAxB,EAAqD;AACxD,MAAIA,2BAA2B,KAAK,KAAK,CAAzC,EAA4C;AAAEA,IAAAA,2BAA2B,GAAG,CAA9B;AAAkC;;AAChF,MAAIC,KAAK,GAAGL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACO,GAAL,CAASP,IAAI,CAACC,GAAL,CAASE,KAAT,CAAT,IAA4BH,IAAI,CAACQ,IAA5C,CAAZ;;AACA,MAAIH,KAAK,IAAI,CAAT,IAAc,CAACI,QAAQ,CAACJ,KAAD,CAA3B,EAAoC;AAChC,WAAOF,KAAK,CAACD,OAAN,CAAcE,2BAAd,CAAP,CADgC,CACmB;AACtD;;AACD,SAAOD,KAAK,CAACD,OAAN,CAAcF,IAAI,CAACC,GAAL,CAASI,KAAT,IAAkB,CAAlB,GAAsBD,2BAApC,CAAP,CANwD,CAMiB;AAC5E;AACD,IAAIM,WAAW,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAlB;AACA,OAAO,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACrB,SAAOZ,IAAI,CAACO,GAAL,CAASK,CAAT,IAAcZ,IAAI,CAACa,MAA1B;AACH;AACD,OAAO,SAASC,gBAAT,CAA0BX,KAA1B,EAAiCY,cAAjC,EAAiD;AACpD,MAAIA,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,IAAAA,cAAc,GAAG,CAAjB;AAAqB,GADF,CAEpD;;;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIb,KAAK,IAAI,CAAb,EAAgB;AACZA,IAAAA,KAAK,GAAG,CAACA,KAAT;AACAa,IAAAA,MAAM,GAAG,GAAT;AACH;;AACD,MAAIC,SAAS,GAAG,CAAC,EAAEN,KAAK,CAACR,KAAD,CAAL,GAAeQ,KAAK,CAAC,IAAD,CAAtB,CAAjB,CARoD,CAQJ;;AAChD,SAAOK,MAAM,GAAG,CAACb,KAAK,GAAGH,IAAI,CAACkB,GAAL,CAAS,MAAT,EAAiBD,SAAjB,CAAT,EAAsCf,OAAtC,CAA8Ca,cAA9C,CAAT,GAAyEL,WAAW,CAACO,SAAD,CAA3F;AACH","sourcesContent":["export function isEqual(a, b, epsilon) {\n    if (epsilon === void 0) { epsilon = 1e-10; }\n    return Math.abs(a - b) < epsilon;\n}\n/**\n * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.\n * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.\n * That's not very helpful, because all the meaningful information is lost.\n * In this case we would want the formatted value to have at least two significant digits: `0.000034`,\n * not two fraction digits.\n * @param value\n * @param fractionOrSignificantDigits\n */\nexport function toFixed(value, fractionOrSignificantDigits) {\n    if (fractionOrSignificantDigits === void 0) { fractionOrSignificantDigits = 2; }\n    var power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n    if (power >= 0 || !isFinite(power)) {\n        return value.toFixed(fractionOrSignificantDigits); // fraction digits\n    }\n    return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits\n}\nvar numberUnits = [\"\", \"K\", \"M\", \"B\", \"T\"];\nexport function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n}\nexport function toReadableNumber(value, fractionDigits) {\n    if (fractionDigits === void 0) { fractionDigits = 2; }\n    // For example: toReadableNumber(10550000000) yields \"10.6B\"\n    var prefix = '';\n    if (value <= 0) {\n        value = -value;\n        prefix = '-';\n    }\n    var thousands = ~~(log10(value) / log10(1000)); // discard the floating point part\n    return prefix + (value / Math.pow(1000.0, thousands)).toFixed(fractionDigits) + numberUnits[thousands];\n}\n"]},"metadata":{},"sourceType":"module"}