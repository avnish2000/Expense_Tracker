{"ast":null,"code":"var Color = /** @class */function () {\n  /**\n   * Every color component should be in the [0, 1] range.\n   * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n   * So, when animating colors, if the source or target color components are already near\n   * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n   * component value to end up outside of that range mid-animation. For this reason the constructor\n   * performs range checking/constraining.\n   * @param r Red component.\n   * @param g Green component.\n   * @param b Blue component.\n   * @param a Alpha (opacity) component.\n   */\n  function Color(r, g, b, a) {\n    if (a === void 0) {\n      a = 1;\n    }\n    // NaN is treated as 0.\n    this.r = Math.min(1, Math.max(0, r || 0));\n    this.g = Math.min(1, Math.max(0, g || 0));\n    this.b = Math.min(1, Math.max(0, b || 0));\n    this.a = Math.min(1, Math.max(0, a || 0));\n  }\n  /**\n   * The given string can be in one of the following formats:\n   * - #rgb\n   * - #rrggbb\n   * - rgb(r, g, b)\n   * - rgba(r, g, b, a)\n   * - CSS color name such as 'white', 'orange', 'cyan', etc.\n   * @param str\n   */\n  Color.fromString = function (str) {\n    // hexadecimal notation\n    if (str.indexOf('#') >= 0) {\n      // there can be some leading whitespace\n      return Color.fromHexString(str);\n    }\n    // color name\n    var hex = Color.nameToHex[str];\n    if (hex) {\n      return Color.fromHexString(hex);\n    }\n    // rgb(a) notation\n    if (str.indexOf('rgb') >= 0) {\n      return Color.fromRgbaString(str);\n    }\n    throw new Error(\"Invalid color string: '\" + str + \"'\");\n  };\n  // Using separate RegExp for the short hex notation because strings like `#abcd`\n  // are matched as ['#abcd', 'ab', 'c', 'd', undefined] when the `{1,2}` quantifier is used.\n  Color.fromHexString = function (str) {\n    var values = str.match(Color.hexRe);\n    if (values) {\n      var r = parseInt(values[1], 16);\n      var g = parseInt(values[2], 16);\n      var b = parseInt(values[3], 16);\n      var a = values[4] !== undefined ? parseInt(values[4], 16) : 255;\n      return new Color(r / 255, g / 255, b / 255, a / 255);\n    }\n    values = str.match(Color.shortHexRe);\n    if (values) {\n      var r = parseInt(values[1], 16);\n      var g = parseInt(values[2], 16);\n      var b = parseInt(values[3], 16);\n      var a = values[4] !== undefined ? parseInt(values[4], 16) : 15;\n      r += r * 16;\n      g += g * 16;\n      b += b * 16;\n      a += a * 16;\n      return new Color(r / 255, g / 255, b / 255, a / 255);\n    }\n    throw new Error(\"Malformed hexadecimal color string: '\" + str + \"'\");\n  };\n  Color.fromRgbaString = function (str) {\n    var values = str.match(Color.rgbRe);\n    if (values) {\n      return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255);\n    }\n    values = str.match(Color.rgbaRe);\n    if (values) {\n      return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255, +values[4]);\n    }\n    throw new Error(\"Malformed rgb/rgba color string: '\" + str + \"'\");\n  };\n  Color.fromArray = function (arr) {\n    if (arr.length === 4) {\n      return new Color(arr[0], arr[1], arr[2], arr[3]);\n    }\n    if (arr.length === 3) {\n      return new Color(arr[0], arr[1], arr[2]);\n    }\n    throw new Error('The given array should contain 3 or 4 color components (numbers).');\n  };\n  Color.fromHSB = function (h, s, b, alpha) {\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n    var rgb = Color.HSBtoRGB(h, s, b);\n    return new Color(rgb[0], rgb[1], rgb[2], alpha);\n  };\n  Color.padHex = function (str) {\n    // Can't use `padStart(2, '0')` here because of IE.\n    return str.length === 1 ? '0' + str : str;\n  };\n  Color.prototype.toHexString = function () {\n    var hex = '#' + Color.padHex(Math.round(this.r * 255).toString(16)) + Color.padHex(Math.round(this.g * 255).toString(16)) + Color.padHex(Math.round(this.b * 255).toString(16));\n    if (this.a < 1) {\n      hex += Color.padHex(Math.round(this.a * 255).toString(16));\n    }\n    return hex;\n  };\n  Color.prototype.toRgbaString = function (fractionDigits) {\n    if (fractionDigits === void 0) {\n      fractionDigits = 3;\n    }\n    var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];\n    var k = Math.pow(10, fractionDigits);\n    if (this.a !== 1) {\n      components.push(Math.round(this.a * k) / k);\n      return \"rgba(\" + components.join(', ') + \")\";\n    }\n    return \"rgb(\" + components.join(', ') + \")\";\n  };\n  Color.prototype.toString = function () {\n    if (this.a === 1) {\n      return this.toHexString();\n    }\n    return this.toRgbaString();\n  };\n  Color.prototype.toHSB = function () {\n    return Color.RGBtoHSB(this.r, this.g, this.b);\n  };\n  /**\n   * Converts the given RGB triple to an array of HSB (HSV) components.\n   * The hue component will be `NaN` for achromatic colors.\n   */\n  Color.RGBtoHSB = function (r, g, b) {\n    var min = Math.min(r, g, b);\n    var max = Math.max(r, g, b);\n    var S = max !== 0 ? (max - min) / max : 0;\n    var H = NaN;\n    // min == max, means all components are the same\n    // and the color is a shade of gray with no hue (H is NaN)\n    if (min !== max) {\n      var delta = max - min;\n      var rc = (max - r) / delta;\n      var gc = (max - g) / delta;\n      var bc = (max - b) / delta;\n      if (r === max) {\n        H = bc - gc;\n      } else if (g === max) {\n        H = 2.0 + rc - bc;\n      } else {\n        H = 4.0 + gc - rc;\n      }\n      H /= 6.0;\n      if (H < 0) {\n        H = H + 1.0;\n      }\n    }\n    return [H * 360, S, max];\n  };\n  /**\n   * Converts the given HSB (HSV) triple to an array of RGB components.\n   */\n  Color.HSBtoRGB = function (H, S, B) {\n    if (isNaN(H)) {\n      H = 0;\n    }\n    H = (H % 360 + 360) % 360 / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    if (S === 0) {\n      r = g = b = B;\n    } else {\n      var h = (H - Math.floor(H)) * 6;\n      var f = h - Math.floor(h);\n      var p = B * (1 - S);\n      var q = B * (1 - S * f);\n      var t = B * (1 - S * (1 - f));\n      switch (h >> 0) {\n        // discard the floating point part of the number\n        case 0:\n          r = B;\n          g = t;\n          b = p;\n          break;\n        case 1:\n          r = q;\n          g = B;\n          b = p;\n          break;\n        case 2:\n          r = p;\n          g = B;\n          b = t;\n          break;\n        case 3:\n          r = p;\n          g = q;\n          b = B;\n          break;\n        case 4:\n          r = t;\n          g = p;\n          b = B;\n          break;\n        case 5:\n          r = B;\n          g = p;\n          b = q;\n          break;\n      }\n    }\n    return [r, g, b];\n  };\n  Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n    var hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n    var b = hsb[2];\n    if (b == 0 && brightnessFactor > 1.0) {\n      b = 0.05;\n    }\n    var h = ((hsb[0] + hueShift) % 360 + 360) % 360;\n    var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n    b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n    var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n    var rgba = Color.HSBtoRGB(h, s, b);\n    rgba.push(a);\n    return Color.fromArray(rgba);\n  };\n  Color.prototype.brighter = function () {\n    return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n  };\n  Color.prototype.darker = function () {\n    return this.derive(0, 1.0, 0.7, 1.0);\n  };\n  // See https://drafts.csswg.org/css-color/#hex-notation\n  Color.hexRe = /\\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\\s*$/;\n  Color.shortHexRe = /\\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\\s*$/;\n  Color.rgbRe = /\\s*rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)\\s*/;\n  Color.rgbaRe = /\\s*rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([.\\d]+)\\)\\s*/;\n  /**\n   * CSS Color Module Level 4:\n   * https://drafts.csswg.org/css-color/#named-colors\n   */\n  Color.nameToHex = Object.freeze({\n    aliceblue: '#F0F8FF',\n    antiquewhite: '#FAEBD7',\n    aqua: '#00FFFF',\n    aquamarine: '#7FFFD4',\n    azure: '#F0FFFF',\n    beige: '#F5F5DC',\n    bisque: '#FFE4C4',\n    black: '#000000',\n    blanchedalmond: '#FFEBCD',\n    blue: '#0000FF',\n    blueviolet: '#8A2BE2',\n    brown: '#A52A2A',\n    burlywood: '#DEB887',\n    cadetblue: '#5F9EA0',\n    chartreuse: '#7FFF00',\n    chocolate: '#D2691E',\n    coral: '#FF7F50',\n    cornflowerblue: '#6495ED',\n    cornsilk: '#FFF8DC',\n    crimson: '#DC143C',\n    cyan: '#00FFFF',\n    darkblue: '#00008B',\n    darkcyan: '#008B8B',\n    darkgoldenrod: '#B8860B',\n    darkgray: '#A9A9A9',\n    darkgreen: '#006400',\n    darkgrey: '#A9A9A9',\n    darkkhaki: '#BDB76B',\n    darkmagenta: '#8B008B',\n    darkolivegreen: '#556B2F',\n    darkorange: '#FF8C00',\n    darkorchid: '#9932CC',\n    darkred: '#8B0000',\n    darksalmon: '#E9967A',\n    darkseagreen: '#8FBC8F',\n    darkslateblue: '#483D8B',\n    darkslategray: '#2F4F4F',\n    darkslategrey: '#2F4F4F',\n    darkturquoise: '#00CED1',\n    darkviolet: '#9400D3',\n    deeppink: '#FF1493',\n    deepskyblue: '#00BFFF',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1E90FF',\n    firebrick: '#B22222',\n    floralwhite: '#FFFAF0',\n    forestgreen: '#228B22',\n    fuchsia: '#FF00FF',\n    gainsboro: '#DCDCDC',\n    ghostwhite: '#F8F8FF',\n    gold: '#FFD700',\n    goldenrod: '#DAA520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#ADFF2F',\n    grey: '#808080',\n    honeydew: '#F0FFF0',\n    hotpink: '#FF69B4',\n    indianred: '#CD5C5C',\n    indigo: '#4B0082',\n    ivory: '#FFFFF0',\n    khaki: '#F0E68C',\n    lavender: '#E6E6FA',\n    lavenderblush: '#FFF0F5',\n    lawngreen: '#7CFC00',\n    lemonchiffon: '#FFFACD',\n    lightblue: '#ADD8E6',\n    lightcoral: '#F08080',\n    lightcyan: '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray: '#D3D3D3',\n    lightgreen: '#90EE90',\n    lightgrey: '#D3D3D3',\n    lightpink: '#FFB6C1',\n    lightsalmon: '#FFA07A',\n    lightseagreen: '#20B2AA',\n    lightskyblue: '#87CEFA',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#B0C4DE',\n    lightyellow: '#FFFFE0',\n    lime: '#00FF00',\n    limegreen: '#32CD32',\n    linen: '#FAF0E6',\n    magenta: '#FF00FF',\n    maroon: '#800000',\n    mediumaquamarine: '#66CDAA',\n    mediumblue: '#0000CD',\n    mediumorchid: '#BA55D3',\n    mediumpurple: '#9370DB',\n    mediumseagreen: '#3CB371',\n    mediumslateblue: '#7B68EE',\n    mediumspringgreen: '#00FA9A',\n    mediumturquoise: '#48D1CC',\n    mediumvioletred: '#C71585',\n    midnightblue: '#191970',\n    mintcream: '#F5FFFA',\n    mistyrose: '#FFE4E1',\n    moccasin: '#FFE4B5',\n    navajowhite: '#FFDEAD',\n    navy: '#000080',\n    oldlace: '#FDF5E6',\n    olive: '#808000',\n    olivedrab: '#6B8E23',\n    orange: '#FFA500',\n    orangered: '#FF4500',\n    orchid: '#DA70D6',\n    palegoldenrod: '#EEE8AA',\n    palegreen: '#98FB98',\n    paleturquoise: '#AFEEEE',\n    palevioletred: '#DB7093',\n    papayawhip: '#FFEFD5',\n    peachpuff: '#FFDAB9',\n    peru: '#CD853F',\n    pink: '#FFC0CB',\n    plum: '#DDA0DD',\n    powderblue: '#B0E0E6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#FF0000',\n    rosybrown: '#BC8F8F',\n    royalblue: '#4169E1',\n    saddlebrown: '#8B4513',\n    salmon: '#FA8072',\n    sandybrown: '#F4A460',\n    seagreen: '#2E8B57',\n    seashell: '#FFF5EE',\n    sienna: '#A0522D',\n    silver: '#C0C0C0',\n    skyblue: '#87CEEB',\n    slateblue: '#6A5ACD',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#FFFAFA',\n    springgreen: '#00FF7F',\n    steelblue: '#4682B4',\n    tan: '#D2B48C',\n    teal: '#008080',\n    thistle: '#D8BFD8',\n    tomato: '#FF6347',\n    turquoise: '#40E0D0',\n    violet: '#EE82EE',\n    wheat: '#F5DEB3',\n    white: '#FFFFFF',\n    whitesmoke: '#F5F5F5',\n    yellow: '#FFFF00',\n    yellowgreen: '#9ACD32'\n  });\n  return Color;\n}();\nexport { Color };","map":{"version":3,"names":["Color","r","g","b","a","Math","min","max","fromString","str","indexOf","fromHexString","hex","nameToHex","fromRgbaString","Error","values","match","hexRe","parseInt","undefined","shortHexRe","rgbRe","rgbaRe","fromArray","arr","length","fromHSB","h","s","alpha","rgb","HSBtoRGB","padHex","prototype","toHexString","round","toString","toRgbaString","fractionDigits","components","k","pow","push","join","toHSB","RGBtoHSB","S","H","NaN","delta","rc","gc","bc","B","isNaN","floor","f","p","q","t","derive","hueShift","saturationFactor","brightnessFactor","opacityFactor","hsb","rgba","brighter","darker","Object","freeze","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],"sources":["C:/Users/avnis/Documents/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/util/color.js"],"sourcesContent":["var Color = /** @class */ (function () {\n    /**\n     * Every color component should be in the [0, 1] range.\n     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n     * So, when animating colors, if the source or target color components are already near\n     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n     * component value to end up outside of that range mid-animation. For this reason the constructor\n     * performs range checking/constraining.\n     * @param r Red component.\n     * @param g Green component.\n     * @param b Blue component.\n     * @param a Alpha (opacity) component.\n     */\n    function Color(r, g, b, a) {\n        if (a === void 0) { a = 1; }\n        // NaN is treated as 0.\n        this.r = Math.min(1, Math.max(0, r || 0));\n        this.g = Math.min(1, Math.max(0, g || 0));\n        this.b = Math.min(1, Math.max(0, b || 0));\n        this.a = Math.min(1, Math.max(0, a || 0));\n    }\n    /**\n     * The given string can be in one of the following formats:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     * @param str\n     */\n    Color.fromString = function (str) {\n        // hexadecimal notation\n        if (str.indexOf('#') >= 0) { // there can be some leading whitespace\n            return Color.fromHexString(str);\n        }\n        // color name\n        var hex = Color.nameToHex[str];\n        if (hex) {\n            return Color.fromHexString(hex);\n        }\n        // rgb(a) notation\n        if (str.indexOf('rgb') >= 0) {\n            return Color.fromRgbaString(str);\n        }\n        throw new Error(\"Invalid color string: '\" + str + \"'\");\n    };\n    // Using separate RegExp for the short hex notation because strings like `#abcd`\n    // are matched as ['#abcd', 'ab', 'c', 'd', undefined] when the `{1,2}` quantifier is used.\n    Color.fromHexString = function (str) {\n        var values = str.match(Color.hexRe);\n        if (values) {\n            var r = parseInt(values[1], 16);\n            var g = parseInt(values[2], 16);\n            var b = parseInt(values[3], 16);\n            var a = values[4] !== undefined ? parseInt(values[4], 16) : 255;\n            return new Color(r / 255, g / 255, b / 255, a / 255);\n        }\n        values = str.match(Color.shortHexRe);\n        if (values) {\n            var r = parseInt(values[1], 16);\n            var g = parseInt(values[2], 16);\n            var b = parseInt(values[3], 16);\n            var a = values[4] !== undefined ? parseInt(values[4], 16) : 15;\n            r += r * 16;\n            g += g * 16;\n            b += b * 16;\n            a += a * 16;\n            return new Color(r / 255, g / 255, b / 255, a / 255);\n        }\n        throw new Error(\"Malformed hexadecimal color string: '\" + str + \"'\");\n    };\n    Color.fromRgbaString = function (str) {\n        var values = str.match(Color.rgbRe);\n        if (values) {\n            return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255);\n        }\n        values = str.match(Color.rgbaRe);\n        if (values) {\n            return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255, +values[4]);\n        }\n        throw new Error(\"Malformed rgb/rgba color string: '\" + str + \"'\");\n    };\n    Color.fromArray = function (arr) {\n        if (arr.length === 4) {\n            return new Color(arr[0], arr[1], arr[2], arr[3]);\n        }\n        if (arr.length === 3) {\n            return new Color(arr[0], arr[1], arr[2]);\n        }\n        throw new Error('The given array should contain 3 or 4 color components (numbers).');\n    };\n    Color.fromHSB = function (h, s, b, alpha) {\n        if (alpha === void 0) { alpha = 1; }\n        var rgb = Color.HSBtoRGB(h, s, b);\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\n    };\n    Color.padHex = function (str) {\n        // Can't use `padStart(2, '0')` here because of IE.\n        return str.length === 1 ? '0' + str : str;\n    };\n    Color.prototype.toHexString = function () {\n        var hex = '#'\n            + Color.padHex(Math.round(this.r * 255).toString(16))\n            + Color.padHex(Math.round(this.g * 255).toString(16))\n            + Color.padHex(Math.round(this.b * 255).toString(16));\n        if (this.a < 1) {\n            hex += Color.padHex(Math.round(this.a * 255).toString(16));\n        }\n        return hex;\n    };\n    Color.prototype.toRgbaString = function (fractionDigits) {\n        if (fractionDigits === void 0) { fractionDigits = 3; }\n        var components = [\n            Math.round(this.r * 255),\n            Math.round(this.g * 255),\n            Math.round(this.b * 255)\n        ];\n        var k = Math.pow(10, fractionDigits);\n        if (this.a !== 1) {\n            components.push(Math.round(this.a * k) / k);\n            return \"rgba(\" + components.join(', ') + \")\";\n        }\n        return \"rgb(\" + components.join(', ') + \")\";\n    };\n    Color.prototype.toString = function () {\n        if (this.a === 1) {\n            return this.toHexString();\n        }\n        return this.toRgbaString();\n    };\n    Color.prototype.toHSB = function () {\n        return Color.RGBtoHSB(this.r, this.g, this.b);\n    };\n    /**\n     * Converts the given RGB triple to an array of HSB (HSV) components.\n     * The hue component will be `NaN` for achromatic colors.\n     */\n    Color.RGBtoHSB = function (r, g, b) {\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n        var S = max !== 0 ? (max - min) / max : 0;\n        var H = NaN;\n        // min == max, means all components are the same\n        // and the color is a shade of gray with no hue (H is NaN)\n        if (min !== max) {\n            var delta = max - min;\n            var rc = (max - r) / delta;\n            var gc = (max - g) / delta;\n            var bc = (max - b) / delta;\n            if (r === max) {\n                H = bc - gc;\n            }\n            else if (g === max) {\n                H = 2.0 + rc - bc;\n            }\n            else {\n                H = 4.0 + gc - rc;\n            }\n            H /= 6.0;\n            if (H < 0) {\n                H = H + 1.0;\n            }\n        }\n        return [H * 360, S, max];\n    };\n    /**\n     * Converts the given HSB (HSV) triple to an array of RGB components.\n     */\n    Color.HSBtoRGB = function (H, S, B) {\n        if (isNaN(H)) {\n            H = 0;\n        }\n        H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n        var r = 0;\n        var g = 0;\n        var b = 0;\n        if (S === 0) {\n            r = g = b = B;\n        }\n        else {\n            var h = (H - Math.floor(H)) * 6;\n            var f = h - Math.floor(h);\n            var p = B * (1 - S);\n            var q = B * (1 - S * f);\n            var t = B * (1 - (S * (1 - f)));\n            switch (h >> 0) { // discard the floating point part of the number\n                case 0:\n                    r = B;\n                    g = t;\n                    b = p;\n                    break;\n                case 1:\n                    r = q;\n                    g = B;\n                    b = p;\n                    break;\n                case 2:\n                    r = p;\n                    g = B;\n                    b = t;\n                    break;\n                case 3:\n                    r = p;\n                    g = q;\n                    b = B;\n                    break;\n                case 4:\n                    r = t;\n                    g = p;\n                    b = B;\n                    break;\n                case 5:\n                    r = B;\n                    g = p;\n                    b = q;\n                    break;\n            }\n        }\n        return [r, g, b];\n    };\n    Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n        var hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n        var b = hsb[2];\n        if (b == 0 && brightnessFactor > 1.0) {\n            b = 0.05;\n        }\n        var h = (((hsb[0] + hueShift) % 360) + 360) % 360;\n        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n        var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n        var rgba = Color.HSBtoRGB(h, s, b);\n        rgba.push(a);\n        return Color.fromArray(rgba);\n    };\n    Color.prototype.brighter = function () {\n        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n    };\n    Color.prototype.darker = function () {\n        return this.derive(0, 1.0, 0.7, 1.0);\n    };\n    // See https://drafts.csswg.org/css-color/#hex-notation\n    Color.hexRe = /\\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\\s*$/;\n    Color.shortHexRe = /\\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\\s*$/;\n    Color.rgbRe = /\\s*rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)\\s*/;\n    Color.rgbaRe = /\\s*rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([.\\d]+)\\)\\s*/;\n    /**\n     * CSS Color Module Level 4:\n     * https://drafts.csswg.org/css-color/#named-colors\n     */\n    Color.nameToHex = Object.freeze({\n        aliceblue: '#F0F8FF',\n        antiquewhite: '#FAEBD7',\n        aqua: '#00FFFF',\n        aquamarine: '#7FFFD4',\n        azure: '#F0FFFF',\n        beige: '#F5F5DC',\n        bisque: '#FFE4C4',\n        black: '#000000',\n        blanchedalmond: '#FFEBCD',\n        blue: '#0000FF',\n        blueviolet: '#8A2BE2',\n        brown: '#A52A2A',\n        burlywood: '#DEB887',\n        cadetblue: '#5F9EA0',\n        chartreuse: '#7FFF00',\n        chocolate: '#D2691E',\n        coral: '#FF7F50',\n        cornflowerblue: '#6495ED',\n        cornsilk: '#FFF8DC',\n        crimson: '#DC143C',\n        cyan: '#00FFFF',\n        darkblue: '#00008B',\n        darkcyan: '#008B8B',\n        darkgoldenrod: '#B8860B',\n        darkgray: '#A9A9A9',\n        darkgreen: '#006400',\n        darkgrey: '#A9A9A9',\n        darkkhaki: '#BDB76B',\n        darkmagenta: '#8B008B',\n        darkolivegreen: '#556B2F',\n        darkorange: '#FF8C00',\n        darkorchid: '#9932CC',\n        darkred: '#8B0000',\n        darksalmon: '#E9967A',\n        darkseagreen: '#8FBC8F',\n        darkslateblue: '#483D8B',\n        darkslategray: '#2F4F4F',\n        darkslategrey: '#2F4F4F',\n        darkturquoise: '#00CED1',\n        darkviolet: '#9400D3',\n        deeppink: '#FF1493',\n        deepskyblue: '#00BFFF',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1E90FF',\n        firebrick: '#B22222',\n        floralwhite: '#FFFAF0',\n        forestgreen: '#228B22',\n        fuchsia: '#FF00FF',\n        gainsboro: '#DCDCDC',\n        ghostwhite: '#F8F8FF',\n        gold: '#FFD700',\n        goldenrod: '#DAA520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#ADFF2F',\n        grey: '#808080',\n        honeydew: '#F0FFF0',\n        hotpink: '#FF69B4',\n        indianred: '#CD5C5C',\n        indigo: '#4B0082',\n        ivory: '#FFFFF0',\n        khaki: '#F0E68C',\n        lavender: '#E6E6FA',\n        lavenderblush: '#FFF0F5',\n        lawngreen: '#7CFC00',\n        lemonchiffon: '#FFFACD',\n        lightblue: '#ADD8E6',\n        lightcoral: '#F08080',\n        lightcyan: '#E0FFFF',\n        lightgoldenrodyellow: '#FAFAD2',\n        lightgray: '#D3D3D3',\n        lightgreen: '#90EE90',\n        lightgrey: '#D3D3D3',\n        lightpink: '#FFB6C1',\n        lightsalmon: '#FFA07A',\n        lightseagreen: '#20B2AA',\n        lightskyblue: '#87CEFA',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#B0C4DE',\n        lightyellow: '#FFFFE0',\n        lime: '#00FF00',\n        limegreen: '#32CD32',\n        linen: '#FAF0E6',\n        magenta: '#FF00FF',\n        maroon: '#800000',\n        mediumaquamarine: '#66CDAA',\n        mediumblue: '#0000CD',\n        mediumorchid: '#BA55D3',\n        mediumpurple: '#9370DB',\n        mediumseagreen: '#3CB371',\n        mediumslateblue: '#7B68EE',\n        mediumspringgreen: '#00FA9A',\n        mediumturquoise: '#48D1CC',\n        mediumvioletred: '#C71585',\n        midnightblue: '#191970',\n        mintcream: '#F5FFFA',\n        mistyrose: '#FFE4E1',\n        moccasin: '#FFE4B5',\n        navajowhite: '#FFDEAD',\n        navy: '#000080',\n        oldlace: '#FDF5E6',\n        olive: '#808000',\n        olivedrab: '#6B8E23',\n        orange: '#FFA500',\n        orangered: '#FF4500',\n        orchid: '#DA70D6',\n        palegoldenrod: '#EEE8AA',\n        palegreen: '#98FB98',\n        paleturquoise: '#AFEEEE',\n        palevioletred: '#DB7093',\n        papayawhip: '#FFEFD5',\n        peachpuff: '#FFDAB9',\n        peru: '#CD853F',\n        pink: '#FFC0CB',\n        plum: '#DDA0DD',\n        powderblue: '#B0E0E6',\n        purple: '#800080',\n        rebeccapurple: '#663399',\n        red: '#FF0000',\n        rosybrown: '#BC8F8F',\n        royalblue: '#4169E1',\n        saddlebrown: '#8B4513',\n        salmon: '#FA8072',\n        sandybrown: '#F4A460',\n        seagreen: '#2E8B57',\n        seashell: '#FFF5EE',\n        sienna: '#A0522D',\n        silver: '#C0C0C0',\n        skyblue: '#87CEEB',\n        slateblue: '#6A5ACD',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#FFFAFA',\n        springgreen: '#00FF7F',\n        steelblue: '#4682B4',\n        tan: '#D2B48C',\n        teal: '#008080',\n        thistle: '#D8BFD8',\n        tomato: '#FF6347',\n        turquoise: '#40E0D0',\n        violet: '#EE82EE',\n        wheat: '#F5DEB3',\n        white: '#FFFFFF',\n        whitesmoke: '#F5F5F5',\n        yellow: '#FFFF00',\n        yellowgreen: '#9ACD32'\n    });\n    return Color;\n}());\nexport { Color };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}