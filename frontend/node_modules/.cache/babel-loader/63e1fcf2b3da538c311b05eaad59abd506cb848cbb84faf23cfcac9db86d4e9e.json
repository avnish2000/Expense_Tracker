{"ast":null,"code":"import { cubicRoots } from \"./polyRoots\";\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\nexport function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n  var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n  if (d === 0) {\n    // The lines are parallel.\n    return null;\n  }\n  var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n  var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n    return {\n      x: ax1 + ua * (ax2 - ax1),\n      y: ay1 + ua * (ay2 - ay1)\n    };\n  }\n  return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\nexport function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n  var intersections = [];\n  // Find line equation coefficients.\n  var A = y1 - y2;\n  var B = x2 - x1;\n  var C = x1 * (y2 - y1) - y1 * (x2 - x1);\n  // Find cubic Bezier curve equation coefficients from control points.\n  var bx = bezierCoefficients(px1, px2, px3, px4);\n  var by = bezierCoefficients(py1, py2, py3, py4);\n  var a = A * bx[0] + B * by[0]; // t^3\n  var b = A * bx[1] + B * by[1]; // t^2\n  var c = A * bx[2] + B * by[2]; // t\n  var d = A * bx[3] + B * by[3] + C; // 1\n  var roots = cubicRoots(a, b, c, d);\n  // Verify that the roots are within bounds of the linear segment.\n  for (var i = 0; i < roots.length; i++) {\n    var t = roots[i];\n    var tt = t * t;\n    var ttt = t * tt;\n    // Find the cartesian plane coordinates for the parametric root `t`.\n    var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n    var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\n    // The parametric cubic roots we found are intersection points\n    // with an infinite line, and so the x/y coordinates above are as well.\n    // Make sure the x/y is also within the bounds of the given segment.\n    var s = void 0;\n    if (x1 !== x2) {\n      s = (x - x1) / (x2 - x1);\n    } else {\n      // the line is vertical\n      s = (y - y1) / (y2 - y1);\n    }\n    if (s >= 0 && s <= 1) {\n      intersections.push({\n        x: x,\n        y: y\n      });\n    }\n  }\n  return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\nexport function bezierCoefficients(P1, P2, P3, P4) {\n  return [-P1 + 3 * P2 - 3 * P3 + P4, 3 * P1 - 6 * P2 + 3 * P3, -3 * P1 + 3 * P2, P1 //                 | 1  0  0  0| |P4|\n  ];\n}","map":{"version":3,"names":["cubicRoots","segmentIntersection","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","d","ua","ub","x","y","cubicSegmentIntersections","px1","py1","px2","py2","px3","py3","px4","py4","x1","y1","x2","y2","intersections","A","B","C","bx","bezierCoefficients","by","a","b","c","roots","i","length","t","tt","ttt","s","push","P1","P2","P3","P4"],"sources":["C:/Users/avnis/Documents/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/intersection.js"],"sourcesContent":["import { cubicRoots } from \"./polyRoots\";\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\nexport function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n    if (d === 0) { // The lines are parallel.\n        return null;\n    }\n    var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n    var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n        return {\n            x: ax1 + ua * (ax2 - ax1),\n            y: ay1 + ua * (ay2 - ay1)\n        };\n    }\n    return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\nexport function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n    var intersections = [];\n    // Find line equation coefficients.\n    var A = y1 - y2;\n    var B = x2 - x1;\n    var C = x1 * (y2 - y1) - y1 * (x2 - x1);\n    // Find cubic Bezier curve equation coefficients from control points.\n    var bx = bezierCoefficients(px1, px2, px3, px4);\n    var by = bezierCoefficients(py1, py2, py3, py4);\n    var a = A * bx[0] + B * by[0]; // t^3\n    var b = A * bx[1] + B * by[1]; // t^2\n    var c = A * bx[2] + B * by[2]; // t\n    var d = A * bx[3] + B * by[3] + C; // 1\n    var roots = cubicRoots(a, b, c, d);\n    // Verify that the roots are within bounds of the linear segment.\n    for (var i = 0; i < roots.length; i++) {\n        var t = roots[i];\n        var tt = t * t;\n        var ttt = t * tt;\n        // Find the cartesian plane coordinates for the parametric root `t`.\n        var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n        var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\n        // The parametric cubic roots we found are intersection points\n        // with an infinite line, and so the x/y coordinates above are as well.\n        // Make sure the x/y is also within the bounds of the given segment.\n        var s = void 0;\n        if (x1 !== x2) {\n            s = (x - x1) / (x2 - x1);\n        }\n        else { // the line is vertical\n            s = (y - y1) / (y2 - y1);\n        }\n        if (s >= 0 && s <= 1) {\n            intersections.push({ x: x, y: y });\n        }\n    }\n    return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\nexport function bezierCoefficients(P1, P2, P3, P4) {\n    return [\n        -P1 + 3 * P2 - 3 * P3 + P4,\n        3 * P1 - 6 * P2 + 3 * P3,\n        -3 * P1 + 3 * P2,\n        P1 //                 | 1  0  0  0| |P4|\n    ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}