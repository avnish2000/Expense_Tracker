{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Path } from \"./path\";\nimport { Shape } from \"./shape\";\nimport { BBox } from \"../bbox\";\nexport var RectSizing;\n\n(function (RectSizing) {\n  RectSizing[RectSizing[\"Content\"] = 0] = \"Content\";\n  RectSizing[RectSizing[\"Border\"] = 1] = \"Border\";\n})(RectSizing || (RectSizing = {}));\n\nvar Rect =\n/** @class */\nfunction (_super) {\n  __extends(Rect, _super);\n\n  function Rect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._x = 0;\n    _this._y = 0;\n    _this._width = 10;\n    _this._height = 10;\n    _this._radius = 0;\n    /**\n     * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\n     * Animated rects may not look nice with this option enabled, for example\n     * when a rect is translated by a sub-pixel value on each frame.\n     */\n\n    _this._crisp = false;\n    _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;\n    /**\n     * Similar to https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing\n     */\n\n    _this._sizing = RectSizing.Content;\n    return _this;\n  }\n\n  Object.defineProperty(Rect.prototype, \"x\", {\n    get: function () {\n      return this._x;\n    },\n    set: function (value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"y\", {\n    get: function () {\n      return this._y;\n    },\n    set: function (value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      if (this._width !== value) {\n        this._width = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      if (this._height !== value) {\n        this._height = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"radius\", {\n    get: function () {\n      return this._radius;\n    },\n    set: function (value) {\n      if (this._radius !== value) {\n        this._radius = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"crisp\", {\n    get: function () {\n      return this._crisp;\n    },\n    set: function (value) {\n      if (this._crisp !== value) {\n        this._crisp = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"strokeWidth\", {\n    get: function () {\n      return this._strokeWidth;\n    },\n    set: function (value) {\n      if (this._strokeWidth !== value) {\n        this._strokeWidth = value; // Normally, when the `lineWidth` changes, we only need to repaint the rect\n        // without updating the path. If the `isCrisp` is set to `true` however,\n        // we need to update the path to make sure the new stroke aligns to\n        // the pixel grid. This is the reason we override the `lineWidth` setter\n        // and getter here.\n\n        if (this.crisp || this.sizing === RectSizing.Border) {\n          this.dirtyPath = true;\n        } else {\n          this.effectiveStrokeWidth = value;\n          this.dirty = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"sizing\", {\n    get: function () {\n      return this._sizing;\n    },\n    set: function (value) {\n      if (this._sizing !== value) {\n        this._sizing = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Rect.prototype.updatePath = function () {\n    var borderSizing = this.sizing === RectSizing.Border;\n    var path = this.path;\n    path.clear();\n    var x = this.x;\n    var y = this.y;\n    var width = this.width;\n    var height = this.height;\n    var strokeWidth;\n\n    if (borderSizing) {\n      var halfWidth = width / 2;\n      var halfHeight = height / 2;\n      strokeWidth = Math.min(this.strokeWidth, halfWidth, halfHeight);\n      x = Math.min(x + strokeWidth / 2, x + halfWidth);\n      y = Math.min(y + strokeWidth / 2, y + halfHeight);\n      width = Math.max(width - strokeWidth, 0);\n      height = Math.max(height - strokeWidth, 0);\n    } else {\n      strokeWidth = this.strokeWidth;\n    }\n\n    this.effectiveStrokeWidth = strokeWidth;\n\n    if (this.crisp && !borderSizing) {\n      var _a = this,\n          a = _a.alignment,\n          al = _a.align;\n\n      path.rect(al(a, x), al(a, y), al(a, x, width), al(a, y, height));\n    } else {\n      path.rect(x, y, width, height);\n    }\n  };\n\n  Rect.prototype.computeBBox = function () {\n    var _a = this,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n\n    return new BBox(x, y, width, height);\n  };\n\n  Rect.prototype.isPointInPath = function (x, y) {\n    var point = this.transformPoint(x, y);\n    var bbox = this.computeBBox();\n    return bbox.containsPoint(point.x, point.y);\n  };\n\n  Rect.prototype.isPointInStroke = function (x, y) {\n    return false;\n  };\n\n  Rect.prototype.fillStroke = function (ctx) {\n    if (!this.scene) {\n      return;\n    }\n\n    var pixelRatio = this.scene.canvas.pixelRatio || 1;\n\n    if (this.fill) {\n      ctx.fillStyle = this.fill;\n      ctx.globalAlpha = this.opacity * this.fillOpacity; // The canvas context scaling (depends on the device's pixel ratio)\n      // has no effect on shadows, so we have to account for the pixel ratio\n      // manually here.\n\n      var fillShadow = this.fillShadow;\n\n      if (fillShadow && fillShadow.enabled) {\n        ctx.shadowColor = fillShadow.color;\n        ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n        ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n        ctx.shadowBlur = fillShadow.blur * pixelRatio;\n      }\n\n      ctx.fill();\n    }\n\n    ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n\n    if (this.stroke && this.effectiveStrokeWidth) {\n      ctx.strokeStyle = this.stroke;\n      ctx.globalAlpha = this.opacity * this.strokeOpacity;\n      ctx.lineWidth = this.effectiveStrokeWidth;\n\n      if (this.lineDash) {\n        ctx.setLineDash(this.lineDash);\n      }\n\n      if (this.lineDashOffset) {\n        ctx.lineDashOffset = this.lineDashOffset;\n      }\n\n      if (this.lineCap) {\n        ctx.lineCap = this.lineCap;\n      }\n\n      if (this.lineJoin) {\n        ctx.lineJoin = this.lineJoin;\n      }\n\n      var strokeShadow = this.strokeShadow;\n\n      if (strokeShadow && strokeShadow.enabled) {\n        ctx.shadowColor = strokeShadow.color;\n        ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;\n        ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;\n        ctx.shadowBlur = strokeShadow.blur * pixelRatio;\n      }\n\n      ctx.stroke();\n    }\n  };\n\n  Rect.className = 'Rect';\n  return Rect;\n}(Path);\n\nexport { Rect };","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/shape/rect.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Path","Shape","BBox","RectSizing","Rect","_super","_this","apply","arguments","_x","_y","_width","_height","_radius","_crisp","effectiveStrokeWidth","defaultStyles","strokeWidth","_sizing","Content","defineProperty","get","set","value","dirtyPath","enumerable","configurable","_strokeWidth","crisp","sizing","Border","dirty","updatePath","borderSizing","path","clear","x","y","width","height","halfWidth","halfHeight","Math","min","max","_a","a","alignment","al","align","rect","computeBBox","isPointInPath","point","transformPoint","bbox","containsPoint","isPointInStroke","fillStroke","ctx","scene","pixelRatio","canvas","fill","fillStyle","globalAlpha","opacity","fillOpacity","fillShadow","enabled","shadowColor","color","shadowOffsetX","xOffset","shadowOffsetY","yOffset","shadowBlur","blur","stroke","strokeStyle","strokeOpacity","lineWidth","lineDash","setLineDash","lineDashOffset","lineCap","lineJoin","strokeShadow","className"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Path } from \"./path\";\nimport { Shape } from \"./shape\";\nimport { BBox } from \"../bbox\";\nexport var RectSizing;\n(function (RectSizing) {\n    RectSizing[RectSizing[\"Content\"] = 0] = \"Content\";\n    RectSizing[RectSizing[\"Border\"] = 1] = \"Border\";\n})(RectSizing || (RectSizing = {}));\nvar Rect = /** @class */ (function (_super) {\n    __extends(Rect, _super);\n    function Rect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._x = 0;\n        _this._y = 0;\n        _this._width = 10;\n        _this._height = 10;\n        _this._radius = 0;\n        /**\n         * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\n         * Animated rects may not look nice with this option enabled, for example\n         * when a rect is translated by a sub-pixel value on each frame.\n         */\n        _this._crisp = false;\n        _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;\n        /**\n         * Similar to https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing\n         */\n        _this._sizing = RectSizing.Content;\n        return _this;\n    }\n    Object.defineProperty(Rect.prototype, \"x\", {\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            if (this._x !== value) {\n                this._x = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"y\", {\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            if (this._y !== value) {\n                this._y = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            if (this._width !== value) {\n                this._width = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            if (this._height !== value) {\n                this._height = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (value) {\n            if (this._radius !== value) {\n                this._radius = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"crisp\", {\n        get: function () {\n            return this._crisp;\n        },\n        set: function (value) {\n            if (this._crisp !== value) {\n                this._crisp = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"strokeWidth\", {\n        get: function () {\n            return this._strokeWidth;\n        },\n        set: function (value) {\n            if (this._strokeWidth !== value) {\n                this._strokeWidth = value;\n                // Normally, when the `lineWidth` changes, we only need to repaint the rect\n                // without updating the path. If the `isCrisp` is set to `true` however,\n                // we need to update the path to make sure the new stroke aligns to\n                // the pixel grid. This is the reason we override the `lineWidth` setter\n                // and getter here.\n                if (this.crisp || this.sizing === RectSizing.Border) {\n                    this.dirtyPath = true;\n                }\n                else {\n                    this.effectiveStrokeWidth = value;\n                    this.dirty = true;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"sizing\", {\n        get: function () {\n            return this._sizing;\n        },\n        set: function (value) {\n            if (this._sizing !== value) {\n                this._sizing = value;\n                this.dirtyPath = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Rect.prototype.updatePath = function () {\n        var borderSizing = this.sizing === RectSizing.Border;\n        var path = this.path;\n        path.clear();\n        var x = this.x;\n        var y = this.y;\n        var width = this.width;\n        var height = this.height;\n        var strokeWidth;\n        if (borderSizing) {\n            var halfWidth = width / 2;\n            var halfHeight = height / 2;\n            strokeWidth = Math.min(this.strokeWidth, halfWidth, halfHeight);\n            x = Math.min(x + strokeWidth / 2, x + halfWidth);\n            y = Math.min(y + strokeWidth / 2, y + halfHeight);\n            width = Math.max(width - strokeWidth, 0);\n            height = Math.max(height - strokeWidth, 0);\n        }\n        else {\n            strokeWidth = this.strokeWidth;\n        }\n        this.effectiveStrokeWidth = strokeWidth;\n        if (this.crisp && !borderSizing) {\n            var _a = this, a = _a.alignment, al = _a.align;\n            path.rect(al(a, x), al(a, y), al(a, x, width), al(a, y, height));\n        }\n        else {\n            path.rect(x, y, width, height);\n        }\n    };\n    Rect.prototype.computeBBox = function () {\n        var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n        return new BBox(x, y, width, height);\n    };\n    Rect.prototype.isPointInPath = function (x, y) {\n        var point = this.transformPoint(x, y);\n        var bbox = this.computeBBox();\n        return bbox.containsPoint(point.x, point.y);\n    };\n    Rect.prototype.isPointInStroke = function (x, y) {\n        return false;\n    };\n    Rect.prototype.fillStroke = function (ctx) {\n        if (!this.scene) {\n            return;\n        }\n        var pixelRatio = this.scene.canvas.pixelRatio || 1;\n        if (this.fill) {\n            ctx.fillStyle = this.fill;\n            ctx.globalAlpha = this.opacity * this.fillOpacity;\n            // The canvas context scaling (depends on the device's pixel ratio)\n            // has no effect on shadows, so we have to account for the pixel ratio\n            // manually here.\n            var fillShadow = this.fillShadow;\n            if (fillShadow && fillShadow.enabled) {\n                ctx.shadowColor = fillShadow.color;\n                ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n                ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n                ctx.shadowBlur = fillShadow.blur * pixelRatio;\n            }\n            ctx.fill();\n        }\n        ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n        if (this.stroke && this.effectiveStrokeWidth) {\n            ctx.strokeStyle = this.stroke;\n            ctx.globalAlpha = this.opacity * this.strokeOpacity;\n            ctx.lineWidth = this.effectiveStrokeWidth;\n            if (this.lineDash) {\n                ctx.setLineDash(this.lineDash);\n            }\n            if (this.lineDashOffset) {\n                ctx.lineDashOffset = this.lineDashOffset;\n            }\n            if (this.lineCap) {\n                ctx.lineCap = this.lineCap;\n            }\n            if (this.lineJoin) {\n                ctx.lineJoin = this.lineJoin;\n            }\n            var strokeShadow = this.strokeShadow;\n            if (strokeShadow && strokeShadow.enabled) {\n                ctx.shadowColor = strokeShadow.color;\n                ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;\n                ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;\n                ctx.shadowBlur = strokeShadow.blur * pixelRatio;\n            }\n            ctx.stroke();\n        }\n    };\n    Rect.className = 'Rect';\n    return Rect;\n}(Path));\nexport { Rect };\n"]},"metadata":{},"sourceType":"module"}