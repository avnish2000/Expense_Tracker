{"ast":null,"code":"// For small data structs like a bounding box, objects are superior to arrays\n// in terms of performance (by 3-4% in Chrome 71, Safari 12 and by 20% in Firefox 64).\n// They are also self descriptive and harder to abuse.\n// For example, one has to do:\n// `ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);`\n// rather than become enticed by the much slower:\n// `ctx.strokeRect(...bbox);`\n// https://jsperf.com/array-vs-object-create-access\nvar BBox =\n/** @class */\nfunction () {\n  function BBox(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  BBox.prototype.isValid = function () {\n    return isFinite(this.x) && isFinite(this.y) && isFinite(this.width) && isFinite(this.height);\n  };\n\n  BBox.prototype.dilate = function (value) {\n    this.x -= value;\n    this.y -= value;\n    this.width += value * 2;\n    this.height += value * 2;\n  };\n\n  BBox.prototype.containsPoint = function (x, y) {\n    return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;\n  };\n\n  BBox.prototype.render = function (ctx, params) {\n    if (params === void 0) {\n      params = BBox.noParams;\n    }\n\n    ctx.save();\n\n    if (params.resetTransform) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    ctx.strokeStyle = params.strokeStyle || 'cyan';\n    ctx.lineWidth = params.lineWidth || 1;\n    ctx.strokeRect(this.x, this.y, this.width, this.height);\n\n    if (params.label) {\n      ctx.fillStyle = params.fillStyle || 'black';\n      ctx.textBaseline = 'bottom';\n      ctx.fillText(params.label, this.x, this.y);\n    }\n\n    ctx.restore();\n  };\n\n  BBox.noParams = {};\n  return BBox;\n}();\n\nexport { BBox };","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/bbox.js"],"names":["BBox","x","y","width","height","prototype","isValid","isFinite","dilate","value","containsPoint","render","ctx","params","noParams","save","resetTransform","setTransform","strokeStyle","lineWidth","strokeRect","label","fillStyle","textBaseline","fillText","restore"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAI;AAAG;AAAe,YAAY;AAClC,WAASA,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAC/B,SAAKH,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDJ,EAAAA,IAAI,CAACK,SAAL,CAAeC,OAAf,GAAyB,YAAY;AACjC,WAAOC,QAAQ,CAAC,KAAKN,CAAN,CAAR,IAAoBM,QAAQ,CAAC,KAAKL,CAAN,CAA5B,IAAwCK,QAAQ,CAAC,KAAKJ,KAAN,CAAhD,IAAgEI,QAAQ,CAAC,KAAKH,MAAN,CAA/E;AACH,GAFD;;AAGAJ,EAAAA,IAAI,CAACK,SAAL,CAAeG,MAAf,GAAwB,UAAUC,KAAV,EAAiB;AACrC,SAAKR,CAAL,IAAUQ,KAAV;AACA,SAAKP,CAAL,IAAUO,KAAV;AACA,SAAKN,KAAL,IAAcM,KAAK,GAAG,CAAtB;AACA,SAAKL,MAAL,IAAeK,KAAK,GAAG,CAAvB;AACH,GALD;;AAMAT,EAAAA,IAAI,CAACK,SAAL,CAAeK,aAAf,GAA+B,UAAUT,CAAV,EAAaC,CAAb,EAAgB;AAC3C,WAAOD,CAAC,IAAI,KAAKA,CAAV,IAAeA,CAAC,IAAK,KAAKA,CAAL,GAAS,KAAKE,KAAnC,IACAD,CAAC,IAAI,KAAKA,CADV,IACeA,CAAC,IAAK,KAAKA,CAAL,GAAS,KAAKE,MAD1C;AAEH,GAHD;;AAIAJ,EAAAA,IAAI,CAACK,SAAL,CAAeM,MAAf,GAAwB,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC3C,QAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAGb,IAAI,CAACc,QAAd;AAAyB;;AAClDF,IAAAA,GAAG,CAACG,IAAJ;;AACA,QAAIF,MAAM,CAACG,cAAX,EAA2B;AACvBJ,MAAAA,GAAG,CAACK,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC;AACH;;AACDL,IAAAA,GAAG,CAACM,WAAJ,GAAkBL,MAAM,CAACK,WAAP,IAAsB,MAAxC;AACAN,IAAAA,GAAG,CAACO,SAAJ,GAAgBN,MAAM,CAACM,SAAP,IAAoB,CAApC;AACAP,IAAAA,GAAG,CAACQ,UAAJ,CAAe,KAAKnB,CAApB,EAAuB,KAAKC,CAA5B,EAA+B,KAAKC,KAApC,EAA2C,KAAKC,MAAhD;;AACA,QAAIS,MAAM,CAACQ,KAAX,EAAkB;AACdT,MAAAA,GAAG,CAACU,SAAJ,GAAgBT,MAAM,CAACS,SAAP,IAAoB,OAApC;AACAV,MAAAA,GAAG,CAACW,YAAJ,GAAmB,QAAnB;AACAX,MAAAA,GAAG,CAACY,QAAJ,CAAaX,MAAM,CAACQ,KAApB,EAA2B,KAAKpB,CAAhC,EAAmC,KAAKC,CAAxC;AACH;;AACDU,IAAAA,GAAG,CAACa,OAAJ;AACH,GAfD;;AAgBAzB,EAAAA,IAAI,CAACc,QAAL,GAAgB,EAAhB;AACA,SAAOd,IAAP;AACH,CAtCyB,EAA1B;;AAuCA,SAASA,IAAT","sourcesContent":["// For small data structs like a bounding box, objects are superior to arrays\n// in terms of performance (by 3-4% in Chrome 71, Safari 12 and by 20% in Firefox 64).\n// They are also self descriptive and harder to abuse.\n// For example, one has to do:\n// `ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);`\n// rather than become enticed by the much slower:\n// `ctx.strokeRect(...bbox);`\n// https://jsperf.com/array-vs-object-create-access\nvar BBox = /** @class */ (function () {\n    function BBox(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    BBox.prototype.isValid = function () {\n        return isFinite(this.x) && isFinite(this.y) && isFinite(this.width) && isFinite(this.height);\n    };\n    BBox.prototype.dilate = function (value) {\n        this.x -= value;\n        this.y -= value;\n        this.width += value * 2;\n        this.height += value * 2;\n    };\n    BBox.prototype.containsPoint = function (x, y) {\n        return x >= this.x && x <= (this.x + this.width)\n            && y >= this.y && y <= (this.y + this.height);\n    };\n    BBox.prototype.render = function (ctx, params) {\n        if (params === void 0) { params = BBox.noParams; }\n        ctx.save();\n        if (params.resetTransform) {\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n        }\n        ctx.strokeStyle = params.strokeStyle || 'cyan';\n        ctx.lineWidth = params.lineWidth || 1;\n        ctx.strokeRect(this.x, this.y, this.width, this.height);\n        if (params.label) {\n            ctx.fillStyle = params.fillStyle || 'black';\n            ctx.textBaseline = 'bottom';\n            ctx.fillText(params.label, this.x, this.y);\n        }\n        ctx.restore();\n    };\n    BBox.noParams = {};\n    return BBox;\n}());\nexport { BBox };\n"]},"metadata":{},"sourceType":"module"}