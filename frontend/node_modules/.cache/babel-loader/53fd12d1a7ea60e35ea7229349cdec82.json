{"ast":null,"code":"var _jsxFileName = \"E:\\\\Expense-Tracker\\\\frontend\\\\src\\\\Components\\\\Chart.js\";\nimport React, { Component } from 'react'; //make API calls to backend\n\nimport axios from 'axios';\nimport { AgChartsReact } from 'ag-charts-react';\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.dataPoints = [];\n    this.state = {\n      options: {\n        type: 'line',\n        autoSize: true,\n        title: {\n          text: 'Expenses'\n        },\n        legend: {\n          enabled: false\n        },\n        data: this.dataPoints,\n        series: [{\n          xKey: 'date',\n          yKey: 'spending'\n        }]\n      }\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:8080/recent').then(response => {\n      var i;\n      var temp = 0;\n      /* calculation for the days with multiple expenses entered */\n\n      for (i = 0; i < response.data.length; i++) {\n        if (i !== response.data.length - 1 && !response.data[i + 1].date.localeCompare(response.data[i].date)) {\n          temp += response.data[i].cost;\n        } else {\n          temp += response.data[i].cost;\n          var day = response.data[i].date.substring(8, 10);\n          this.dataPoints.push({\n            date: String(day),\n            spending: Number(temp)\n          });\n          temp = 0;\n        }\n      }\n\n      this.setState({\n        options: { ...this.state.options,\n          data: this.dataPoints\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AgChartsReact, {\n      options: this.state.options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/src/Components/Chart.js"],"names":["React","Component","axios","AgChartsReact","Chart","constructor","props","dataPoints","state","options","type","autoSize","title","text","legend","enabled","data","series","xKey","yKey","componentDidMount","get","then","response","i","temp","length","date","localeCompare","cost","day","substring","push","String","spending","Number","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,eAAe,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAG5CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACZ,UAAMA,KAAN;AADY,SAFnBC,UAEmB,GAFN,EAEM;AAGZ,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AACjBC,QAAAA,IAAI,EAAE,MADW;AAEjBC,QAAAA,QAAQ,EAAE,IAFO;AAGjBC,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE;AADH,SAHU;AAMjBC,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL,SANS;AASLC,QAAAA,IAAI,EAAE,KAAKT,UATN;AAULU,QAAAA,MAAM,EAAE,CAAC;AACLC,UAAAA,IAAI,EAAE,MADD;AAELC,UAAAA,IAAI,EAAE;AAFD,SAAD;AAVH;AADA,KAAb;AAiBH;;AAEJC,EAAAA,iBAAiB,GAAE;AAClBlB,IAAAA,KAAK,CAACmB,GAAN,CAAU,8BAAV,EACCC,IADD,CACOC,QAAD,IAAc;AACnB,UAAIC,CAAJ;AACA,UAAIC,IAAI,GAAG,CAAX;AACA;;AACA,WAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACP,IAAT,CAAcU,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAC1C,YAAIA,CAAC,KAAMD,QAAQ,CAACP,IAAT,CAAcU,MAAd,GAAuB,CAA9B,IAAoC,CAACH,QAAQ,CAACP,IAAT,CAAcQ,CAAC,GAAG,CAAlB,EAAqBG,IAArB,CAA0BC,aAA1B,CAAwCL,QAAQ,CAACP,IAAT,CAAcQ,CAAd,EAAiBG,IAAzD,CAAzC,EAAyG;AACxGF,UAAAA,IAAI,IAAIF,QAAQ,CAACP,IAAT,CAAcQ,CAAd,EAAiBK,IAAzB;AACA,SAFD,MAEO;AACNJ,UAAAA,IAAI,IAAIF,QAAQ,CAACP,IAAT,CAAcQ,CAAd,EAAiBK,IAAzB;AACA,cAAIC,GAAG,GAAGP,QAAQ,CAACP,IAAT,CAAcQ,CAAd,EAAiBG,IAAjB,CAAsBI,SAAtB,CAAgC,CAAhC,EAAmC,EAAnC,CAAV;AACA,eAAKxB,UAAL,CAAgByB,IAAhB,CAAqB;AACpBL,YAAAA,IAAI,EAAEM,MAAM,CAACH,GAAD,CADQ;AAEpBI,YAAAA,QAAQ,EAAEC,MAAM,CAACV,IAAD;AAFI,WAArB;AAIAA,UAAAA,IAAI,GAAG,CAAP;AACA;AACD;;AAED,WAAKW,QAAL,CAAc;AACb3B,QAAAA,OAAO,EAAE,EACL,GAAG,KAAKD,KAAL,CAAWC,OADT;AAELO,UAAAA,IAAI,EAAE,KAAKT;AAFN;AADI,OAAd;AAMA,KAzBD;AA0BA;;AAEE8B,EAAAA,MAAM,GAAG;AACL,wBAAO,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE,KAAK7B,KAAL,CAAWC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAxDwC","sourcesContent":["import React, { Component } from 'react';\r\n\r\n//make API calls to backend\r\nimport axios from 'axios';\r\n\r\nimport { AgChartsReact } from 'ag-charts-react';\r\n\r\nexport default class Chart extends Component {\r\n\tdataPoints = [];\r\n\t\r\n\tconstructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            options: {\r\n\t\t\t\ttype: 'line',\r\n\t\t\t\tautoSize: true,\r\n\t\t\t\ttitle: {\r\n\t\t\t\t    text: 'Expenses',\r\n\t\t\t\t},\r\n\t\t\t\tlegend: {\r\n\t\t\t\t    enabled: false\r\n\t\t\t\t},\r\n                data: this.dataPoints,\r\n                series: [{\r\n                    xKey: 'date',\r\n                    yKey: 'spending',\r\n                }],\r\n            },\r\n        };\r\n    }\r\n\t\r\n\tcomponentDidMount(){\r\n\t\taxios.get('http://localhost:8080/recent')\r\n\t\t.then((response) => {\r\n\t\t\tvar i;\r\n\t\t\tvar temp = 0;\r\n\t\t\t/* calculation for the days with multiple expenses entered */\r\n\t\t\tfor (i = 0; i < response.data.length; i++) {\r\n\t\t\t\tif (i !== (response.data.length - 1) && !response.data[i + 1].date.localeCompare(response.data[i].date)) {\r\n\t\t\t\t\ttemp += response.data[i].cost;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemp += response.data[i].cost;\r\n\t\t\t\t\tvar day = response.data[i].date.substring(8, 10);\r\n\t\t\t\t\tthis.dataPoints.push({\r\n\t\t\t\t\t\tdate: String(day),\r\n\t\t\t\t\t\tspending: Number(temp),\r\n\t\t\t\t\t});\r\n\t\t\t\t\ttemp = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\toptions: {\r\n\t\t\t    \t...this.state.options,\r\n\t\t\t    \tdata: this.dataPoints,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n    render() {\r\n        return <AgChartsReact options={this.state.options} />;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}