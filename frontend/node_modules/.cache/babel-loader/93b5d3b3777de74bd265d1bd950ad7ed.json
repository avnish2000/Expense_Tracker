{"ast":null,"code":"// @ts-ignore Suppress tsc error: Property 'sign' does not exist on type 'Math'\nvar sign = Math.sign ? Math.sign : function (x) {\n  x = +x;\n\n  if (x === 0 || isNaN(x)) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n};\n/**\n * Finds the roots of a parametric linear equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n */\n\nexport function linearRoot(a, b) {\n  var t = -b / a;\n  return a !== 0 && t >= 0 && t <= 1 ? [t] : [];\n}\n/**\n * Finds the roots of a parametric quadratic equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n */\n\nexport function quadraticRoots(a, b, c) {\n  if (a === 0) {\n    return linearRoot(b, c);\n  }\n\n  var D = b * b - 4 * a * c; // The polynomial's discriminant.\n\n  var roots = [];\n\n  if (D === 0) {\n    // A single real root.\n    var t = -b / (2 * a);\n\n    if (t >= 0 && t <= 1) {\n      roots.push(t);\n    }\n  } else if (D > 0) {\n    // A pair of distinct real roots.\n    var rD = Math.sqrt(D);\n    var t1 = (-b - rD) / (2 * a);\n    var t2 = (-b + rD) / (2 * a);\n\n    if (t1 >= 0 && t1 <= 1) {\n      roots.push(t1);\n    }\n\n    if (t2 >= 0 && t2 <= 1) {\n      roots.push(t2);\n    }\n  } // else -> Complex roots.\n\n\n  return roots;\n}\n/**\n * Finds the roots of a parametric cubic equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n * Returns an array of parametric intersection locations along the cubic,\n * excluding out-of-bounds intersections (before or after the end point\n * or in the imaginary plane).\n * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/\n */\n\nexport function cubicRoots(a, b, c, d) {\n  if (a === 0) {\n    return quadraticRoots(b, c, d);\n  }\n\n  var A = b / a;\n  var B = c / a;\n  var C = d / a;\n  var Q = (3 * B - A * A) / 9;\n  var R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;\n  var D = Q * Q * Q + R * R; // The polynomial's discriminant.\n\n  var third = 1 / 3;\n  var roots = [];\n\n  if (D >= 0) {\n    // Complex or duplicate roots.\n    var rD = Math.sqrt(D);\n    var S = sign(R + rD) * Math.pow(Math.abs(R + rD), third);\n    var T = sign(R - rD) * Math.pow(Math.abs(R - rD), third);\n    var Im = Math.abs(Math.sqrt(3) * (S - T) / 2); // Complex part of the root pair.\n\n    var t = -third * A + (S + T); // A real root.\n\n    if (t >= 0 && t <= 1) {\n      roots.push(t);\n    }\n\n    if (Im === 0) {\n      var t_1 = -third * A - (S + T) / 2; // The real part of a complex root.\n\n      if (t_1 >= 0 && t_1 <= 1) {\n        roots.push(t_1);\n      }\n    }\n  } else {\n    // Distinct real roots.\n    var theta = Math.acos(R / Math.sqrt(-Q * Q * Q));\n    var thirdA = third * A;\n    var twoSqrtQ = 2 * Math.sqrt(-Q);\n    var t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;\n    var t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;\n    var t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;\n\n    if (t1 >= 0 && t1 <= 1) {\n      roots.push(t1);\n    }\n\n    if (t2 >= 0 && t2 <= 1) {\n      roots.push(t2);\n    }\n\n    if (t3 >= 0 && t3 <= 1) {\n      roots.push(t3);\n    }\n  }\n\n  return roots;\n}","map":{"version":3,"sources":["E:/Expense-Tracker/frontend/node_modules/ag-charts-community/dist/es6/scene/polyRoots.js"],"names":["sign","Math","x","isNaN","linearRoot","a","b","t","quadraticRoots","c","D","roots","push","rD","sqrt","t1","t2","cubicRoots","d","A","B","C","Q","R","third","S","pow","abs","T","Im","t_1","theta","acos","thirdA","twoSqrtQ","cos","PI","t3"],"mappings":"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","sourcesContent":["// @ts-ignore Suppress tsc error: Property 'sign' does not exist on type 'Math'\nvar sign = Math.sign ? Math.sign : function (x) {\n    x = +x;\n    if (x === 0 || isNaN(x)) {\n        return x;\n    }\n    return x > 0 ? 1 : -1;\n};\n/**\n * Finds the roots of a parametric linear equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n */\nexport function linearRoot(a, b) {\n    var t = -b / a;\n    return (a !== 0 && t >= 0 && t <= 1) ? [t] : [];\n}\n/**\n * Finds the roots of a parametric quadratic equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n */\nexport function quadraticRoots(a, b, c) {\n    if (a === 0) {\n        return linearRoot(b, c);\n    }\n    var D = b * b - 4 * a * c; // The polynomial's discriminant.\n    var roots = [];\n    if (D === 0) { // A single real root.\n        var t = -b / (2 * a);\n        if (t >= 0 && t <= 1) {\n            roots.push(t);\n        }\n    }\n    else if (D > 0) { // A pair of distinct real roots.\n        var rD = Math.sqrt(D);\n        var t1 = (-b - rD) / (2 * a);\n        var t2 = (-b + rD) / (2 * a);\n        if (t1 >= 0 && t1 <= 1) {\n            roots.push(t1);\n        }\n        if (t2 >= 0 && t2 <= 1) {\n            roots.push(t2);\n        }\n    }\n    // else -> Complex roots.\n    return roots;\n}\n/**\n * Finds the roots of a parametric cubic equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n * Returns an array of parametric intersection locations along the cubic,\n * excluding out-of-bounds intersections (before or after the end point\n * or in the imaginary plane).\n * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/\n */\nexport function cubicRoots(a, b, c, d) {\n    if (a === 0) {\n        return quadraticRoots(b, c, d);\n    }\n    var A = b / a;\n    var B = c / a;\n    var C = d / a;\n    var Q = (3 * B - A * A) / 9;\n    var R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;\n    var D = Q * Q * Q + R * R; // The polynomial's discriminant.\n    var third = 1 / 3;\n    var roots = [];\n    if (D >= 0) { // Complex or duplicate roots.\n        var rD = Math.sqrt(D);\n        var S = sign(R + rD) * Math.pow(Math.abs(R + rD), third);\n        var T = sign(R - rD) * Math.pow(Math.abs(R - rD), third);\n        var Im = Math.abs(Math.sqrt(3) * (S - T) / 2); // Complex part of the root pair.\n        var t = -third * A + (S + T); // A real root.\n        if (t >= 0 && t <= 1) {\n            roots.push(t);\n        }\n        if (Im === 0) {\n            var t_1 = -third * A - (S + T) / 2; // The real part of a complex root.\n            if (t_1 >= 0 && t_1 <= 1) {\n                roots.push(t_1);\n            }\n        }\n    }\n    else { // Distinct real roots.\n        var theta = Math.acos(R / Math.sqrt(-Q * Q * Q));\n        var thirdA = third * A;\n        var twoSqrtQ = 2 * Math.sqrt(-Q);\n        var t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;\n        var t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;\n        var t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;\n        if (t1 >= 0 && t1 <= 1) {\n            roots.push(t1);\n        }\n        if (t2 >= 0 && t2 <= 1) {\n            roots.push(t2);\n        }\n        if (t3 >= 0 && t3 <= 1) {\n            roots.push(t3);\n        }\n    }\n    return roots;\n}\n"]},"metadata":{},"sourceType":"module"}